
P2_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008754  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08008914  08008914  00018914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a08  08008a08  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008a08  08008a08  00018a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a10  08008a10  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a10  08008a10  00018a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a14  08008a14  00018a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008a18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000124c  20000010  08008a28  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000125c  08008a28  0002125c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002385b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e27  00000000  00000000  0004389b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001cc8  00000000  00000000  000476c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b00  00000000  00000000  00049390  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000338cd  00000000  00000000  0004ae90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001751a  00000000  00000000  0007e75d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0013855b  00000000  00000000  00095c77  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ce1d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a14  00000000  00000000  001ce250  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080088fc 	.word	0x080088fc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	080088fc 	.word	0x080088fc

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b972 	b.w	80004fc <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	4688      	mov	r8, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14b      	bne.n	80002d6 <__udivmoddi4+0xa6>
 800023e:	428a      	cmp	r2, r1
 8000240:	4615      	mov	r5, r2
 8000242:	d967      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0720 	rsb	r7, r2, #32
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	fa20 f707 	lsr.w	r7, r0, r7
 8000256:	4095      	lsls	r5, r2
 8000258:	ea47 0803 	orr.w	r8, r7, r3
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbb8 f7fe 	udiv	r7, r8, lr
 8000268:	fa1f fc85 	uxth.w	ip, r5
 800026c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000270:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000274:	fb07 f10c 	mul.w	r1, r7, ip
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18eb      	adds	r3, r5, r3
 800027e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000282:	f080 811b 	bcs.w	80004bc <__udivmoddi4+0x28c>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8118 	bls.w	80004bc <__udivmoddi4+0x28c>
 800028c:	3f02      	subs	r7, #2
 800028e:	442b      	add	r3, r5
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0fe 	udiv	r0, r3, lr
 8000298:	fb0e 3310 	mls	r3, lr, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a4:	45a4      	cmp	ip, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	192c      	adds	r4, r5, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x290>
 80002b2:	45a4      	cmp	ip, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x290>
 80002b8:	3802      	subs	r0, #2
 80002ba:	442c      	add	r4, r5
 80002bc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c0:	eba4 040c 	sub.w	r4, r4, ip
 80002c4:	2700      	movs	r7, #0
 80002c6:	b11e      	cbz	r6, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c6 4300 	strd	r4, r3, [r6]
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xbe>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80eb 	beq.w	80004b6 <__udivmoddi4+0x286>
 80002e0:	2700      	movs	r7, #0
 80002e2:	e9c6 0100 	strd	r0, r1, [r6]
 80002e6:	4638      	mov	r0, r7
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f783 	clz	r7, r3
 80002f2:	2f00      	cmp	r7, #0
 80002f4:	d147      	bne.n	8000386 <__udivmoddi4+0x156>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd0>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80fa 	bhi.w	80004f4 <__udivmoddi4+0x2c4>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	4698      	mov	r8, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800030e:	e9c6 4800 	strd	r4, r8, [r6]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xe8>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 808f 	bne.w	8000440 <__udivmoddi4+0x210>
 8000322:	1b49      	subs	r1, r1, r5
 8000324:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000328:	fa1f f885 	uxth.w	r8, r5
 800032c:	2701      	movs	r7, #1
 800032e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fb0e 111c 	mls	r1, lr, ip, r1
 8000338:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800033c:	fb08 f10c 	mul.w	r1, r8, ip
 8000340:	4299      	cmp	r1, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x124>
 8000344:	18eb      	adds	r3, r5, r3
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4299      	cmp	r1, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 8000352:	4684      	mov	ip, r0
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000360:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x14c>
 800036c:	192c      	adds	r4, r5, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x14a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80b6 	bhi.w	80004e6 <__udivmoddi4+0x2b6>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e79f      	b.n	80002c6 <__udivmoddi4+0x96>
 8000386:	f1c7 0c20 	rsb	ip, r7, #32
 800038a:	40bb      	lsls	r3, r7
 800038c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000390:	ea4e 0e03 	orr.w	lr, lr, r3
 8000394:	fa01 f407 	lsl.w	r4, r1, r7
 8000398:	fa20 f50c 	lsr.w	r5, r0, ip
 800039c:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a4:	4325      	orrs	r5, r4
 80003a6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003aa:	0c2c      	lsrs	r4, r5, #16
 80003ac:	fb08 3319 	mls	r3, r8, r9, r3
 80003b0:	fa1f fa8e 	uxth.w	sl, lr
 80003b4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b8:	fb09 f40a 	mul.w	r4, r9, sl
 80003bc:	429c      	cmp	r4, r3
 80003be:	fa02 f207 	lsl.w	r2, r2, r7
 80003c2:	fa00 f107 	lsl.w	r1, r0, r7
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1e 0303 	adds.w	r3, lr, r3
 80003cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d0:	f080 8087 	bcs.w	80004e2 <__udivmoddi4+0x2b2>
 80003d4:	429c      	cmp	r4, r3
 80003d6:	f240 8084 	bls.w	80004e2 <__udivmoddi4+0x2b2>
 80003da:	f1a9 0902 	sub.w	r9, r9, #2
 80003de:	4473      	add	r3, lr
 80003e0:	1b1b      	subs	r3, r3, r4
 80003e2:	b2ad      	uxth	r5, r5
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1e 0404 	adds.w	r4, lr, r4
 80003fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000400:	d26b      	bcs.n	80004da <__udivmoddi4+0x2aa>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d969      	bls.n	80004da <__udivmoddi4+0x2aa>
 8000406:	3802      	subs	r0, #2
 8000408:	4474      	add	r4, lr
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c2      	mov	sl, r8
 800041a:	464b      	mov	r3, r9
 800041c:	d354      	bcc.n	80004c8 <__udivmoddi4+0x298>
 800041e:	d051      	beq.n	80004c4 <__udivmoddi4+0x294>
 8000420:	2e00      	cmp	r6, #0
 8000422:	d069      	beq.n	80004f8 <__udivmoddi4+0x2c8>
 8000424:	ebb1 050a 	subs.w	r5, r1, sl
 8000428:	eb64 0403 	sbc.w	r4, r4, r3
 800042c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000430:	40fd      	lsrs	r5, r7
 8000432:	40fc      	lsrs	r4, r7
 8000434:	ea4c 0505 	orr.w	r5, ip, r5
 8000438:	e9c6 5400 	strd	r5, r4, [r6]
 800043c:	2700      	movs	r7, #0
 800043e:	e747      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000440:	f1c2 0320 	rsb	r3, r2, #32
 8000444:	fa20 f703 	lsr.w	r7, r0, r3
 8000448:	4095      	lsls	r5, r2
 800044a:	fa01 f002 	lsl.w	r0, r1, r2
 800044e:	fa21 f303 	lsr.w	r3, r1, r3
 8000452:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000456:	4338      	orrs	r0, r7
 8000458:	0c01      	lsrs	r1, r0, #16
 800045a:	fbb3 f7fe 	udiv	r7, r3, lr
 800045e:	fa1f f885 	uxth.w	r8, r5
 8000462:	fb0e 3317 	mls	r3, lr, r7, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb07 f308 	mul.w	r3, r7, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	fa04 f402 	lsl.w	r4, r4, r2
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x256>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f107 3cff 	add.w	ip, r7, #4294967295
 800047c:	d22f      	bcs.n	80004de <__udivmoddi4+0x2ae>
 800047e:	428b      	cmp	r3, r1
 8000480:	d92d      	bls.n	80004de <__udivmoddi4+0x2ae>
 8000482:	3f02      	subs	r7, #2
 8000484:	4429      	add	r1, r5
 8000486:	1acb      	subs	r3, r1, r3
 8000488:	b281      	uxth	r1, r0
 800048a:	fbb3 f0fe 	udiv	r0, r3, lr
 800048e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb00 f308 	mul.w	r3, r0, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x27e>
 800049e:	1869      	adds	r1, r5, r1
 80004a0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a4:	d217      	bcs.n	80004d6 <__udivmoddi4+0x2a6>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d915      	bls.n	80004d6 <__udivmoddi4+0x2a6>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4429      	add	r1, r5
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b4:	e73b      	b.n	800032e <__udivmoddi4+0xfe>
 80004b6:	4637      	mov	r7, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e709      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004bc:	4607      	mov	r7, r0
 80004be:	e6e7      	b.n	8000290 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c4:	4541      	cmp	r1, r8
 80004c6:	d2ab      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004c8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004cc:	eb69 020e 	sbc.w	r2, r9, lr
 80004d0:	3801      	subs	r0, #1
 80004d2:	4613      	mov	r3, r2
 80004d4:	e7a4      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d6:	4660      	mov	r0, ip
 80004d8:	e7e9      	b.n	80004ae <__udivmoddi4+0x27e>
 80004da:	4618      	mov	r0, r3
 80004dc:	e795      	b.n	800040a <__udivmoddi4+0x1da>
 80004de:	4667      	mov	r7, ip
 80004e0:	e7d1      	b.n	8000486 <__udivmoddi4+0x256>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e77c      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	442c      	add	r4, r5
 80004ea:	e747      	b.n	800037c <__udivmoddi4+0x14c>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	442b      	add	r3, r5
 80004f2:	e72f      	b.n	8000354 <__udivmoddi4+0x124>
 80004f4:	4638      	mov	r0, r7
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xda>
 80004f8:	4637      	mov	r7, r6
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0xa0>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	4a07      	ldr	r2, [pc, #28]	; (800052c <vApplicationGetIdleTaskMemory+0x2c>)
 8000510:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	4a06      	ldr	r2, [pc, #24]	; (8000530 <vApplicationGetIdleTaskMemory+0x30>)
 8000516:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	2000002c 	.word	0x2000002c
 8000530:	20000080 	.word	0x20000080

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b09c      	sub	sp, #112	; 0x70
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f001 fb7d 	bl	8001c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f873 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000542:	f000 f999 	bl	8000878 <MX_GPIO_Init>
  MX_TIM16_Init();
 8000546:	f000 f925 	bl	8000794 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800054a:	f000 f949 	bl	80007e0 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 800054e:	f000 f8e3 	bl	8000718 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  InicializaSensores();
 8000552:	f000 fc71 	bl	8000e38 <InicializaSensores>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of SemaforoLED */
  osSemaphoreDef(SemaforoLED);
 8000556:	2300      	movs	r3, #0
 8000558:	66bb      	str	r3, [r7, #104]	; 0x68
 800055a:	2300      	movs	r3, #0
 800055c:	66fb      	str	r3, [r7, #108]	; 0x6c
  SemaforoLEDHandle = osSemaphoreCreate(osSemaphore(SemaforoLED), 1);
 800055e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000562:	2101      	movs	r1, #1
 8000564:	4618      	mov	r0, r3
 8000566:	f005 fc68 	bl	8005e3a <osSemaphoreCreate>
 800056a:	4602      	mov	r2, r0
 800056c:	4b25      	ldr	r3, [pc, #148]	; (8000604 <main+0xd0>)
 800056e:	601a      	str	r2, [r3, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of ColaAcc */
  osMessageQDef(ColaAcc, 16, uint16_t);
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <main+0xd4>)
 8000572:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000576:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000578:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ColaAccHandle = osMessageCreate(osMessageQ(ColaAcc), NULL);
 800057c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f005 fd10 	bl	8005fa8 <osMessageCreate>
 8000588:	4602      	mov	r2, r0
 800058a:	4b20      	ldr	r3, [pc, #128]	; (800060c <main+0xd8>)
 800058c:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, LED_blink, osPriorityAboveNormal, 0, 128);
 800058e:	4b20      	ldr	r3, [pc, #128]	; (8000610 <main+0xdc>)
 8000590:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000594:	461d      	mov	r5, r3
 8000596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800059e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80005a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f005 fbe6 	bl	8005d7a <osThreadCreate>
 80005ae:	4602      	mov	r2, r0
 80005b0:	4b18      	ldr	r3, [pc, #96]	; (8000614 <main+0xe0>)
 80005b2:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, MuestreaAcc, osPriorityLow, 0, 128);
 80005b4:	4b18      	ldr	r3, [pc, #96]	; (8000618 <main+0xe4>)
 80005b6:	f107 0420 	add.w	r4, r7, #32
 80005ba:	461d      	mov	r5, r3
 80005bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80005c8:	f107 0320 	add.w	r3, r7, #32
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f005 fbd3 	bl	8005d7a <osThreadCreate>
 80005d4:	4602      	mov	r2, r0
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <main+0xe8>)
 80005d8:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task3 */
  osThreadDef(Task3, MandaDatos, osPriorityNormal, 0, 128);
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <main+0xec>)
 80005dc:	1d3c      	adds	r4, r7, #4
 80005de:	461d      	mov	r5, r3
 80005e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f005 fbc2 	bl	8005d7a <osThreadCreate>
 80005f6:	4602      	mov	r2, r0
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <main+0xf0>)
 80005fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005fc:	f005 fbb6 	bl	8005d6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000600:	e7fe      	b.n	8000600 <main+0xcc>
 8000602:	bf00      	nop
 8000604:	200010d8 	.word	0x200010d8
 8000608:	08008914 	.word	0x08008914
 800060c:	2000100c 	.word	0x2000100c
 8000610:	0800892c 	.word	0x0800892c
 8000614:	20001010 	.word	0x20001010
 8000618:	08008950 	.word	0x08008950
 800061c:	200010b8 	.word	0x200010b8
 8000620:	08008974 	.word	0x08008974
 8000624:	200010b4 	.word	0x200010b4

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b0be      	sub	sp, #248	; 0xf8
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000632:	2244      	movs	r2, #68	; 0x44
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f008 f957 	bl	80088ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	229c      	movs	r2, #156	; 0x9c
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f008 f949 	bl	80088ea <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000658:	f44f 7000 	mov.w	r0, #512	; 0x200
 800065c:	f002 fc90 	bl	8002f80 <HAL_PWREx_ControlVoltageScaling>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000666:	f000 fccd 	bl	8001004 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066a:	2302      	movs	r3, #2
 800066c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000674:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2340      	movs	r3, #64	; 0x40
 800067a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 2;
 800068a:	2302      	movs	r3, #2
 800068c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000690:	230a      	movs	r3, #10
 8000692:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000696:	2302      	movs	r3, #2
 8000698:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 fd1b 	bl	80030e8 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b8:	f000 fca4 	bl	8001004 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2303      	movs	r3, #3
 80006c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006de:	2101      	movs	r1, #1
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 f927 	bl	8003934 <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006ec:	f000 fc8a 	bl	8001004 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C2;
 80006f0:	2382      	movs	r3, #130	; 0x82
 80006f2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 fbf6 	bl	8003ef0 <HAL_RCCEx_PeriphCLKConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800070a:	f000 fc7b 	bl	8001004 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	37f8      	adds	r7, #248	; 0xf8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_SPI3_Init+0x74>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <MX_SPI3_Init+0x78>)
 8000720:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_SPI3_Init+0x74>)
 8000724:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000728:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_SPI3_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_SPI3_Init+0x74>)
 8000732:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000736:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_SPI3_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_SPI3_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_SPI3_Init+0x74>)
 8000746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_SPI3_Init+0x74>)
 800074e:	2218      	movs	r2, #24
 8000750:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_SPI3_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_SPI3_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_SPI3_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_SPI3_Init+0x74>)
 8000766:	2207      	movs	r2, #7
 8000768:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_SPI3_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_SPI3_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_SPI3_Init+0x74>)
 8000778:	f004 f922 	bl	80049c0 <HAL_SPI_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000782:	f000 fc3f 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000fa8 	.word	0x20000fa8
 8000790:	40003c00 	.word	0x40003c00

08000794 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_TIM16_Init+0x44>)
 800079a:	4a10      	ldr	r2, [pc, #64]	; (80007dc <MX_TIM16_Init+0x48>)
 800079c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 180;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_TIM16_Init+0x44>)
 80007a0:	22b4      	movs	r2, #180	; 0xb4
 80007a2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_TIM16_Init+0x44>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_TIM16_Init+0x44>)
 80007ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007b0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_TIM16_Init+0x44>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <MX_TIM16_Init+0x44>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_TIM16_Init+0x44>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <MX_TIM16_Init+0x44>)
 80007c6:	f004 f99e 	bl	8004b06 <HAL_TIM_Base_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80007d0:	f000 fc18 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20001168 	.word	0x20001168
 80007dc:	40014400 	.word	0x40014400

080007e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <MX_USART2_UART_Init+0x90>)
 80007e6:	4a23      	ldr	r2, [pc, #140]	; (8000874 <MX_USART2_UART_Init+0x94>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <MX_USART2_UART_Init+0x90>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <MX_USART2_UART_Init+0x90>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <MX_USART2_UART_Init+0x90>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <MX_USART2_UART_Init+0x90>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <MX_USART2_UART_Init+0x90>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <MX_USART2_UART_Init+0x90>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <MX_USART2_UART_Init+0x90>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <MX_USART2_UART_Init+0x90>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_USART2_UART_Init+0x90>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <MX_USART2_UART_Init+0x90>)
 8000824:	2200      	movs	r2, #0
 8000826:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000828:	4811      	ldr	r0, [pc, #68]	; (8000870 <MX_USART2_UART_Init+0x90>)
 800082a:	f004 fc33 	bl	8005094 <HAL_UART_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000834:	f000 fbe6 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000838:	2100      	movs	r1, #0
 800083a:	480d      	ldr	r0, [pc, #52]	; (8000870 <MX_USART2_UART_Init+0x90>)
 800083c:	f005 f987 	bl	8005b4e <HAL_UARTEx_SetTxFifoThreshold>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000846:	f000 fbdd 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800084a:	2100      	movs	r1, #0
 800084c:	4808      	ldr	r0, [pc, #32]	; (8000870 <MX_USART2_UART_Init+0x90>)
 800084e:	f005 f9bc 	bl	8005bca <HAL_UARTEx_SetRxFifoThreshold>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000858:	f000 fbd4 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	; (8000870 <MX_USART2_UART_Init+0x90>)
 800085e:	f005 f93d 	bl	8005adc <HAL_UARTEx_DisableFifoMode>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000868:	f000 fbcc 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200010dc 	.word	0x200010dc
 8000874:	40004400 	.word	0x40004400

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08e      	sub	sp, #56	; 0x38
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800088e:	4bb5      	ldr	r3, [pc, #724]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4ab4      	ldr	r2, [pc, #720]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 8000894:	f043 0310 	orr.w	r3, r3, #16
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4bb2      	ldr	r3, [pc, #712]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0310 	and.w	r3, r3, #16
 80008a2:	623b      	str	r3, [r7, #32]
 80008a4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4baf      	ldr	r3, [pc, #700]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4aae      	ldr	r2, [pc, #696]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4bac      	ldr	r3, [pc, #688]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	61fb      	str	r3, [r7, #28]
 80008bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	4ba9      	ldr	r3, [pc, #676]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4aa8      	ldr	r2, [pc, #672]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 80008c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4ba6      	ldr	r3, [pc, #664]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d2:	61bb      	str	r3, [r7, #24]
 80008d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	4ba3      	ldr	r3, [pc, #652]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	4aa2      	ldr	r2, [pc, #648]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e2:	4ba0      	ldr	r3, [pc, #640]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b9d      	ldr	r3, [pc, #628]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a9c      	ldr	r2, [pc, #624]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b9a      	ldr	r3, [pc, #616]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000906:	4b97      	ldr	r3, [pc, #604]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	4a96      	ldr	r2, [pc, #600]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000912:	4b94      	ldr	r3, [pc, #592]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	f003 0308 	and.w	r3, r3, #8
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091e:	4b91      	ldr	r3, [pc, #580]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4a90      	ldr	r2, [pc, #576]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 8000924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4b8e      	ldr	r3, [pc, #568]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000936:	f002 fbc7 	bl	80030c8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800093a:	4b8a      	ldr	r3, [pc, #552]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	4a89      	ldr	r2, [pc, #548]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 8000940:	f043 0320 	orr.w	r3, r3, #32
 8000944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000946:	4b87      	ldr	r3, [pc, #540]	; (8000b64 <MX_GPIO_Init+0x2ec>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	f003 0320 	and.w	r3, r3, #32
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|DCDC_2_EN_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f242 0102 	movw	r1, #8194	; 0x2002
 8000958:	4883      	ldr	r0, [pc, #524]	; (8000b68 <MX_GPIO_Init+0x2f0>)
 800095a:	f001 fd0b 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f648 0181 	movw	r1, #34945	; 0x8881
 8000964:	4881      	ldr	r0, [pc, #516]	; (8000b6c <MX_GPIO_Init+0x2f4>)
 8000966:	f001 fd05 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RST_GPIO_Port, BLE_RST_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000974:	f001 fcfe 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2140      	movs	r1, #64	; 0x40
 800097c:	487c      	ldr	r0, [pc, #496]	; (8000b70 <MX_GPIO_Init+0x2f8>)
 800097e:	f001 fcf9 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 8000982:	2200      	movs	r2, #0
 8000984:	f247 5128 	movw	r1, #29992	; 0x7528
 8000988:	487a      	ldr	r0, [pc, #488]	; (8000b74 <MX_GPIO_Init+0x2fc>)
 800098a:	f001 fcf3 	bl	8002374 <HAL_GPIO_WritePin>
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BLE_SPI_CS_Pin|SEL1_2_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2121      	movs	r1, #33	; 0x21
 8000992:	4879      	ldr	r0, [pc, #484]	; (8000b78 <MX_GPIO_Init+0x300>)
 8000994:	f001 fcee 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_MOSI_p2_Pin|PB11_Pin, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 800099e:	4877      	ldr	r0, [pc, #476]	; (8000b7c <MX_GPIO_Init+0x304>)
 80009a0:	f001 fce8 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOOT0_PE0_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0_Pin|BLE_TEST8_Pin;
 80009a4:	f240 4301 	movw	r3, #1025	; 0x401
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	4619      	mov	r1, r3
 80009b8:	486b      	ldr	r0, [pc, #428]	; (8000b68 <MX_GPIO_Init+0x2f0>)
 80009ba:	f001 fa57 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9_Pin PB8_Pin PB14_Pin CHRGB0_Pin */
  GPIO_InitStruct.Pin = PB9_Pin|PB8_Pin|PB14_Pin|CHRGB0_Pin;
 80009be:	f244 3301 	movw	r3, #17153	; 0x4301
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c4:	2303      	movs	r3, #3
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d0:	4619      	mov	r1, r3
 80009d2:	486a      	ldr	r0, [pc, #424]	; (8000b7c <MX_GPIO_Init+0x304>)
 80009d4:	f001 fa4a 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_PE0H3_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0H3_Pin;
 80009d8:	2308      	movs	r3, #8
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT0_PE0H3_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e8:	4619      	mov	r1, r3
 80009ea:	4865      	ldr	r0, [pc, #404]	; (8000b80 <MX_GPIO_Init+0x308>)
 80009ec:	f001 fa3e 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_D3_Pin SDMMC_D2_Pin SDMMC_D1_Pin SDMMC_CK_Pin
                           SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D3_Pin|SDMMC_D2_Pin|SDMMC_D1_Pin|SDMMC_CK_Pin
 80009f0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDMMC_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a02:	230c      	movs	r3, #12
 8000a04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4858      	ldr	r0, [pc, #352]	; (8000b70 <MX_GPIO_Init+0x2f8>)
 8000a0e:	f001 fa2d 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_TEST9_Pin WIFI_DRDY_Pin INT1_DHC_Pin INT_STT_Pin
                           INT1_ADWB_Pin */
  GPIO_InitStruct.Pin = BLE_TEST9_Pin|WIFI_DRDY_Pin|INT1_DHC_Pin|INT_STT_Pin
 8000a12:	f64c 1308 	movw	r3, #51464	; 0xc908
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
                          |INT1_ADWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a18:	4b5a      	ldr	r3, [pc, #360]	; (8000b84 <MX_GPIO_Init+0x30c>)
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a24:	4619      	mov	r1, r3
 8000a26:	4850      	ldr	r0, [pc, #320]	; (8000b68 <MX_GPIO_Init+0x2f0>)
 8000a28:	f001 fa20 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI2_CLK_Pin;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a3c:	2305      	movs	r3, #5
 8000a3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a44:	4619      	mov	r1, r3
 8000a46:	4849      	ldr	r0, [pc, #292]	; (8000b6c <MX_GPIO_Init+0x2f4>)
 8000a48:	f001 fa10 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : EX_PWM_Pin */
  GPIO_InitStruct.Pin = EX_PWM_Pin;
 8000a4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(EX_PWM_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a66:	4619      	mov	r1, r3
 8000a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6c:	f001 f9fe 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DP_Pin OTG_FS_DM_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DP_Pin|OTG_FS_DM_Pin;
 8000a70:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a82:	230a      	movs	r3, #10
 8000a84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a90:	f001 f9ec 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SCK_A_Pin SAI1_MCLK_A_Pin SAI1_FS_A_DFSDM_D3_Pin SAI1_SD_A_Pin
                           SAI1_SD_B_Pin */
  GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_MCLK_A_Pin|SAI1_FS_A_DFSDM_D3_Pin|SAI1_SD_A_Pin
 8000a94:	23f4      	movs	r3, #244	; 0xf4
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
                          |SAI1_SD_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000aa4:	230d      	movs	r3, #13
 8000aa6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aac:	4619      	mov	r1, r3
 8000aae:	482e      	ldr	r0, [pc, #184]	; (8000b68 <MX_GPIO_Init+0x2f0>)
 8000ab0:	f001 f9dc 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin DCDC_2_EN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|DCDC_2_EN_Pin;
 8000ab4:	f242 0302 	movw	r3, #8194	; 0x2002
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aca:	4619      	mov	r1, r3
 8000acc:	4826      	ldr	r0, [pc, #152]	; (8000b68 <MX_GPIO_Init+0x2f0>)
 8000ace:	f001 f9cd 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin WIFI_WAKEUP_Pin CS_DH_Pin EX_RESET_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin;
 8000ad2:	f648 0381 	movw	r3, #34945	; 0x8881
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4820      	ldr	r0, [pc, #128]	; (8000b6c <MX_GPIO_Init+0x2f4>)
 8000aec:	f001 f9be 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10_Pin PA9_Pin PA0_Pin DAC1_OUT1_Pin
                           PA1_Pin */
  GPIO_InitStruct.Pin = PA10_Pin|PA9_Pin|PA0_Pin|DAC1_OUT1_Pin
 8000af0:	f240 6313 	movw	r3, #1555	; 0x613
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
                          |PA1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af6:	2303      	movs	r3, #3
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	4619      	mov	r1, r3
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b08:	f001 f9b0 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN5_Pin DFSDM1_D7_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN5_Pin|DFSDM1_D7_Pin;
 8000b0c:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b16:	2302      	movs	r3, #2
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000b1e:	2306      	movs	r3, #6
 8000b20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b26:	4619      	mov	r1, r3
 8000b28:	4814      	ldr	r0, [pc, #80]	; (8000b7c <MX_GPIO_Init+0x304>)
 8000b2a:	f001 f99f 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12_Pin PG10_Pin PG9_Pin */
  GPIO_InitStruct.Pin = PG12_Pin|PG10_Pin|PG9_Pin;
 8000b2e:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b34:	2303      	movs	r3, #3
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b40:	4619      	mov	r1, r3
 8000b42:	480d      	ldr	r0, [pc, #52]	; (8000b78 <MX_GPIO_Init+0x300>)
 8000b44:	f001 f992 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b58:	230c      	movs	r3, #12
 8000b5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b60:	4619      	mov	r1, r3
 8000b62:	e011      	b.n	8000b88 <MX_GPIO_Init+0x310>
 8000b64:	40021000 	.word	0x40021000
 8000b68:	48001000 	.word	0x48001000
 8000b6c:	48000c00 	.word	0x48000c00
 8000b70:	48000800 	.word	0x48000800
 8000b74:	48001400 	.word	0x48001400
 8000b78:	48001800 	.word	0x48001800
 8000b7c:	48000400 	.word	0x48000400
 8000b80:	48001c00 	.word	0x48001c00
 8000b84:	10110000 	.word	0x10110000
 8000b88:	48a4      	ldr	r0, [pc, #656]	; (8000e1c <MX_GPIO_Init+0x5a4>)
 8000b8a:	f001 f96f 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_RST_Pin */
  GPIO_InitStruct.Pin = BLE_RST_Pin;
 8000b8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BLE_RST_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000baa:	f001 f95f 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 8000bae:	2340      	movs	r3, #64	; 0x40
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4896      	ldr	r0, [pc, #600]	; (8000e20 <MX_GPIO_Init+0x5a8>)
 8000bc6:	f001 f951 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_WIFI_Pin C_EN_Pin CS_ADWB_Pin STSAFE_RESET_Pin
                           WIFI_BOOT0_Pin CS_DHC_Pin SEL3_4_Pin */
  GPIO_InitStruct.Pin = CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 8000bca:	f247 5328 	movw	r3, #29992	; 0x7528
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be0:	4619      	mov	r1, r3
 8000be2:	4890      	ldr	r0, [pc, #576]	; (8000e24 <MX_GPIO_Init+0x5ac>)
 8000be4:	f001 f942 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C3_SDA_Pin I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 8000be8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bee:	2312      	movs	r3, #18
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c02:	4619      	mov	r1, r3
 8000c04:	4888      	ldr	r0, [pc, #544]	; (8000e28 <MX_GPIO_Init+0x5b0>)
 8000c06:	f001 f931 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_SEL_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin;
 8000c0a:	2340      	movs	r3, #64	; 0x40
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c16:	2302      	movs	r3, #2
 8000c18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SW_SEL_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c22:	4619      	mov	r1, r3
 8000c24:	487f      	ldr	r0, [pc, #508]	; (8000e24 <MX_GPIO_Init+0x5ac>)
 8000c26:	f001 f921 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_DHC_Pin PGOOD_Pin INT_M_Pin */
  GPIO_InitStruct.Pin = INT2_DHC_Pin|PGOOD_Pin|INT_M_Pin;
 8000c2a:	f44f 7324 	mov.w	r3, #656	; 0x290
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c30:	4b7e      	ldr	r3, [pc, #504]	; (8000e2c <MX_GPIO_Init+0x5b4>)
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4879      	ldr	r0, [pc, #484]	; (8000e24 <MX_GPIO_Init+0x5ac>)
 8000c40:	f001 f914 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin SPI1_CLK_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin|SPI1_CLK_Pin;
 8000c44:	231c      	movs	r3, #28
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c54:	2305      	movs	r3, #5
 8000c56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4872      	ldr	r0, [pc, #456]	; (8000e28 <MX_GPIO_Init+0x5b0>)
 8000c60:	f001 f904 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_SPI_CS_Pin SEL1_2_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin|SEL1_2_Pin;
 8000c64:	2321      	movs	r3, #33	; 0x21
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	486b      	ldr	r0, [pc, #428]	; (8000e28 <MX_GPIO_Init+0x5b0>)
 8000c7c:	f001 f8f6 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_HTS_Pin BLE_INT_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin|BLE_INT_Pin;
 8000c80:	2342      	movs	r3, #66	; 0x42
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c84:	4b69      	ldr	r3, [pc, #420]	; (8000e2c <MX_GPIO_Init+0x5b4>)
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c90:	4619      	mov	r1, r3
 8000c92:	4865      	ldr	r0, [pc, #404]	; (8000e28 <MX_GPIO_Init+0x5b0>)
 8000c94:	f001 f8ea 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C4_SCL_Pin I2C4_SDA_Pin */
  GPIO_InitStruct.Pin = I2C4_SCL_Pin|I2C4_SDA_Pin;
 8000c98:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9e:	2312      	movs	r3, #18
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000caa:	2304      	movs	r3, #4
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4859      	ldr	r0, [pc, #356]	; (8000e1c <MX_GPIO_Init+0x5a4>)
 8000cb6:	f001 f8d9 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC1_IN1_Pin ADC1_IN2_Pin uC_ADC_BATT_Pin */
  GPIO_InitStruct.Pin = ADC1_IN1_Pin|ADC1_IN2_Pin|uC_ADC_BATT_Pin;
 8000cba:	2313      	movs	r3, #19
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cbe:	230b      	movs	r3, #11
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4854      	ldr	r0, [pc, #336]	; (8000e20 <MX_GPIO_Init+0x5a8>)
 8000cce:	f001 f8cd 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000cd2:	230c      	movs	r3, #12
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	484c      	ldr	r0, [pc, #304]	; (8000e20 <MX_GPIO_Init+0x5a8>)
 8000cee:	f001 f8bd 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_ADWB_Pin SD_DETECT_Pin */
  GPIO_InitStruct.Pin = INT2_ADWB_Pin|SD_DETECT_Pin;
 8000cf2:	f241 0304 	movw	r3, #4100	; 0x1004
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d04:	4619      	mov	r1, r3
 8000d06:	484a      	ldr	r0, [pc, #296]	; (8000e30 <MX_GPIO_Init+0x5b8>)
 8000d08:	f001 f8b0 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : CHRG_Pin */
  GPIO_InitStruct.Pin = CHRG_Pin;
 8000d0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHRG_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4840      	ldr	r0, [pc, #256]	; (8000e24 <MX_GPIO_Init+0x5ac>)
 8000d22:	f001 f8a3 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8000d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d2c:	4b3f      	ldr	r3, [pc, #252]	; (8000e2c <MX_GPIO_Init+0x5b4>)
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4838      	ldr	r0, [pc, #224]	; (8000e1c <MX_GPIO_Init+0x5a4>)
 8000d3c:	f001 f896 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8000d40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d52:	2307      	movs	r3, #7
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	482f      	ldr	r0, [pc, #188]	; (8000e1c <MX_GPIO_Init+0x5a4>)
 8000d5e:	f001 f885 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RTS_Pin USART3_CTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 8000d62:	f242 0302 	movw	r3, #8194	; 0x2002
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d74:	2307      	movs	r3, #7
 8000d76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	482c      	ldr	r0, [pc, #176]	; (8000e30 <MX_GPIO_Init+0x5b8>)
 8000d80:	f001 f874 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8000d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d96:	2306      	movs	r3, #6
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4824      	ldr	r0, [pc, #144]	; (8000e34 <MX_GPIO_Init+0x5bc>)
 8000da2:	f001 f863 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin PB11_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|PB11_Pin;
 8000da6:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	481c      	ldr	r0, [pc, #112]	; (8000e30 <MX_GPIO_Init+0x5b8>)
 8000dc0:	f001 f854 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT2_DH_Pin */
  GPIO_InitStruct.Pin = INT2_DH_Pin;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <MX_GPIO_Init+0x5b4>)
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT2_DH_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dda:	f001 f847 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : EX_ADC_Pin */
  GPIO_InitStruct.Pin = EX_ADC_Pin;
 8000dde:	2320      	movs	r3, #32
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000de2:	230b      	movs	r3, #11
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EX_ADC_GPIO_Port, &GPIO_InitStruct);
 8000dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dee:	4619      	mov	r1, r3
 8000df0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df4:	f001 f83a 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12_Pin */
  GPIO_InitStruct.Pin = PE12_Pin;
 8000df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PE12_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4809      	ldr	r0, [pc, #36]	; (8000e34 <MX_GPIO_Init+0x5bc>)
 8000e0e:	f001 f82d 	bl	8001e6c <HAL_GPIO_Init>

}
 8000e12:	bf00      	nop
 8000e14:	3738      	adds	r7, #56	; 0x38
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	48000c00 	.word	0x48000c00
 8000e20:	48000800 	.word	0x48000800
 8000e24:	48001400 	.word	0x48001400
 8000e28:	48001800 	.word	0x48001800
 8000e2c:	10110000 	.word	0x10110000
 8000e30:	48000400 	.word	0x48000400
 8000e34:	48001000 	.word	0x48001000

08000e38 <InicializaSensores>:

/* USER CODE BEGIN 4 */

//INICIALIZA LOS SENSORES INDICADOS
void InicializaSensores(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	//INICIALIZA EL MAGNETOMETRO

	magneto_IO.Address 	= 0x3c;		//0011110b b=0 leer, b=1 escribir
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <InicializaSensores+0x50>)
 8000e3e:	223c      	movs	r2, #60	; 0x3c
 8000e40:	731a      	strb	r2, [r3, #12]
	magneto_IO.BusType 	= 0; 		//0 si I2C
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <InicializaSensores+0x50>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
	magneto_IO.DeInit 	= BSP_I2C2_DeInit;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <InicializaSensores+0x50>)
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <InicializaSensores+0x54>)
 8000e4c:	605a      	str	r2, [r3, #4]
	magneto_IO.GetTick 	= BSP_GetTick;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <InicializaSensores+0x50>)
 8000e50:	4a0f      	ldr	r2, [pc, #60]	; (8000e90 <InicializaSensores+0x58>)
 8000e52:	619a      	str	r2, [r3, #24]
	magneto_IO.Init 	= BSP_I2C2_Init;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <InicializaSensores+0x50>)
 8000e56:	4a0f      	ldr	r2, [pc, #60]	; (8000e94 <InicializaSensores+0x5c>)
 8000e58:	601a      	str	r2, [r3, #0]
	magneto_IO.ReadReg 	= BSP_I2C2_ReadReg;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <InicializaSensores+0x50>)
 8000e5c:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <InicializaSensores+0x60>)
 8000e5e:	615a      	str	r2, [r3, #20]
	magneto_IO.WriteReg = BSP_I2C2_WriteReg;
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <InicializaSensores+0x50>)
 8000e62:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <InicializaSensores+0x64>)
 8000e64:	611a      	str	r2, [r3, #16]

	IIS2MDC_RegisterBusIO(&magneto_sensor, &magneto_IO);
 8000e66:	4908      	ldr	r1, [pc, #32]	; (8000e88 <InicializaSensores+0x50>)
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <InicializaSensores+0x68>)
 8000e6a:	f000 fa75 	bl	8001358 <IIS2MDC_RegisterBusIO>
	IIS2MDC_Init(&magneto_sensor);
 8000e6e:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <InicializaSensores+0x68>)
 8000e70:	f000 fae8 	bl	8001444 <IIS2MDC_Init>
	IIS2MDC_MAG_Enable(&magneto_sensor);
 8000e74:	480a      	ldr	r0, [pc, #40]	; (8000ea0 <InicializaSensores+0x68>)
 8000e76:	f000 fb22 	bl	80014be <IIS2MDC_MAG_Enable>
	IIS2MDC_MAG_GetAxes(&magneto_sensor, &magneto_axes);
 8000e7a:	490a      	ldr	r1, [pc, #40]	; (8000ea4 <InicializaSensores+0x6c>)
 8000e7c:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <InicializaSensores+0x68>)
 8000e7e:	f000 fb4e 	bl	800151e <IIS2MDC_MAG_GetAxes>
	//
	//	IIS2DH_ACC_Enable(&acc_Obj);
	//
	//	IIS2DH_ACC_SetOutputDataRate(&acc_Obj, 400.0f);

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200010bc 	.word	0x200010bc
 8000e8c:	080019a5 	.word	0x080019a5
 8000e90:	08001abd 	.word	0x08001abd
 8000e94:	08001929 	.word	0x08001929
 8000e98:	08001a59 	.word	0x08001a59
 8000e9c:	080019f5 	.word	0x080019f5
 8000ea0:	2000105c 	.word	0x2000105c
 8000ea4:	200011b4 	.word	0x200011b4

08000ea8 <LED_blink>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_LED_blink */
void LED_blink(void const * argument)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
//			HAL_GPIO_WritePin(GPIOE, LED1_Pin, GPIO_PIN_SET);
//			osDelay(200);
//			HAL_GPIO_WritePin(GPIOE, LED1_Pin, GPIO_PIN_RESET);
//			flag1 = 0;
//		}
		osSemaphoreWait(SemaforoLEDHandle,  osWaitForever);
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <LED_blink+0x38>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f004 fff1 	bl	8005ea0 <osSemaphoreWait>
		HAL_GPIO_WritePin(GPIOE, LED1_Pin, GPIO_PIN_SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <LED_blink+0x3c>)
 8000ec4:	f001 fa56 	bl	8002374 <HAL_GPIO_WritePin>
		osDelay(200);
 8000ec8:	20c8      	movs	r0, #200	; 0xc8
 8000eca:	f004 ffa2 	bl	8005e12 <osDelay>
		HAL_GPIO_WritePin(GPIOE, LED1_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <LED_blink+0x3c>)
 8000ed4:	f001 fa4e 	bl	8002374 <HAL_GPIO_WritePin>
		osDelay(1);
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f004 ff9a 	bl	8005e12 <osDelay>
		osSemaphoreWait(SemaforoLEDHandle,  osWaitForever);
 8000ede:	e7e7      	b.n	8000eb0 <LED_blink+0x8>
 8000ee0:	200010d8 	.word	0x200010d8
 8000ee4:	48001000 	.word	0x48001000

08000ee8 <MuestreaAcc>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MuestreaAcc */
void MuestreaAcc(void const * argument)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MuestreaAcc */
	/* Infinite loop */
	for(;;)
	{
		IIS2MDC_MAG_GetAxes(&magneto_sensor, &magneto_axes);
 8000ef0:	4920      	ldr	r1, [pc, #128]	; (8000f74 <MuestreaAcc+0x8c>)
 8000ef2:	4821      	ldr	r0, [pc, #132]	; (8000f78 <MuestreaAcc+0x90>)
 8000ef4:	f000 fb13 	bl	800151e <IIS2MDC_MAG_GetAxes>
		buffer[Inicio] = ((magneto_axes.x));
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <MuestreaAcc+0x8c>)
 8000efa:	6819      	ldr	r1, [r3, #0]
 8000efc:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <MuestreaAcc+0x94>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	b209      	sxth	r1, r1
 8000f04:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <MuestreaAcc+0x98>)
 8000f06:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		buffer[Inicio++] = ((magneto_axes.y));
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <MuestreaAcc+0x8c>)
 8000f0c:	6859      	ldr	r1, [r3, #4]
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <MuestreaAcc+0x94>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	b2d0      	uxtb	r0, r2
 8000f16:	4a19      	ldr	r2, [pc, #100]	; (8000f7c <MuestreaAcc+0x94>)
 8000f18:	7010      	strb	r0, [r2, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	b209      	sxth	r1, r1
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <MuestreaAcc+0x98>)
 8000f20:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		buffer[Inicio++] = ((magneto_axes.z));
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <MuestreaAcc+0x8c>)
 8000f26:	6899      	ldr	r1, [r3, #8]
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MuestreaAcc+0x94>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	b2d0      	uxtb	r0, r2
 8000f30:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <MuestreaAcc+0x94>)
 8000f32:	7010      	strb	r0, [r2, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	b209      	sxth	r1, r1
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MuestreaAcc+0x98>)
 8000f3a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		Inicio++;
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <MuestreaAcc+0x94>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <MuestreaAcc+0x94>)
 8000f48:	701a      	strb	r2, [r3, #0]
		if (Inicio/3 == 10)
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MuestreaAcc+0x94>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	3b1e      	subs	r3, #30
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d80a      	bhi.n	8000f6c <MuestreaAcc+0x84>
		{
			osMessagePut(ColaAccHandle, (uint32_t)(buffer), osWaitForever);
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <MuestreaAcc+0x9c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4909      	ldr	r1, [pc, #36]	; (8000f80 <MuestreaAcc+0x98>)
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	4618      	mov	r0, r3
 8000f62:	f005 f84b 	bl	8005ffc <osMessagePut>
			Inicio = 0;
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <MuestreaAcc+0x94>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
		}

		osDelay(100);
 8000f6c:	2064      	movs	r0, #100	; 0x64
 8000f6e:	f004 ff50 	bl	8005e12 <osDelay>
		IIS2MDC_MAG_GetAxes(&magneto_sensor, &magneto_axes);
 8000f72:	e7bd      	b.n	8000ef0 <MuestreaAcc+0x8>
 8000f74:	200011b4 	.word	0x200011b4
 8000f78:	2000105c 	.word	0x2000105c
 8000f7c:	20000280 	.word	0x20000280
 8000f80:	20001018 	.word	0x20001018
 8000f84:	2000100c 	.word	0x2000100c

08000f88 <MandaDatos>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MandaDatos */
void MandaDatos(void const * argument)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MandaDatos */
	osEvent evt;
	/* Infinite loop */
	for(;;)
	{
		evt = osMessageGet(ColaAccHandle, osWaitForever);
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MandaDatos+0x48>)
 8000f92:	6819      	ldr	r1, [r3, #0]
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f005 f86d 	bl	800607c <osMessageGet>
		void * data_ptr = evt.value.p;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart2, (uint8_t)data_ptr, 30, HAL_MAX_DELAY);
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	4619      	mov	r1, r3
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb0:	221e      	movs	r2, #30
 8000fb2:	4808      	ldr	r0, [pc, #32]	; (8000fd4 <MandaDatos+0x4c>)
 8000fb4:	f004 f8be 	bl	8005134 <HAL_UART_Transmit>
		flag1 = 1;
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <MandaDatos+0x50>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
		osSemaphoreRelease(SemaforoLEDHandle);
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <MandaDatos+0x54>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f004 ffba 	bl	8005f3c <osSemaphoreRelease>
		osDelay(1);
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f004 ff22 	bl	8005e12 <osDelay>
	{
 8000fce:	e7df      	b.n	8000f90 <MandaDatos+0x8>
 8000fd0:	2000100c 	.word	0x2000100c
 8000fd4:	200010dc 	.word	0x200010dc
 8000fd8:	20001014 	.word	0x20001014
 8000fdc:	200010d8 	.word	0x200010d8

08000fe0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d101      	bne.n	8000ff6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ff2:	f000 fe39 	bl	8001c68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40001000 	.word	0x40001000

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800100a:	e7fe      	b.n	800100a <Error_Handler+0x6>

0800100c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_MspInit+0x4c>)
 8001014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001016:	4a10      	ldr	r2, [pc, #64]	; (8001058 <HAL_MspInit+0x4c>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6613      	str	r3, [r2, #96]	; 0x60
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_MspInit+0x4c>)
 8001020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <HAL_MspInit+0x4c>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <HAL_MspInit+0x4c>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001034:	6593      	str	r3, [r2, #88]	; 0x58
 8001036:	4b08      	ldr	r3, [pc, #32]	; (8001058 <HAL_MspInit+0x4c>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	210f      	movs	r1, #15
 8001046:	f06f 0001 	mvn.w	r0, #1
 800104a:	f000 fee5 	bl	8001e18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000

0800105c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <HAL_SPI_MspInit+0x7c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d127      	bne.n	80010ce <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_SPI_MspInit+0x80>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	4a16      	ldr	r2, [pc, #88]	; (80010dc <HAL_SPI_MspInit+0x80>)
 8001084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001088:	6593      	str	r3, [r2, #88]	; 0x58
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <HAL_SPI_MspInit+0x80>)
 800108c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_SPI_MspInit+0x80>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <HAL_SPI_MspInit+0x80>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_SPI_MspInit+0x80>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin|SPI3_CLK_Pin;
 80010ae:	2338      	movs	r3, #56	; 0x38
 80010b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010be:	2306      	movs	r3, #6
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <HAL_SPI_MspInit+0x84>)
 80010ca:	f000 fecf 	bl	8001e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010ce:	bf00      	nop
 80010d0:	3728      	adds	r7, #40	; 0x28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40003c00 	.word	0x40003c00
 80010dc:	40021000 	.word	0x40021000
 80010e0:	48000400 	.word	0x48000400

080010e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0a      	ldr	r2, [pc, #40]	; (800111c <HAL_TIM_Base_MspInit+0x38>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d10b      	bne.n	800110e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <HAL_TIM_Base_MspInit+0x3c>)
 80010f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fa:	4a09      	ldr	r2, [pc, #36]	; (8001120 <HAL_TIM_Base_MspInit+0x3c>)
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	6613      	str	r3, [r2, #96]	; 0x60
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <HAL_TIM_Base_MspInit+0x3c>)
 8001104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800110e:	bf00      	nop
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40014400 	.word	0x40014400
 8001120:	40021000 	.word	0x40021000

08001124 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a17      	ldr	r2, [pc, #92]	; (80011a0 <HAL_UART_MspInit+0x7c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d127      	bne.n	8001196 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <HAL_UART_MspInit+0x80>)
 8001148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114a:	4a16      	ldr	r2, [pc, #88]	; (80011a4 <HAL_UART_MspInit+0x80>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6593      	str	r3, [r2, #88]	; 0x58
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <HAL_UART_MspInit+0x80>)
 8001154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <HAL_UART_MspInit+0x80>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <HAL_UART_MspInit+0x80>)
 8001164:	f043 0308 	orr.w	r3, r3, #8
 8001168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <HAL_UART_MspInit+0x80>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 8001176:	2370      	movs	r3, #112	; 0x70
 8001178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001186:	2307      	movs	r3, #7
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	; (80011a8 <HAL_UART_MspInit+0x84>)
 8001192:	f000 fe6b 	bl	8001e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	; 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40004400 	.word	0x40004400
 80011a4:	40021000 	.word	0x40021000
 80011a8:	48000c00 	.word	0x48000c00

080011ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08c      	sub	sp, #48	; 0x30
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	2036      	movs	r0, #54	; 0x36
 80011c2:	f000 fe29 	bl	8001e18 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011c6:	2036      	movs	r0, #54	; 0x36
 80011c8:	f000 fe42 	bl	8001e50 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011cc:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <HAL_InitTick+0x9c>)
 80011ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d0:	4a1d      	ldr	r2, [pc, #116]	; (8001248 <HAL_InitTick+0x9c>)
 80011d2:	f043 0310 	orr.w	r3, r3, #16
 80011d6:	6593      	str	r3, [r2, #88]	; 0x58
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_InitTick+0x9c>)
 80011da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011dc:	f003 0310 	and.w	r3, r3, #16
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011e4:	f107 0210 	add.w	r2, r7, #16
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4611      	mov	r1, r2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 fd8c 	bl	8003d0c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011f4:	f002 fd5e 	bl	8003cb4 <HAL_RCC_GetPCLK1Freq>
 80011f8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fc:	4a13      	ldr	r2, [pc, #76]	; (800124c <HAL_InitTick+0xa0>)
 80011fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001202:	0c9b      	lsrs	r3, r3, #18
 8001204:	3b01      	subs	r3, #1
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_InitTick+0xa4>)
 800120a:	4a12      	ldr	r2, [pc, #72]	; (8001254 <HAL_InitTick+0xa8>)
 800120c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <HAL_InitTick+0xa4>)
 8001210:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001214:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001216:	4a0e      	ldr	r2, [pc, #56]	; (8001250 <HAL_InitTick+0xa4>)
 8001218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <HAL_InitTick+0xa4>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_InitTick+0xa4>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001228:	4809      	ldr	r0, [pc, #36]	; (8001250 <HAL_InitTick+0xa4>)
 800122a:	f003 fc6c 	bl	8004b06 <HAL_TIM_Base_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d104      	bne.n	800123e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001234:	4806      	ldr	r0, [pc, #24]	; (8001250 <HAL_InitTick+0xa4>)
 8001236:	f003 fcbd 	bl	8004bb4 <HAL_TIM_Base_Start_IT>
 800123a:	4603      	mov	r3, r0
 800123c:	e000      	b.n	8001240 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	3730      	adds	r7, #48	; 0x30
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40021000 	.word	0x40021000
 800124c:	431bde83 	.word	0x431bde83
 8001250:	200011c0 	.word	0x200011c0
 8001254:	40001000 	.word	0x40001000

08001258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800125c:	e7fe      	b.n	800125c <NMI_Handler+0x4>

0800125e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <HardFault_Handler+0x4>

08001264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <MemManage_Handler+0x4>

0800126a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <BusFault_Handler+0x4>

08001270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <UsageFault_Handler+0x4>

08001276 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <TIM6_DAC_IRQHandler+0x10>)
 800128a:	f003 fd03 	bl	8004c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200011c0 	.word	0x200011c0

08001298 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <SystemInit+0x64>)
 800129e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012a2:	4a16      	ldr	r2, [pc, #88]	; (80012fc <SystemInit+0x64>)
 80012a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <SystemInit+0x68>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a13      	ldr	r2, [pc, #76]	; (8001300 <SystemInit+0x68>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <SystemInit+0x68>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <SystemInit+0x68>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a0f      	ldr	r2, [pc, #60]	; (8001300 <SystemInit+0x68>)
 80012c4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80012c8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80012cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <SystemInit+0x68>)
 80012d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012d4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <SystemInit+0x68>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a09      	ldr	r2, [pc, #36]	; (8001300 <SystemInit+0x68>)
 80012dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <SystemInit+0x68>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <SystemInit+0x64>)
 80012ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ee:	609a      	str	r2, [r3, #8]
#endif
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00
 8001300:	40021000 	.word	0x40021000

08001304 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800133c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001308:	f7ff ffc6 	bl	8001298 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800130c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800130e:	e003      	b.n	8001318 <LoopCopyDataInit>

08001310 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001312:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001314:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001316:	3104      	adds	r1, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001318:	480a      	ldr	r0, [pc, #40]	; (8001344 <LoopForever+0xa>)
	ldr	r3, =_edata
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <LoopForever+0xe>)
	adds	r2, r0, r1
 800131c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800131e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001320:	d3f6      	bcc.n	8001310 <CopyDataInit>
	ldr	r2, =_sbss
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001324:	e002      	b.n	800132c <LoopFillZerobss>

08001326 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001326:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001328:	f842 3b04 	str.w	r3, [r2], #4

0800132c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <LoopForever+0x16>)
	cmp	r2, r3
 800132e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001330:	d3f9      	bcc.n	8001326 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001332:	f007 faab 	bl	800888c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001336:	f7ff f8fd 	bl	8000534 <main>

0800133a <LoopForever>:

LoopForever:
    b LoopForever
 800133a:	e7fe      	b.n	800133a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800133c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001340:	08008a18 	.word	0x08008a18
	ldr	r0, =_sdata
 8001344:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001348:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 800134c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001350:	2000125c 	.word	0x2000125c

08001354 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001354:	e7fe      	b.n	8001354 <ADC1_IRQHandler>
	...

08001358 <IIS2MDC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_RegisterBusIO(IIS2MDC_Object_t *pObj, IIS2MDC_IO_t *pIO)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d103      	bne.n	8001374 <IIS2MDC_RegisterBusIO+0x1c>
  {
    ret = IIS2MDC_ERROR;
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	e05e      	b.n	8001432 <IIS2MDC_RegisterBusIO+0xda>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	7b1a      	ldrb	r2, [r3, #12]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	691a      	ldr	r2, [r3, #16]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	695a      	ldr	r2, [r3, #20]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	699a      	ldr	r2, [r3, #24]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a23      	ldr	r2, [pc, #140]	; (800143c <IIS2MDC_RegisterBusIO+0xe4>)
 80013b0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a22      	ldr	r2, [pc, #136]	; (8001440 <IIS2MDC_RegisterBusIO+0xe8>)
 80013b6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d103      	bne.n	80013ce <IIS2MDC_RegisterBusIO+0x76>
    {
      ret = IIS2MDC_ERROR;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	e031      	b.n	8001432 <IIS2MDC_RegisterBusIO+0xda>
    }
    else if (pObj->IO.Init() != IIS2MDC_OK)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4798      	blx	r3
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <IIS2MDC_RegisterBusIO+0x8a>
    {
      ret = IIS2MDC_ERROR;
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	e027      	b.n	8001432 <IIS2MDC_RegisterBusIO+0xda>
    }
    else
    {
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d023      	beq.n	8001432 <IIS2MDC_RegisterBusIO+0xda>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d11e      	bne.n	8001432 <IIS2MDC_RegisterBusIO+0xda>
        {
          if (pObj->IO.BusType == IIS2MDC_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d10e      	bne.n	800141a <IIS2MDC_RegisterBusIO+0xc2>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80013fc:	2334      	movs	r3, #52	; 0x34
 80013fe:	72fb      	strb	r3, [r7, #11]

            if (IIS2MDC_Write_Reg(pObj, IIS2MDC_CFG_REG_C, data) != IIS2MDC_OK)
 8001400:	7afb      	ldrb	r3, [r7, #11]
 8001402:	461a      	mov	r2, r3
 8001404:	2162      	movs	r1, #98	; 0x62
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f8d7 	bl	80015ba <IIS2MDC_Write_Reg>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00f      	beq.n	8001432 <IIS2MDC_RegisterBusIO+0xda>
            {
              ret = IIS2MDC_ERROR;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e00b      	b.n	8001432 <IIS2MDC_RegisterBusIO+0xda>
            }
          }
          else
          {
            /* Disable I2C interface on the component */
            if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	331c      	adds	r3, #28
 800141e:	2101      	movs	r1, #1
 8001420:	4618      	mov	r0, r3
 8001422:	f000 fa5a 	bl	80018da <iis2mdc_i2c_interface_set>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d002      	beq.n	8001432 <IIS2MDC_RegisterBusIO+0xda>
            {
              ret = IIS2MDC_ERROR;
 800142c:	f04f 33ff 	mov.w	r3, #4294967295
 8001430:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001432:	68fb      	ldr	r3, [r7, #12]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	080015f1 	.word	0x080015f1
 8001440:	08001653 	.word	0x08001653

08001444 <IIS2MDC_Init>:
 * @brief  Initialize the IIS2MDC sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_Init(IIS2MDC_Object_t *pObj)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	331c      	adds	r3, #28
 8001450:	2101      	movs	r1, #1
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f9aa 	bl	80017ac <iis2mdc_block_data_update_set>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <IIS2MDC_Init+0x20>
  {
    return IIS2MDC_ERROR;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	e028      	b.n	80014b6 <IIS2MDC_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	331c      	adds	r3, #28
 8001468:	2102      	movs	r1, #2
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f952 	bl	8001714 <iis2mdc_operating_mode_set>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d002      	beq.n	800147c <IIS2MDC_Init+0x38>
  {
    return IIS2MDC_ERROR;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	e01c      	b.n	80014b6 <IIS2MDC_Init+0x72>
  }

  /* Output data rate selection */
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	331c      	adds	r3, #28
 8001480:	2103      	movs	r1, #3
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f96c 	bl	8001760 <iis2mdc_data_rate_set>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d002      	beq.n	8001494 <IIS2MDC_Init+0x50>
  {
    return IIS2MDC_ERROR;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	e010      	b.n	80014b6 <IIS2MDC_Init+0x72>
  }

  /* Self Test disabled. */
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	331c      	adds	r3, #28
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f9f7 	bl	800188e <iis2mdc_self_test_set>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <IIS2MDC_Init+0x68>
  {
    return IIS2MDC_ERROR;
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295
 80014aa:	e004      	b.n	80014b6 <IIS2MDC_Init+0x72>
  }

  pObj->is_initialized = 1;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2MDC_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <IIS2MDC_MAG_Enable>:
 * @brief Enable the IIS2MDC magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_Enable(IIS2MDC_Object_t *pObj)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d101      	bne.n	80014d4 <IIS2MDC_MAG_Enable+0x16>
  {
    return IIS2MDC_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	e010      	b.n	80014f6 <IIS2MDC_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	331c      	adds	r3, #28
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f91a 	bl	8001714 <iis2mdc_operating_mode_set>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d002      	beq.n	80014ec <IIS2MDC_MAG_Enable+0x2e>
  {
    return IIS2MDC_ERROR;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	e004      	b.n	80014f6 <IIS2MDC_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2MDC_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <IIS2MDC_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800150e:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <IIS2MDC_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	331c      	adds	r3, #28
 800152c:	f107 0210 	add.w	r2, r7, #16
 8001530:	4611      	mov	r1, r2
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f960 	bl	80017f8 <iis2mdc_magnetic_raw_get>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d002      	beq.n	8001544 <IIS2MDC_MAG_GetAxes+0x26>
  {
    return IIS2MDC_ERROR;
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
 8001542:	e036      	b.n	80015b2 <IIS2MDC_MAG_GetAxes+0x94>
  }

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	4619      	mov	r1, r3
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ffd7 	bl	80014fe <IIS2MDC_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8001550:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001554:	ee07 3a90 	vmov	s15, r3
 8001558:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800155c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001564:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001568:	ee17 2a90 	vmov	r2, s15
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001570:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001574:	ee07 3a90 	vmov	s15, r3
 8001578:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800157c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001584:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001588:	ee17 2a90 	vmov	r2, s15
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001590:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001594:	ee07 3a90 	vmov	s15, r3
 8001598:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800159c:	edd7 7a03 	vldr	s15, [r7, #12]
 80015a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a8:	ee17 2a90 	vmov	r2, s15
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	609a      	str	r2, [r3, #8]

  return IIS2MDC_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <IIS2MDC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_Write_Reg(IIS2MDC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	460b      	mov	r3, r1
 80015c4:	70fb      	strb	r3, [r7, #3]
 80015c6:	4613      	mov	r3, r2
 80015c8:	70bb      	strb	r3, [r7, #2]
  if (iis2mdc_write_reg(&(pObj->Ctx), Reg, &Data, 1) != IIS2MDC_OK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f103 001c 	add.w	r0, r3, #28
 80015d0:	1cba      	adds	r2, r7, #2
 80015d2:	78f9      	ldrb	r1, [r7, #3]
 80015d4:	2301      	movs	r3, #1
 80015d6:	f000 f885 	bl	80016e4 <iis2mdc_write_reg>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <IIS2MDC_Write_Reg+0x2c>
  {
    return IIS2MDC_ERROR;
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295
 80015e4:	e000      	b.n	80015e8 <IIS2MDC_Write_Reg+0x2e>
  }

  return IIS2MDC_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	461a      	mov	r2, r3
 80015fc:	460b      	mov	r3, r1
 80015fe:	72fb      	strb	r3, [r7, #11]
 8001600:	4613      	mov	r3, r2
 8001602:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10e      	bne.n	800162e <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	695c      	ldr	r4, [r3, #20]
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	7b1b      	ldrb	r3, [r3, #12]
 8001618:	b298      	uxth	r0, r3
 800161a:	7afb      	ldrb	r3, [r7, #11]
 800161c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001620:	b2db      	uxtb	r3, r3
 8001622:	b299      	uxth	r1, r3
 8001624:	893b      	ldrh	r3, [r7, #8]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	47a0      	blx	r4
 800162a:	4603      	mov	r3, r0
 800162c:	e00d      	b.n	800164a <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	695c      	ldr	r4, [r3, #20]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	7b1b      	ldrb	r3, [r3, #12]
 8001636:	b298      	uxth	r0, r3
 8001638:	7afb      	ldrb	r3, [r7, #11]
 800163a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800163e:	b2db      	uxtb	r3, r3
 8001640:	b299      	uxth	r1, r3
 8001642:	893b      	ldrh	r3, [r7, #8]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	47a0      	blx	r4
 8001648:	4603      	mov	r3, r0
  }
}
 800164a:	4618      	mov	r0, r3
 800164c:	371c      	adds	r7, #28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd90      	pop	{r4, r7, pc}

08001652 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001652:	b590      	push	{r4, r7, lr}
 8001654:	b087      	sub	sp, #28
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	461a      	mov	r2, r3
 800165e:	460b      	mov	r3, r1
 8001660:	72fb      	strb	r3, [r7, #11]
 8001662:	4613      	mov	r3, r2
 8001664:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10e      	bne.n	8001690 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	691c      	ldr	r4, [r3, #16]
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	7b1b      	ldrb	r3, [r3, #12]
 800167a:	b298      	uxth	r0, r3
 800167c:	7afb      	ldrb	r3, [r7, #11]
 800167e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001682:	b2db      	uxtb	r3, r3
 8001684:	b299      	uxth	r1, r3
 8001686:	893b      	ldrh	r3, [r7, #8]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	47a0      	blx	r4
 800168c:	4603      	mov	r3, r0
 800168e:	e00d      	b.n	80016ac <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	691c      	ldr	r4, [r3, #16]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	7b1b      	ldrb	r3, [r3, #12]
 8001698:	b298      	uxth	r0, r3
 800169a:	7afb      	ldrb	r3, [r7, #11]
 800169c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	b299      	uxth	r1, r3
 80016a4:	893b      	ldrh	r3, [r7, #8]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	47a0      	blx	r4
 80016aa:	4603      	mov	r3, r0
  }
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	371c      	adds	r7, #28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd90      	pop	{r4, r7, pc}

080016b4 <iis2mdc_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	461a      	mov	r2, r3
 80016c0:	460b      	mov	r3, r1
 80016c2:	72fb      	strb	r3, [r7, #11]
 80016c4:	4613      	mov	r3, r2
 80016c6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	685c      	ldr	r4, [r3, #4]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6898      	ldr	r0, [r3, #8]
 80016d0:	893b      	ldrh	r3, [r7, #8]
 80016d2:	7af9      	ldrb	r1, [r7, #11]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	47a0      	blx	r4
 80016d8:	6178      	str	r0, [r7, #20]
  return ret;
 80016da:	697b      	ldr	r3, [r7, #20]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	371c      	adds	r7, #28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd90      	pop	{r4, r7, pc}

080016e4 <iis2mdc_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	607a      	str	r2, [r7, #4]
 80016ee:	461a      	mov	r2, r3
 80016f0:	460b      	mov	r3, r1
 80016f2:	72fb      	strb	r3, [r7, #11]
 80016f4:	4613      	mov	r3, r2
 80016f6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681c      	ldr	r4, [r3, #0]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6898      	ldr	r0, [r3, #8]
 8001700:	893b      	ldrh	r3, [r7, #8]
 8001702:	7af9      	ldrb	r1, [r7, #11]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	47a0      	blx	r4
 8001708:	6178      	str	r0, [r7, #20]
  return ret;
 800170a:	697b      	ldr	r3, [r7, #20]
}
 800170c:	4618      	mov	r0, r3
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	bd90      	pop	{r4, r7, pc}

08001714 <iis2mdc_operating_mode_set>:
  * @param  val      change the values of md in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx, iis2mdc_md_t val)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t*) &reg, 1);
 8001720:	f107 0208 	add.w	r2, r7, #8
 8001724:	2301      	movs	r3, #1
 8001726:	2160      	movs	r1, #96	; 0x60
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ffc3 	bl	80016b4 <iis2mdc_read_reg>
 800172e:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10f      	bne.n	8001756 <iis2mdc_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	b2da      	uxtb	r2, r3
 800173e:	7a3b      	ldrb	r3, [r7, #8]
 8001740:	f362 0301 	bfi	r3, r2, #0, #2
 8001744:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t*) &reg, 1);
 8001746:	f107 0208 	add.w	r2, r7, #8
 800174a:	2301      	movs	r3, #1
 800174c:	2160      	movs	r1, #96	; 0x60
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ffc8 	bl	80016e4 <iis2mdc_write_reg>
 8001754:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001756:	68fb      	ldr	r3, [r7, #12]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t*) &reg, 1);
 800176c:	f107 0208 	add.w	r2, r7, #8
 8001770:	2301      	movs	r3, #1
 8001772:	2160      	movs	r1, #96	; 0x60
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff9d 	bl	80016b4 <iis2mdc_read_reg>
 800177a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10f      	bne.n	80017a2 <iis2mdc_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	b2da      	uxtb	r2, r3
 800178a:	7a3b      	ldrb	r3, [r7, #8]
 800178c:	f362 0383 	bfi	r3, r2, #2, #2
 8001790:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t*) &reg, 1);
 8001792:	f107 0208 	add.w	r2, r7, #8
 8001796:	2301      	movs	r3, #1
 8001798:	2160      	movs	r1, #96	; 0x60
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ffa2 	bl	80016e4 <iis2mdc_write_reg>
 80017a0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80017a2:	68fb      	ldr	r3, [r7, #12]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t*) &reg, 1);
 80017b8:	f107 0208 	add.w	r2, r7, #8
 80017bc:	2301      	movs	r3, #1
 80017be:	2162      	movs	r1, #98	; 0x62
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff77 	bl	80016b4 <iis2mdc_read_reg>
 80017c6:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10f      	bne.n	80017ee <iis2mdc_block_data_update_set+0x42>
    reg.bdu = val;
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	7a3b      	ldrb	r3, [r7, #8]
 80017d8:	f362 1304 	bfi	r3, r2, #4, #1
 80017dc:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t*) &reg, 1);
 80017de:	f107 0208 	add.w	r2, r7, #8
 80017e2:	2301      	movs	r3, #1
 80017e4:	2162      	movs	r1, #98	; 0x62
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff ff7c 	bl	80016e4 <iis2mdc_write_reg>
 80017ec:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80017ee:	68fb      	ldr	r3, [r7, #12]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 8001802:	f107 020c 	add.w	r2, r7, #12
 8001806:	2306      	movs	r3, #6
 8001808:	2168      	movs	r1, #104	; 0x68
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ff52 	bl	80016b4 <iis2mdc_read_reg>
 8001810:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001812:	7b7b      	ldrb	r3, [r7, #13]
 8001814:	b21a      	sxth	r2, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001820:	b29b      	uxth	r3, r3
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	b29a      	uxth	r2, r3
 8001826:	7b3b      	ldrb	r3, [r7, #12]
 8001828:	b29b      	uxth	r3, r3
 800182a:	4413      	add	r3, r2
 800182c:	b29b      	uxth	r3, r3
 800182e:	b21a      	sxth	r2, r3
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001834:	7bfa      	ldrb	r2, [r7, #15]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	3302      	adds	r3, #2
 800183a:	b212      	sxth	r2, r2
 800183c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	3302      	adds	r3, #2
 8001842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001846:	b29b      	uxth	r3, r3
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	b29a      	uxth	r2, r3
 800184c:	7bbb      	ldrb	r3, [r7, #14]
 800184e:	b29b      	uxth	r3, r3
 8001850:	4413      	add	r3, r2
 8001852:	b29a      	uxth	r2, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	3302      	adds	r3, #2
 8001858:	b212      	sxth	r2, r2
 800185a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800185c:	7c7a      	ldrb	r2, [r7, #17]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	3304      	adds	r3, #4
 8001862:	b212      	sxth	r2, r2
 8001864:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	3304      	adds	r3, #4
 800186a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800186e:	b29b      	uxth	r3, r3
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	b29a      	uxth	r2, r3
 8001874:	7c3b      	ldrb	r3, [r7, #16]
 8001876:	b29b      	uxth	r3, r3
 8001878:	4413      	add	r3, r2
 800187a:	b29a      	uxth	r2, r3
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	3304      	adds	r3, #4
 8001880:	b212      	sxth	r2, r2
 8001882:	801a      	strh	r2, [r3, #0]

  return ret;
 8001884:	697b      	ldr	r3, [r7, #20]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b084      	sub	sp, #16
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	460b      	mov	r3, r1
 8001898:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t*) &reg, 1);
 800189a:	f107 0208 	add.w	r2, r7, #8
 800189e:	2301      	movs	r3, #1
 80018a0:	2162      	movs	r1, #98	; 0x62
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ff06 	bl	80016b4 <iis2mdc_read_reg>
 80018a8:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10f      	bne.n	80018d0 <iis2mdc_self_test_set+0x42>
    reg.self_test = val;
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	7a3b      	ldrb	r3, [r7, #8]
 80018ba:	f362 0341 	bfi	r3, r2, #1, #1
 80018be:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t*) &reg, 1);
 80018c0:	f107 0208 	add.w	r2, r7, #8
 80018c4:	2301      	movs	r3, #1
 80018c6:	2162      	movs	r1, #98	; 0x62
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ff0b 	bl	80016e4 <iis2mdc_write_reg>
 80018ce:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80018d0:	68fb      	ldr	r3, [r7, #12]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <iis2mdc_i2c_interface_set>:
  * @param  val      change the values of i2c_dis in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx, iis2mdc_i2c_dis_t val)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b084      	sub	sp, #16
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	460b      	mov	r3, r1
 80018e4:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t*) &reg, 1);
 80018e6:	f107 0208 	add.w	r2, r7, #8
 80018ea:	2301      	movs	r3, #1
 80018ec:	2162      	movs	r1, #98	; 0x62
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff fee0 	bl	80016b4 <iis2mdc_read_reg>
 80018f4:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10f      	bne.n	800191c <iis2mdc_i2c_interface_set+0x42>
    reg.i2c_dis = (uint8_t)val;
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	b2da      	uxtb	r2, r3
 8001904:	7a3b      	ldrb	r3, [r7, #8]
 8001906:	f362 1345 	bfi	r3, r2, #5, #1
 800190a:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t*) &reg, 1);
 800190c:	f107 0208 	add.w	r2, r7, #8
 8001910:	2301      	movs	r3, #1
 8001912:	2162      	movs	r1, #98	; 0x62
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff fee5 	bl	80016e4 <iis2mdc_write_reg>
 800191a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800191c:	68fb      	ldr	r3, [r7, #12]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <BSP_I2C2_Init+0x70>)
 8001934:	4a19      	ldr	r2, [pc, #100]	; (800199c <BSP_I2C2_Init+0x74>)
 8001936:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8001938:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <BSP_I2C2_Init+0x78>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	4918      	ldr	r1, [pc, #96]	; (80019a0 <BSP_I2C2_Init+0x78>)
 8001940:	600a      	str	r2, [r1, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d122      	bne.n	800198c <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8001946:	4814      	ldr	r0, [pc, #80]	; (8001998 <BSP_I2C2_Init+0x70>)
 8001948:	f001 f82c 	bl	80029a4 <HAL_I2C_GetState>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d11c      	bne.n	800198c <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8001952:	4811      	ldr	r0, [pc, #68]	; (8001998 <BSP_I2C2_Init+0x70>)
 8001954:	f000 f8fe 	bl	8001b54 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d116      	bne.n	800198c <BSP_I2C2_Init+0x64>
	  {
    	/* Init the I2C */
    	if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 800195e:	480e      	ldr	r0, [pc, #56]	; (8001998 <BSP_I2C2_Init+0x70>)
 8001960:	f000 f8b4 	bl	8001acc <MX_I2C2_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <BSP_I2C2_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 800196a:	f06f 0307 	mvn.w	r3, #7
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	e00c      	b.n	800198c <BSP_I2C2_Init+0x64>
    	}
    	else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001972:	2100      	movs	r1, #0
 8001974:	4808      	ldr	r0, [pc, #32]	; (8001998 <BSP_I2C2_Init+0x70>)
 8001976:	f001 fa4b 	bl	8002e10 <HAL_I2CEx_ConfigAnalogFilter>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <BSP_I2C2_Init+0x60>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8001980:	f06f 0307 	mvn.w	r3, #7
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	e001      	b.n	800198c <BSP_I2C2_Init+0x64>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 8001988:	2300      	movs	r3, #0
 800198a:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800198c:	687b      	ldr	r3, [r7, #4]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	2000120c 	.word	0x2000120c
 800199c:	40005800 	.word	0x40005800
 80019a0:	20000284 	.word	0x20000284

080019a4 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 80019ae:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <BSP_I2C2_DeInit+0x48>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d014      	beq.n	80019e0 <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <BSP_I2C2_DeInit+0x48>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	4a0b      	ldr	r2, [pc, #44]	; (80019ec <BSP_I2C2_DeInit+0x48>)
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <BSP_I2C2_DeInit+0x48>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10b      	bne.n	80019e0 <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 80019c8:	4809      	ldr	r0, [pc, #36]	; (80019f0 <BSP_I2C2_DeInit+0x4c>)
 80019ca:	f000 f917 	bl	8001bfc <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 80019ce:	4808      	ldr	r0, [pc, #32]	; (80019f0 <BSP_I2C2_DeInit+0x4c>)
 80019d0:	f000 fd77 	bl	80024c2 <HAL_I2C_DeInit>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80019da:	f06f 0307 	mvn.w	r3, #7
 80019de:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80019e0:	687b      	ldr	r3, [r7, #4]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000284 	.word	0x20000284
 80019f0:	2000120c 	.word	0x2000120c

080019f4 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af04      	add	r7, sp, #16
 80019fa:	60ba      	str	r2, [r7, #8]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4603      	mov	r3, r0
 8001a00:	81fb      	strh	r3, [r7, #14]
 8001a02:	460b      	mov	r3, r1
 8001a04:	81bb      	strh	r3, [r7, #12]
 8001a06:	4613      	mov	r3, r2
 8001a08:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001a0e:	89ba      	ldrh	r2, [r7, #12]
 8001a10:	89f9      	ldrh	r1, [r7, #14]
 8001a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a16:	9302      	str	r3, [sp, #8]
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2301      	movs	r3, #1
 8001a22:	480c      	ldr	r0, [pc, #48]	; (8001a54 <BSP_I2C2_WriteReg+0x60>)
 8001a24:	f000 fd90 	bl	8002548 <HAL_I2C_Mem_Write>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00c      	beq.n	8001a48 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001a2e:	4809      	ldr	r0, [pc, #36]	; (8001a54 <BSP_I2C2_WriteReg+0x60>)
 8001a30:	f000 ffc6 	bl	80029c0 <HAL_I2C_GetError>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d103      	bne.n	8001a42 <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001a3a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	e002      	b.n	8001a48 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001a42:	f06f 0303 	mvn.w	r3, #3
 8001a46:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001a48:	697b      	ldr	r3, [r7, #20]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	2000120c 	.word	0x2000120c

08001a58 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af04      	add	r7, sp, #16
 8001a5e:	60ba      	str	r2, [r7, #8]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4603      	mov	r3, r0
 8001a64:	81fb      	strh	r3, [r7, #14]
 8001a66:	460b      	mov	r3, r1
 8001a68:	81bb      	strh	r3, [r7, #12]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001a72:	89ba      	ldrh	r2, [r7, #12]
 8001a74:	89f9      	ldrh	r1, [r7, #14]
 8001a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7a:	9302      	str	r3, [sp, #8]
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	9301      	str	r3, [sp, #4]
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	2301      	movs	r3, #1
 8001a86:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <BSP_I2C2_ReadReg+0x60>)
 8001a88:	f000 fe72 	bl	8002770 <HAL_I2C_Mem_Read>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00c      	beq.n	8001aac <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001a92:	4809      	ldr	r0, [pc, #36]	; (8001ab8 <BSP_I2C2_ReadReg+0x60>)
 8001a94:	f000 ff94 	bl	80029c0 <HAL_I2C_GetError>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d103      	bne.n	8001aa6 <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001a9e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	e002      	b.n	8001aac <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001aa6:	f06f 0303 	mvn.w	r3, #3
 8001aaa:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001aac:	697b      	ldr	r3, [r7, #20]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2000120c 	.word	0x2000120c

08001abc <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001ac0:	f000 f8e6 	bl	8001c90 <HAL_GetTick>
 8001ac4:	4603      	mov	r3, r0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C2;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <MX_I2C2_Init+0x80>)
 8001adc:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00909BEB;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a1b      	ldr	r2, [pc, #108]	; (8001b50 <MX_I2C2_Init+0x84>)
 8001ae2:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 fc48 	bl	80023a4 <HAL_I2C_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b1e:	2100      	movs	r1, #0
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f001 f975 	bl	8002e10 <HAL_I2CEx_ConfigAnalogFilter>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001b30:	2100      	movs	r1, #0
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f001 f9b7 	bl	8002ea6 <HAL_I2CEx_ConfigDigitalFilter>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40005800 	.word	0x40005800
 8001b50:	00909beb 	.word	0x00909beb

08001b54 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b5c:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <I2C2_MspInit+0xa0>)
 8001b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b60:	4a24      	ldr	r2, [pc, #144]	; (8001bf4 <I2C2_MspInit+0xa0>)
 8001b62:	f043 0320 	orr.w	r3, r3, #32
 8001b66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b68:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <I2C2_MspInit+0xa0>)
 8001b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6c:	f003 0320 	and.w	r3, r3, #32
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF2     ------> I2C2_SMBA
    PF1     ------> I2C2_SCL
    PF0     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SMBA_GPIO_PIN;
 8001b74:	2304      	movs	r3, #4
 8001b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b78:	2312      	movs	r3, #18
 8001b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SMBA_GPIO_AF;
 8001b84:	2304      	movs	r3, #4
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SMBA_GPIO_PORT, &GPIO_InitStruct);
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	481a      	ldr	r0, [pc, #104]	; (8001bf8 <I2C2_MspInit+0xa4>)
 8001b90:	f000 f96c 	bl	8001e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001b94:	2302      	movs	r3, #2
 8001b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b98:	2312      	movs	r3, #18
 8001b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	4619      	mov	r1, r3
 8001bae:	4812      	ldr	r0, [pc, #72]	; (8001bf8 <I2C2_MspInit+0xa4>)
 8001bb0:	f000 f95c 	bl	8001e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb8:	2312      	movs	r3, #18
 8001bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480a      	ldr	r0, [pc, #40]	; (8001bf8 <I2C2_MspInit+0xa4>)
 8001bd0:	f000 f94c 	bl	8001e6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bd4:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <I2C2_MspInit+0xa0>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd8:	4a06      	ldr	r2, [pc, #24]	; (8001bf4 <I2C2_MspInit+0xa0>)
 8001bda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bde:	6593      	str	r3, [r2, #88]	; 0x58
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <I2C2_MspInit+0xa0>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001bec:	bf00      	nop
 8001bee:	3728      	adds	r7, #40	; 0x28
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	48001400 	.word	0x48001400

08001bfc <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001c04:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <I2C2_MspDeInit+0x34>)
 8001c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c08:	4a09      	ldr	r2, [pc, #36]	; (8001c30 <I2C2_MspDeInit+0x34>)
 8001c0a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001c0e:	6593      	str	r3, [r2, #88]	; 0x58
    /**I2C2 GPIO Configuration
    PF2     ------> I2C2_SMBA
    PF1     ------> I2C2_SCL
    PF0     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SMBA_GPIO_PORT, BUS_I2C2_SMBA_GPIO_PIN);
 8001c10:	2104      	movs	r1, #4
 8001c12:	4808      	ldr	r0, [pc, #32]	; (8001c34 <I2C2_MspDeInit+0x38>)
 8001c14:	f000 fabc 	bl	8002190 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8001c18:	2102      	movs	r1, #2
 8001c1a:	4806      	ldr	r0, [pc, #24]	; (8001c34 <I2C2_MspDeInit+0x38>)
 8001c1c:	f000 fab8 	bl	8002190 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8001c20:	2101      	movs	r1, #1
 8001c22:	4804      	ldr	r0, [pc, #16]	; (8001c34 <I2C2_MspDeInit+0x38>)
 8001c24:	f000 fab4 	bl	8002190 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40021000 	.word	0x40021000
 8001c34:	48001400 	.word	0x48001400

08001c38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c42:	2003      	movs	r0, #3
 8001c44:	f000 f8dd 	bl	8001e02 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f7ff faaf 	bl	80011ac <HAL_InitTick>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	71fb      	strb	r3, [r7, #7]
 8001c58:	e001      	b.n	8001c5e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c5a:	f7ff f9d7 	bl	800100c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_IncTick+0x20>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_IncTick+0x24>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <HAL_IncTick+0x24>)
 8001c7a:	6013      	str	r3, [r2, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000008 	.word	0x20000008
 8001c8c:	20001258 	.word	0x20001258

08001c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return uwTick;
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <HAL_GetTick+0x14>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20001258 	.word	0x20001258

08001ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cda:	4a04      	ldr	r2, [pc, #16]	; (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	60d3      	str	r3, [r2, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	f003 0307 	and.w	r3, r3, #7
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	db0b      	blt.n	8001d36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	4907      	ldr	r1, [pc, #28]	; (8001d44 <__NVIC_EnableIRQ+0x38>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	; (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	; (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ff4c 	bl	8001ca8 <__NVIC_SetPriorityGrouping>
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e2a:	f7ff ff61 	bl	8001cf0 <__NVIC_GetPriorityGrouping>
 8001e2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	68b9      	ldr	r1, [r7, #8]
 8001e34:	6978      	ldr	r0, [r7, #20]
 8001e36:	f7ff ffb1 	bl	8001d9c <NVIC_EncodePriority>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e40:	4611      	mov	r1, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff ff80 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e48:	bf00      	nop
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ff54 	bl	8001d0c <__NVIC_EnableIRQ>
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7a:	e166      	b.n	800214a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2101      	movs	r1, #1
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 8158 	beq.w	8002144 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d00b      	beq.n	8001eb4 <HAL_GPIO_Init+0x48>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d007      	beq.n	8001eb4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ea8:	2b11      	cmp	r3, #17
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b12      	cmp	r3, #18
 8001eb2:	d130      	bne.n	8001f16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eea:	2201      	movs	r2, #1
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	091b      	lsrs	r3, r3, #4
 8001f00:	f003 0201 	and.w	r2, r3, #1
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	2203      	movs	r2, #3
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_Init+0xea>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b12      	cmp	r3, #18
 8001f54:	d123      	bne.n	8001f9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	08da      	lsrs	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3208      	adds	r2, #8
 8001f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	691a      	ldr	r2, [r3, #16]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	08da      	lsrs	r2, r3, #3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3208      	adds	r2, #8
 8001f98:	6939      	ldr	r1, [r7, #16]
 8001f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	2203      	movs	r2, #3
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0203 	and.w	r2, r3, #3
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 80b2 	beq.w	8002144 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe0:	4b61      	ldr	r3, [pc, #388]	; (8002168 <HAL_GPIO_Init+0x2fc>)
 8001fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe4:	4a60      	ldr	r2, [pc, #384]	; (8002168 <HAL_GPIO_Init+0x2fc>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6613      	str	r3, [r2, #96]	; 0x60
 8001fec:	4b5e      	ldr	r3, [pc, #376]	; (8002168 <HAL_GPIO_Init+0x2fc>)
 8001fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ff8:	4a5c      	ldr	r2, [pc, #368]	; (800216c <HAL_GPIO_Init+0x300>)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	3302      	adds	r3, #2
 8002000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002004:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	220f      	movs	r2, #15
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002022:	d02b      	beq.n	800207c <HAL_GPIO_Init+0x210>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a52      	ldr	r2, [pc, #328]	; (8002170 <HAL_GPIO_Init+0x304>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d025      	beq.n	8002078 <HAL_GPIO_Init+0x20c>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a51      	ldr	r2, [pc, #324]	; (8002174 <HAL_GPIO_Init+0x308>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d01f      	beq.n	8002074 <HAL_GPIO_Init+0x208>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a50      	ldr	r2, [pc, #320]	; (8002178 <HAL_GPIO_Init+0x30c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d019      	beq.n	8002070 <HAL_GPIO_Init+0x204>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a4f      	ldr	r2, [pc, #316]	; (800217c <HAL_GPIO_Init+0x310>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d013      	beq.n	800206c <HAL_GPIO_Init+0x200>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a4e      	ldr	r2, [pc, #312]	; (8002180 <HAL_GPIO_Init+0x314>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00d      	beq.n	8002068 <HAL_GPIO_Init+0x1fc>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a4d      	ldr	r2, [pc, #308]	; (8002184 <HAL_GPIO_Init+0x318>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d007      	beq.n	8002064 <HAL_GPIO_Init+0x1f8>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a4c      	ldr	r2, [pc, #304]	; (8002188 <HAL_GPIO_Init+0x31c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d101      	bne.n	8002060 <HAL_GPIO_Init+0x1f4>
 800205c:	2307      	movs	r3, #7
 800205e:	e00e      	b.n	800207e <HAL_GPIO_Init+0x212>
 8002060:	2308      	movs	r3, #8
 8002062:	e00c      	b.n	800207e <HAL_GPIO_Init+0x212>
 8002064:	2306      	movs	r3, #6
 8002066:	e00a      	b.n	800207e <HAL_GPIO_Init+0x212>
 8002068:	2305      	movs	r3, #5
 800206a:	e008      	b.n	800207e <HAL_GPIO_Init+0x212>
 800206c:	2304      	movs	r3, #4
 800206e:	e006      	b.n	800207e <HAL_GPIO_Init+0x212>
 8002070:	2303      	movs	r3, #3
 8002072:	e004      	b.n	800207e <HAL_GPIO_Init+0x212>
 8002074:	2302      	movs	r3, #2
 8002076:	e002      	b.n	800207e <HAL_GPIO_Init+0x212>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <HAL_GPIO_Init+0x212>
 800207c:	2300      	movs	r3, #0
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	f002 0203 	and.w	r2, r2, #3
 8002084:	0092      	lsls	r2, r2, #2
 8002086:	4093      	lsls	r3, r2
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800208e:	4937      	ldr	r1, [pc, #220]	; (800216c <HAL_GPIO_Init+0x300>)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	3302      	adds	r3, #2
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800209c:	4b3b      	ldr	r3, [pc, #236]	; (800218c <HAL_GPIO_Init+0x320>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4013      	ands	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020c0:	4a32      	ldr	r2, [pc, #200]	; (800218c <HAL_GPIO_Init+0x320>)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80020c6:	4b31      	ldr	r3, [pc, #196]	; (800218c <HAL_GPIO_Init+0x320>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020ea:	4a28      	ldr	r2, [pc, #160]	; (800218c <HAL_GPIO_Init+0x320>)
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020f0:	4b26      	ldr	r3, [pc, #152]	; (800218c <HAL_GPIO_Init+0x320>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002114:	4a1d      	ldr	r2, [pc, #116]	; (800218c <HAL_GPIO_Init+0x320>)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <HAL_GPIO_Init+0x320>)
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	43db      	mvns	r3, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4013      	ands	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800213e:	4a13      	ldr	r2, [pc, #76]	; (800218c <HAL_GPIO_Init+0x320>)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	3301      	adds	r3, #1
 8002148:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	fa22 f303 	lsr.w	r3, r2, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	f47f ae91 	bne.w	8001e7c <HAL_GPIO_Init+0x10>
  }
}
 800215a:	bf00      	nop
 800215c:	371c      	adds	r7, #28
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
 800216c:	40010000 	.word	0x40010000
 8002170:	48000400 	.word	0x48000400
 8002174:	48000800 	.word	0x48000800
 8002178:	48000c00 	.word	0x48000c00
 800217c:	48001000 	.word	0x48001000
 8002180:	48001400 	.word	0x48001400
 8002184:	48001800 	.word	0x48001800
 8002188:	48001c00 	.word	0x48001c00
 800218c:	40010400 	.word	0x40010400

08002190 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800219e:	e0c9      	b.n	8002334 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80021a0:	2201      	movs	r2, #1
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	4013      	ands	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 80bc 	beq.w	800232e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80021b6:	4a66      	ldr	r2, [pc, #408]	; (8002350 <HAL_GPIO_DeInit+0x1c0>)
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	3302      	adds	r3, #2
 80021be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	220f      	movs	r2, #15
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4013      	ands	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021de:	d02b      	beq.n	8002238 <HAL_GPIO_DeInit+0xa8>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a5c      	ldr	r2, [pc, #368]	; (8002354 <HAL_GPIO_DeInit+0x1c4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d025      	beq.n	8002234 <HAL_GPIO_DeInit+0xa4>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a5b      	ldr	r2, [pc, #364]	; (8002358 <HAL_GPIO_DeInit+0x1c8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d01f      	beq.n	8002230 <HAL_GPIO_DeInit+0xa0>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a5a      	ldr	r2, [pc, #360]	; (800235c <HAL_GPIO_DeInit+0x1cc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d019      	beq.n	800222c <HAL_GPIO_DeInit+0x9c>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a59      	ldr	r2, [pc, #356]	; (8002360 <HAL_GPIO_DeInit+0x1d0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d013      	beq.n	8002228 <HAL_GPIO_DeInit+0x98>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a58      	ldr	r2, [pc, #352]	; (8002364 <HAL_GPIO_DeInit+0x1d4>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d00d      	beq.n	8002224 <HAL_GPIO_DeInit+0x94>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a57      	ldr	r2, [pc, #348]	; (8002368 <HAL_GPIO_DeInit+0x1d8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d007      	beq.n	8002220 <HAL_GPIO_DeInit+0x90>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a56      	ldr	r2, [pc, #344]	; (800236c <HAL_GPIO_DeInit+0x1dc>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d101      	bne.n	800221c <HAL_GPIO_DeInit+0x8c>
 8002218:	2307      	movs	r3, #7
 800221a:	e00e      	b.n	800223a <HAL_GPIO_DeInit+0xaa>
 800221c:	2308      	movs	r3, #8
 800221e:	e00c      	b.n	800223a <HAL_GPIO_DeInit+0xaa>
 8002220:	2306      	movs	r3, #6
 8002222:	e00a      	b.n	800223a <HAL_GPIO_DeInit+0xaa>
 8002224:	2305      	movs	r3, #5
 8002226:	e008      	b.n	800223a <HAL_GPIO_DeInit+0xaa>
 8002228:	2304      	movs	r3, #4
 800222a:	e006      	b.n	800223a <HAL_GPIO_DeInit+0xaa>
 800222c:	2303      	movs	r3, #3
 800222e:	e004      	b.n	800223a <HAL_GPIO_DeInit+0xaa>
 8002230:	2302      	movs	r3, #2
 8002232:	e002      	b.n	800223a <HAL_GPIO_DeInit+0xaa>
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <HAL_GPIO_DeInit+0xaa>
 8002238:	2300      	movs	r3, #0
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	f002 0203 	and.w	r2, r2, #3
 8002240:	0092      	lsls	r2, r2, #2
 8002242:	4093      	lsls	r3, r2
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	429a      	cmp	r2, r3
 8002248:	d132      	bne.n	80022b0 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800224a:	4b49      	ldr	r3, [pc, #292]	; (8002370 <HAL_GPIO_DeInit+0x1e0>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	43db      	mvns	r3, r3
 8002252:	4947      	ldr	r1, [pc, #284]	; (8002370 <HAL_GPIO_DeInit+0x1e0>)
 8002254:	4013      	ands	r3, r2
 8002256:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002258:	4b45      	ldr	r3, [pc, #276]	; (8002370 <HAL_GPIO_DeInit+0x1e0>)
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	43db      	mvns	r3, r3
 8002260:	4943      	ldr	r1, [pc, #268]	; (8002370 <HAL_GPIO_DeInit+0x1e0>)
 8002262:	4013      	ands	r3, r2
 8002264:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002266:	4b42      	ldr	r3, [pc, #264]	; (8002370 <HAL_GPIO_DeInit+0x1e0>)
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	4940      	ldr	r1, [pc, #256]	; (8002370 <HAL_GPIO_DeInit+0x1e0>)
 8002270:	4013      	ands	r3, r2
 8002272:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8002274:	4b3e      	ldr	r3, [pc, #248]	; (8002370 <HAL_GPIO_DeInit+0x1e0>)
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	493c      	ldr	r1, [pc, #240]	; (8002370 <HAL_GPIO_DeInit+0x1e0>)
 800227e:	4013      	ands	r3, r2
 8002280:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	220f      	movs	r2, #15
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002292:	4a2f      	ldr	r2, [pc, #188]	; (8002350 <HAL_GPIO_DeInit+0x1c0>)
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	089b      	lsrs	r3, r3, #2
 8002298:	3302      	adds	r3, #2
 800229a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	43da      	mvns	r2, r3
 80022a2:	482b      	ldr	r0, [pc, #172]	; (8002350 <HAL_GPIO_DeInit+0x1c0>)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	400a      	ands	r2, r1
 80022aa:	3302      	adds	r3, #2
 80022ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	2103      	movs	r1, #3
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	08da      	lsrs	r2, r3, #3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3208      	adds	r2, #8
 80022cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	220f      	movs	r2, #15
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	08d2      	lsrs	r2, r2, #3
 80022e4:	4019      	ands	r1, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3208      	adds	r2, #8
 80022ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	2103      	movs	r1, #3
 80022f8:	fa01 f303 	lsl.w	r3, r1, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	401a      	ands	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	2101      	movs	r1, #1
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	401a      	ands	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	2103      	movs	r1, #3
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	401a      	ands	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	3301      	adds	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	fa22 f303 	lsr.w	r3, r2, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	f47f af2f 	bne.w	80021a0 <HAL_GPIO_DeInit+0x10>
  }
}
 8002342:	bf00      	nop
 8002344:	371c      	adds	r7, #28
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40010000 	.word	0x40010000
 8002354:	48000400 	.word	0x48000400
 8002358:	48000800 	.word	0x48000800
 800235c:	48000c00 	.word	0x48000c00
 8002360:	48001000 	.word	0x48001000
 8002364:	48001400 	.word	0x48001400
 8002368:	48001800 	.word	0x48001800
 800236c:	48001c00 	.word	0x48001c00
 8002370:	40010400 	.word	0x40010400

08002374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	807b      	strh	r3, [r7, #2]
 8002380:	4613      	mov	r3, r2
 8002382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002384:	787b      	ldrb	r3, [r7, #1]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002390:	e002      	b.n	8002398 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e081      	b.n	80024ba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f8a8 	bl	8002520 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2224      	movs	r2, #36	; 0x24
 80023d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0201 	bic.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002404:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d107      	bne.n	800241e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	e006      	b.n	800242c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800242a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d104      	bne.n	800243e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800243c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800244c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002450:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002460:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	ea42 0103 	orr.w	r1, r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	021a      	lsls	r2, r3, #8
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69d9      	ldr	r1, [r3, #28]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1a      	ldr	r2, [r3, #32]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2220      	movs	r2, #32
 80024a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e021      	b.n	8002518 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2224      	movs	r2, #36	; 0x24
 80024d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f821 	bl	8002534 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af02      	add	r7, sp, #8
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	4608      	mov	r0, r1
 8002552:	4611      	mov	r1, r2
 8002554:	461a      	mov	r2, r3
 8002556:	4603      	mov	r3, r0
 8002558:	817b      	strh	r3, [r7, #10]
 800255a:	460b      	mov	r3, r1
 800255c:	813b      	strh	r3, [r7, #8]
 800255e:	4613      	mov	r3, r2
 8002560:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b20      	cmp	r3, #32
 800256c:	f040 80f9 	bne.w	8002762 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <HAL_I2C_Mem_Write+0x34>
 8002576:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002578:	2b00      	cmp	r3, #0
 800257a:	d105      	bne.n	8002588 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002582:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0ed      	b.n	8002764 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_I2C_Mem_Write+0x4e>
 8002592:	2302      	movs	r3, #2
 8002594:	e0e6      	b.n	8002764 <HAL_I2C_Mem_Write+0x21c>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800259e:	f7ff fb77 	bl	8001c90 <HAL_GetTick>
 80025a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	2319      	movs	r3, #25
 80025aa:	2201      	movs	r2, #1
 80025ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 fadd 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0d1      	b.n	8002764 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2221      	movs	r2, #33	; 0x21
 80025c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2240      	movs	r2, #64	; 0x40
 80025cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a3a      	ldr	r2, [r7, #32]
 80025da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025e8:	88f8      	ldrh	r0, [r7, #6]
 80025ea:	893a      	ldrh	r2, [r7, #8]
 80025ec:	8979      	ldrh	r1, [r7, #10]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	9301      	str	r3, [sp, #4]
 80025f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	4603      	mov	r3, r0
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 f9ed 	bl	80029d8 <I2C_RequestMemoryWrite>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0a9      	b.n	8002764 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002614:	b29b      	uxth	r3, r3
 8002616:	2bff      	cmp	r3, #255	; 0xff
 8002618:	d90e      	bls.n	8002638 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	22ff      	movs	r2, #255	; 0xff
 800261e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002624:	b2da      	uxtb	r2, r3
 8002626:	8979      	ldrh	r1, [r7, #10]
 8002628:	2300      	movs	r3, #0
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 fbbf 	bl	8002db4 <I2C_TransferConfig>
 8002636:	e00f      	b.n	8002658 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002646:	b2da      	uxtb	r2, r3
 8002648:	8979      	ldrh	r1, [r7, #10]
 800264a:	2300      	movs	r3, #0
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 fbae 	bl	8002db4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 fac7 	bl	8002bf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e07b      	b.n	8002764 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	781a      	ldrb	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002686:	b29b      	uxth	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d034      	beq.n	8002710 <HAL_I2C_Mem_Write+0x1c8>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d130      	bne.n	8002710 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b4:	2200      	movs	r2, #0
 80026b6:	2180      	movs	r1, #128	; 0x80
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 fa59 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e04d      	b.n	8002764 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2bff      	cmp	r3, #255	; 0xff
 80026d0:	d90e      	bls.n	80026f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	22ff      	movs	r2, #255	; 0xff
 80026d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	8979      	ldrh	r1, [r7, #10]
 80026e0:	2300      	movs	r3, #0
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 fb63 	bl	8002db4 <I2C_TransferConfig>
 80026ee:	e00f      	b.n	8002710 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	8979      	ldrh	r1, [r7, #10]
 8002702:	2300      	movs	r3, #0
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 fb52 	bl	8002db4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002714:	b29b      	uxth	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d19e      	bne.n	8002658 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 faa6 	bl	8002c70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e01a      	b.n	8002764 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2220      	movs	r2, #32
 8002734:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4b0a      	ldr	r3, [pc, #40]	; (800276c <HAL_I2C_Mem_Write+0x224>)
 8002742:	400b      	ands	r3, r1
 8002744:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	e000      	b.n	8002764 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002762:	2302      	movs	r3, #2
  }
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	fe00e800 	.word	0xfe00e800

08002770 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af02      	add	r7, sp, #8
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	4608      	mov	r0, r1
 800277a:	4611      	mov	r1, r2
 800277c:	461a      	mov	r2, r3
 800277e:	4603      	mov	r3, r0
 8002780:	817b      	strh	r3, [r7, #10]
 8002782:	460b      	mov	r3, r1
 8002784:	813b      	strh	r3, [r7, #8]
 8002786:	4613      	mov	r3, r2
 8002788:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b20      	cmp	r3, #32
 8002794:	f040 80fd 	bne.w	8002992 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <HAL_I2C_Mem_Read+0x34>
 800279e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d105      	bne.n	80027b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0f1      	b.n	8002994 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_I2C_Mem_Read+0x4e>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e0ea      	b.n	8002994 <HAL_I2C_Mem_Read+0x224>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027c6:	f7ff fa63 	bl	8001c90 <HAL_GetTick>
 80027ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	2319      	movs	r3, #25
 80027d2:	2201      	movs	r2, #1
 80027d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f9c9 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0d5      	b.n	8002994 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2222      	movs	r2, #34	; 0x22
 80027ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2240      	movs	r2, #64	; 0x40
 80027f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a3a      	ldr	r2, [r7, #32]
 8002802:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002808:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002810:	88f8      	ldrh	r0, [r7, #6]
 8002812:	893a      	ldrh	r2, [r7, #8]
 8002814:	8979      	ldrh	r1, [r7, #10]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	9301      	str	r3, [sp, #4]
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	4603      	mov	r3, r0
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f92d 	bl	8002a80 <I2C_RequestMemoryRead>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0ad      	b.n	8002994 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	2bff      	cmp	r3, #255	; 0xff
 8002840:	d90e      	bls.n	8002860 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	22ff      	movs	r2, #255	; 0xff
 8002846:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284c:	b2da      	uxtb	r2, r3
 800284e:	8979      	ldrh	r1, [r7, #10]
 8002850:	4b52      	ldr	r3, [pc, #328]	; (800299c <HAL_I2C_Mem_Read+0x22c>)
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 faab 	bl	8002db4 <I2C_TransferConfig>
 800285e:	e00f      	b.n	8002880 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286e:	b2da      	uxtb	r2, r3
 8002870:	8979      	ldrh	r1, [r7, #10]
 8002872:	4b4a      	ldr	r3, [pc, #296]	; (800299c <HAL_I2C_Mem_Read+0x22c>)
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 fa9a 	bl	8002db4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002886:	2200      	movs	r2, #0
 8002888:	2104      	movs	r1, #4
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 f970 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e07c      	b.n	8002994 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d034      	beq.n	8002940 <HAL_I2C_Mem_Read+0x1d0>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d130      	bne.n	8002940 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e4:	2200      	movs	r2, #0
 80028e6:	2180      	movs	r1, #128	; 0x80
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 f941 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e04d      	b.n	8002994 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2bff      	cmp	r3, #255	; 0xff
 8002900:	d90e      	bls.n	8002920 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	22ff      	movs	r2, #255	; 0xff
 8002906:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290c:	b2da      	uxtb	r2, r3
 800290e:	8979      	ldrh	r1, [r7, #10]
 8002910:	2300      	movs	r3, #0
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 fa4b 	bl	8002db4 <I2C_TransferConfig>
 800291e:	e00f      	b.n	8002940 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292e:	b2da      	uxtb	r2, r3
 8002930:	8979      	ldrh	r1, [r7, #10]
 8002932:	2300      	movs	r3, #0
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 fa3a 	bl	8002db4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d19a      	bne.n	8002880 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 f98e 	bl	8002c70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e01a      	b.n	8002994 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2220      	movs	r2, #32
 8002964:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6859      	ldr	r1, [r3, #4]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_I2C_Mem_Read+0x230>)
 8002972:	400b      	ands	r3, r1
 8002974:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	e000      	b.n	8002994 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002992:	2302      	movs	r3, #2
  }
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	80002400 	.word	0x80002400
 80029a0:	fe00e800 	.word	0xfe00e800

080029a4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b2:	b2db      	uxtb	r3, r3
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af02      	add	r7, sp, #8
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	4608      	mov	r0, r1
 80029e2:	4611      	mov	r1, r2
 80029e4:	461a      	mov	r2, r3
 80029e6:	4603      	mov	r3, r0
 80029e8:	817b      	strh	r3, [r7, #10]
 80029ea:	460b      	mov	r3, r1
 80029ec:	813b      	strh	r3, [r7, #8]
 80029ee:	4613      	mov	r3, r2
 80029f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	8979      	ldrh	r1, [r7, #10]
 80029f8:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <I2C_RequestMemoryWrite+0xa4>)
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f9d7 	bl	8002db4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a06:	69fa      	ldr	r2, [r7, #28]
 8002a08:	69b9      	ldr	r1, [r7, #24]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f8f0 	bl	8002bf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e02c      	b.n	8002a74 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a20:	893b      	ldrh	r3, [r7, #8]
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	629a      	str	r2, [r3, #40]	; 0x28
 8002a2a:	e015      	b.n	8002a58 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a2c:	893b      	ldrh	r3, [r7, #8]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	69b9      	ldr	r1, [r7, #24]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f8d6 	bl	8002bf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e012      	b.n	8002a74 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a4e:	893b      	ldrh	r3, [r7, #8]
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2180      	movs	r1, #128	; 0x80
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f884 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	80002000 	.word	0x80002000

08002a80 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	4608      	mov	r0, r1
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4603      	mov	r3, r0
 8002a90:	817b      	strh	r3, [r7, #10]
 8002a92:	460b      	mov	r3, r1
 8002a94:	813b      	strh	r3, [r7, #8]
 8002a96:	4613      	mov	r3, r2
 8002a98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	8979      	ldrh	r1, [r7, #10]
 8002aa0:	4b20      	ldr	r3, [pc, #128]	; (8002b24 <I2C_RequestMemoryRead+0xa4>)
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f984 	bl	8002db4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	69b9      	ldr	r1, [r7, #24]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 f89d 	bl	8002bf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e02c      	b.n	8002b1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d105      	bne.n	8002ad2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ac6:	893b      	ldrh	r3, [r7, #8]
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	629a      	str	r2, [r3, #40]	; 0x28
 8002ad0:	e015      	b.n	8002afe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ad2:	893b      	ldrh	r3, [r7, #8]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ae0:	69fa      	ldr	r2, [r7, #28]
 8002ae2:	69b9      	ldr	r1, [r7, #24]
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f883 	bl	8002bf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e012      	b.n	8002b1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002af4:	893b      	ldrh	r3, [r7, #8]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	2200      	movs	r2, #0
 8002b06:	2140      	movs	r1, #64	; 0x40
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f831 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e000      	b.n	8002b1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	80002000 	.word	0x80002000

08002b28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d103      	bne.n	8002b46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2200      	movs	r2, #0
 8002b44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d007      	beq.n	8002b64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699a      	ldr	r2, [r3, #24]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0201 	orr.w	r2, r2, #1
 8002b62:	619a      	str	r2, [r3, #24]
  }
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b80:	e022      	b.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d01e      	beq.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8a:	f7ff f881 	bl	8001c90 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d302      	bcc.n	8002ba0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d113      	bne.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba4:	f043 0220 	orr.w	r2, r3, #32
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e00f      	b.n	8002be8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699a      	ldr	r2, [r3, #24]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d0cd      	beq.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bfc:	e02c      	b.n	8002c58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f870 	bl	8002ce8 <I2C_IsAcknowledgeFailed>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e02a      	b.n	8002c68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c18:	d01e      	beq.n	8002c58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c1a:	f7ff f839 	bl	8001c90 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d302      	bcc.n	8002c30 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d113      	bne.n	8002c58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c34:	f043 0220 	orr.w	r2, r3, #32
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e007      	b.n	8002c68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d1cb      	bne.n	8002bfe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c7c:	e028      	b.n	8002cd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68b9      	ldr	r1, [r7, #8]
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f830 	bl	8002ce8 <I2C_IsAcknowledgeFailed>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e026      	b.n	8002ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c92:	f7fe fffd 	bl	8001c90 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d302      	bcc.n	8002ca8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d113      	bne.n	8002cd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	f043 0220 	orr.w	r2, r3, #32
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e007      	b.n	8002ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	d1cf      	bne.n	8002c7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	2b10      	cmp	r3, #16
 8002d00:	d151      	bne.n	8002da6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d02:	e022      	b.n	8002d4a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0a:	d01e      	beq.n	8002d4a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0c:	f7fe ffc0 	bl	8001c90 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d302      	bcc.n	8002d22 <I2C_IsAcknowledgeFailed+0x3a>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d113      	bne.n	8002d4a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	f043 0220 	orr.w	r2, r3, #32
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e02e      	b.n	8002da8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d1d5      	bne.n	8002d04 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2210      	movs	r2, #16
 8002d5e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2220      	movs	r2, #32
 8002d66:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f7ff fedd 	bl	8002b28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6859      	ldr	r1, [r3, #4]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <I2C_IsAcknowledgeFailed+0xc8>)
 8002d7a:	400b      	ands	r3, r1
 8002d7c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	f043 0204 	orr.w	r2, r3, #4
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	fe00e800 	.word	0xfe00e800

08002db4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	817b      	strh	r3, [r7, #10]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	0d5b      	lsrs	r3, r3, #21
 8002dd0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002dd4:	4b0d      	ldr	r3, [pc, #52]	; (8002e0c <I2C_TransferConfig+0x58>)
 8002dd6:	430b      	orrs	r3, r1
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	ea02 0103 	and.w	r1, r2, r3
 8002dde:	897b      	ldrh	r3, [r7, #10]
 8002de0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002de4:	7a7b      	ldrb	r3, [r7, #9]
 8002de6:	041b      	lsls	r3, r3, #16
 8002de8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	431a      	orrs	r2, r3
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	431a      	orrs	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002dfe:	bf00      	nop
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	03ff63ff 	.word	0x03ff63ff

08002e10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	d138      	bne.n	8002e98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e032      	b.n	8002e9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2224      	movs	r2, #36	; 0x24
 8002e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6819      	ldr	r1, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	e000      	b.n	8002e9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e98:	2302      	movs	r3, #2
  }
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b085      	sub	sp, #20
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d139      	bne.n	8002f30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e033      	b.n	8002f32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2224      	movs	r2, #36	; 0x24
 8002ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0201 	bic.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ef8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	021b      	lsls	r3, r3, #8
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e000      	b.n	8002f32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f30:	2302      	movs	r3, #2
  }
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
	...

08002f40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f44:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f50:	d102      	bne.n	8002f58 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f56:	e00b      	b.n	8002f70 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002f58:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f66:	d102      	bne.n	8002f6e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f6c:	e000      	b.n	8002f70 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002f6e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40007000 	.word	0x40007000

08002f80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d141      	bne.n	8003012 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f8e:	4b4b      	ldr	r3, [pc, #300]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f9a:	d131      	bne.n	8003000 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f9c:	4b47      	ldr	r3, [pc, #284]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fa2:	4a46      	ldr	r2, [pc, #280]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fa8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fac:	4b43      	ldr	r3, [pc, #268]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fb4:	4a41      	ldr	r2, [pc, #260]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002fbc:	4b40      	ldr	r3, [pc, #256]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2232      	movs	r2, #50	; 0x32
 8002fc2:	fb02 f303 	mul.w	r3, r2, r3
 8002fc6:	4a3f      	ldr	r2, [pc, #252]	; (80030c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fcc:	0c9b      	lsrs	r3, r3, #18
 8002fce:	3301      	adds	r3, #1
 8002fd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fd2:	e002      	b.n	8002fda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fda:	4b38      	ldr	r3, [pc, #224]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe6:	d102      	bne.n	8002fee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f2      	bne.n	8002fd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fee:	4b33      	ldr	r3, [pc, #204]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ffa:	d158      	bne.n	80030ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e057      	b.n	80030b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003000:	4b2e      	ldr	r3, [pc, #184]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003006:	4a2d      	ldr	r2, [pc, #180]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800300c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003010:	e04d      	b.n	80030ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003018:	d141      	bne.n	800309e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800301a:	4b28      	ldr	r3, [pc, #160]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003026:	d131      	bne.n	800308c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003028:	4b24      	ldr	r3, [pc, #144]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800302e:	4a23      	ldr	r2, [pc, #140]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003034:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003038:	4b20      	ldr	r3, [pc, #128]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003040:	4a1e      	ldr	r2, [pc, #120]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003046:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003048:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2232      	movs	r2, #50	; 0x32
 800304e:	fb02 f303 	mul.w	r3, r2, r3
 8003052:	4a1c      	ldr	r2, [pc, #112]	; (80030c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003054:	fba2 2303 	umull	r2, r3, r2, r3
 8003058:	0c9b      	lsrs	r3, r3, #18
 800305a:	3301      	adds	r3, #1
 800305c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800305e:	e002      	b.n	8003066 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	3b01      	subs	r3, #1
 8003064:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003066:	4b15      	ldr	r3, [pc, #84]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003072:	d102      	bne.n	800307a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f2      	bne.n	8003060 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800307a:	4b10      	ldr	r3, [pc, #64]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003086:	d112      	bne.n	80030ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e011      	b.n	80030b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800308e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003092:	4a0a      	ldr	r2, [pc, #40]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003098:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800309c:	e007      	b.n	80030ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800309e:	4b07      	ldr	r3, [pc, #28]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030a6:	4a05      	ldr	r2, [pc, #20]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030ac:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	40007000 	.word	0x40007000
 80030c0:	20000000 	.word	0x20000000
 80030c4:	431bde83 	.word	0x431bde83

080030c8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80030d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030d6:	6053      	str	r3, [r2, #4]
}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40007000 	.word	0x40007000

080030e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d102      	bne.n	80030fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f000 bc16 	b.w	8003928 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030fc:	4ba0      	ldr	r3, [pc, #640]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003106:	4b9e      	ldr	r3, [pc, #632]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80e4 	beq.w	80032e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d007      	beq.n	8003134 <HAL_RCC_OscConfig+0x4c>
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2b0c      	cmp	r3, #12
 8003128:	f040 808b 	bne.w	8003242 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2b01      	cmp	r3, #1
 8003130:	f040 8087 	bne.w	8003242 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003134:	4b92      	ldr	r3, [pc, #584]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_RCC_OscConfig+0x64>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e3ed      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1a      	ldr	r2, [r3, #32]
 8003150:	4b8b      	ldr	r3, [pc, #556]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d004      	beq.n	8003166 <HAL_RCC_OscConfig+0x7e>
 800315c:	4b88      	ldr	r3, [pc, #544]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003164:	e005      	b.n	8003172 <HAL_RCC_OscConfig+0x8a>
 8003166:	4b86      	ldr	r3, [pc, #536]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800316c:	091b      	lsrs	r3, r3, #4
 800316e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003172:	4293      	cmp	r3, r2
 8003174:	d223      	bcs.n	80031be <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fdf8 	bl	8003d70 <RCC_SetFlashLatencyFromMSIRange>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e3ce      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800318a:	4b7d      	ldr	r3, [pc, #500]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a7c      	ldr	r2, [pc, #496]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003190:	f043 0308 	orr.w	r3, r3, #8
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	4b7a      	ldr	r3, [pc, #488]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	4977      	ldr	r1, [pc, #476]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031a8:	4b75      	ldr	r3, [pc, #468]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	4972      	ldr	r1, [pc, #456]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	604b      	str	r3, [r1, #4]
 80031bc:	e025      	b.n	800320a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031be:	4b70      	ldr	r3, [pc, #448]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a6f      	ldr	r2, [pc, #444]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80031c4:	f043 0308 	orr.w	r3, r3, #8
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	4b6d      	ldr	r3, [pc, #436]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	496a      	ldr	r1, [pc, #424]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031dc:	4b68      	ldr	r3, [pc, #416]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	021b      	lsls	r3, r3, #8
 80031ea:	4965      	ldr	r1, [pc, #404]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d109      	bne.n	800320a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fdb8 	bl	8003d70 <RCC_SetFlashLatencyFromMSIRange>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e38e      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800320a:	f000 fcbf 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 800320e:	4601      	mov	r1, r0
 8003210:	4b5b      	ldr	r3, [pc, #364]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	4a5a      	ldr	r2, [pc, #360]	; (8003384 <HAL_RCC_OscConfig+0x29c>)
 800321c:	5cd3      	ldrb	r3, [r2, r3]
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	fa21 f303 	lsr.w	r3, r1, r3
 8003226:	4a58      	ldr	r2, [pc, #352]	; (8003388 <HAL_RCC_OscConfig+0x2a0>)
 8003228:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800322a:	4b58      	ldr	r3, [pc, #352]	; (800338c <HAL_RCC_OscConfig+0x2a4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fd ffbc 	bl	80011ac <HAL_InitTick>
 8003234:	4603      	mov	r3, r0
 8003236:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d052      	beq.n	80032e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	e372      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d032      	beq.n	80032b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800324a:	4b4d      	ldr	r3, [pc, #308]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a4c      	ldr	r2, [pc, #304]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003256:	f7fe fd1b 	bl	8001c90 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800325e:	f7fe fd17 	bl	8001c90 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e35b      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003270:	4b43      	ldr	r3, [pc, #268]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800327c:	4b40      	ldr	r3, [pc, #256]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a3f      	ldr	r2, [pc, #252]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003282:	f043 0308 	orr.w	r3, r3, #8
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	4b3d      	ldr	r3, [pc, #244]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	493a      	ldr	r1, [pc, #232]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800329a:	4b39      	ldr	r3, [pc, #228]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	4935      	ldr	r1, [pc, #212]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	604b      	str	r3, [r1, #4]
 80032ae:	e01a      	b.n	80032e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032b0:	4b33      	ldr	r3, [pc, #204]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a32      	ldr	r2, [pc, #200]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032bc:	f7fe fce8 	bl	8001c90 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032c4:	f7fe fce4 	bl	8001c90 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e328      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032d6:	4b2a      	ldr	r3, [pc, #168]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x1dc>
 80032e2:	e000      	b.n	80032e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d073      	beq.n	80033da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_OscConfig+0x21c>
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b0c      	cmp	r3, #12
 80032fc:	d10e      	bne.n	800331c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2b03      	cmp	r3, #3
 8003302:	d10b      	bne.n	800331c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003304:	4b1e      	ldr	r3, [pc, #120]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d063      	beq.n	80033d8 <HAL_RCC_OscConfig+0x2f0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d15f      	bne.n	80033d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e305      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003324:	d106      	bne.n	8003334 <HAL_RCC_OscConfig+0x24c>
 8003326:	4b16      	ldr	r3, [pc, #88]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a15      	ldr	r2, [pc, #84]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e01d      	b.n	8003370 <HAL_RCC_OscConfig+0x288>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800333c:	d10c      	bne.n	8003358 <HAL_RCC_OscConfig+0x270>
 800333e:	4b10      	ldr	r3, [pc, #64]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a0f      	ldr	r2, [pc, #60]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a0c      	ldr	r2, [pc, #48]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e00b      	b.n	8003370 <HAL_RCC_OscConfig+0x288>
 8003358:	4b09      	ldr	r3, [pc, #36]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a08      	ldr	r2, [pc, #32]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 800335e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a05      	ldr	r2, [pc, #20]	; (8003380 <HAL_RCC_OscConfig+0x298>)
 800336a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d01b      	beq.n	80033b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fe fc8a 	bl	8001c90 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800337e:	e010      	b.n	80033a2 <HAL_RCC_OscConfig+0x2ba>
 8003380:	40021000 	.word	0x40021000
 8003384:	080089a8 	.word	0x080089a8
 8003388:	20000000 	.word	0x20000000
 800338c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003390:	f7fe fc7e 	bl	8001c90 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b64      	cmp	r3, #100	; 0x64
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e2c2      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033a2:	4baf      	ldr	r3, [pc, #700]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x2a8>
 80033ae:	e014      	b.n	80033da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b0:	f7fe fc6e 	bl	8001c90 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b8:	f7fe fc6a 	bl	8001c90 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b64      	cmp	r3, #100	; 0x64
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e2ae      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ca:	4ba5      	ldr	r3, [pc, #660]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x2d0>
 80033d6:	e000      	b.n	80033da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d060      	beq.n	80034a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d005      	beq.n	80033f8 <HAL_RCC_OscConfig+0x310>
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	d119      	bne.n	8003426 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d116      	bne.n	8003426 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033f8:	4b99      	ldr	r3, [pc, #612]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_OscConfig+0x328>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e28b      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003410:	4b93      	ldr	r3, [pc, #588]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	061b      	lsls	r3, r3, #24
 800341e:	4990      	ldr	r1, [pc, #576]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003420:	4313      	orrs	r3, r2
 8003422:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003424:	e040      	b.n	80034a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d023      	beq.n	8003476 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800342e:	4b8c      	ldr	r3, [pc, #560]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a8b      	ldr	r2, [pc, #556]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7fe fc29 	bl	8001c90 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003442:	f7fe fc25 	bl	8001c90 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e269      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003454:	4b82      	ldr	r3, [pc, #520]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003460:	4b7f      	ldr	r3, [pc, #508]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	061b      	lsls	r3, r3, #24
 800346e:	497c      	ldr	r1, [pc, #496]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003470:	4313      	orrs	r3, r2
 8003472:	604b      	str	r3, [r1, #4]
 8003474:	e018      	b.n	80034a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003476:	4b7a      	ldr	r3, [pc, #488]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a79      	ldr	r2, [pc, #484]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 800347c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003482:	f7fe fc05 	bl	8001c90 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800348a:	f7fe fc01 	bl	8001c90 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e245      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800349c:	4b70      	ldr	r3, [pc, #448]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f0      	bne.n	800348a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d03c      	beq.n	800352e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d01c      	beq.n	80034f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034bc:	4b68      	ldr	r3, [pc, #416]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80034be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034c2:	4a67      	ldr	r2, [pc, #412]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034cc:	f7fe fbe0 	bl	8001c90 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d4:	f7fe fbdc 	bl	8001c90 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e220      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034e6:	4b5e      	ldr	r3, [pc, #376]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80034e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0ef      	beq.n	80034d4 <HAL_RCC_OscConfig+0x3ec>
 80034f4:	e01b      	b.n	800352e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034f6:	4b5a      	ldr	r3, [pc, #360]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80034f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034fc:	4a58      	ldr	r2, [pc, #352]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80034fe:	f023 0301 	bic.w	r3, r3, #1
 8003502:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003506:	f7fe fbc3 	bl	8001c90 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800350e:	f7fe fbbf 	bl	8001c90 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e203      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003520:	4b4f      	ldr	r3, [pc, #316]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1ef      	bne.n	800350e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 80a6 	beq.w	8003688 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800353c:	2300      	movs	r3, #0
 800353e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003540:	4b47      	ldr	r3, [pc, #284]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10d      	bne.n	8003568 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800354c:	4b44      	ldr	r3, [pc, #272]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	4a43      	ldr	r2, [pc, #268]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003556:	6593      	str	r3, [r2, #88]	; 0x58
 8003558:	4b41      	ldr	r3, [pc, #260]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003564:	2301      	movs	r3, #1
 8003566:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003568:	4b3e      	ldr	r3, [pc, #248]	; (8003664 <HAL_RCC_OscConfig+0x57c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d118      	bne.n	80035a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003574:	4b3b      	ldr	r3, [pc, #236]	; (8003664 <HAL_RCC_OscConfig+0x57c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a3a      	ldr	r2, [pc, #232]	; (8003664 <HAL_RCC_OscConfig+0x57c>)
 800357a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003580:	f7fe fb86 	bl	8001c90 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003588:	f7fe fb82 	bl	8001c90 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e1c6      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800359a:	4b32      	ldr	r3, [pc, #200]	; (8003664 <HAL_RCC_OscConfig+0x57c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d108      	bne.n	80035c0 <HAL_RCC_OscConfig+0x4d8>
 80035ae:	4b2c      	ldr	r3, [pc, #176]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b4:	4a2a      	ldr	r2, [pc, #168]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035be:	e024      	b.n	800360a <HAL_RCC_OscConfig+0x522>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b05      	cmp	r3, #5
 80035c6:	d110      	bne.n	80035ea <HAL_RCC_OscConfig+0x502>
 80035c8:	4b25      	ldr	r3, [pc, #148]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ce:	4a24      	ldr	r2, [pc, #144]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035d0:	f043 0304 	orr.w	r3, r3, #4
 80035d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035d8:	4b21      	ldr	r3, [pc, #132]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035de:	4a20      	ldr	r2, [pc, #128]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035e8:	e00f      	b.n	800360a <HAL_RCC_OscConfig+0x522>
 80035ea:	4b1d      	ldr	r3, [pc, #116]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f0:	4a1b      	ldr	r2, [pc, #108]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035f2:	f023 0301 	bic.w	r3, r3, #1
 80035f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035fa:	4b19      	ldr	r3, [pc, #100]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 80035fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003600:	4a17      	ldr	r2, [pc, #92]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003602:	f023 0304 	bic.w	r3, r3, #4
 8003606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d016      	beq.n	8003640 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003612:	f7fe fb3d 	bl	8001c90 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003618:	e00a      	b.n	8003630 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361a:	f7fe fb39 	bl	8001c90 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	f241 3288 	movw	r2, #5000	; 0x1388
 8003628:	4293      	cmp	r3, r2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e17b      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_RCC_OscConfig+0x578>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0ed      	beq.n	800361a <HAL_RCC_OscConfig+0x532>
 800363e:	e01a      	b.n	8003676 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003640:	f7fe fb26 	bl	8001c90 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003646:	e00f      	b.n	8003668 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003648:	f7fe fb22 	bl	8001c90 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	f241 3288 	movw	r2, #5000	; 0x1388
 8003656:	4293      	cmp	r3, r2
 8003658:	d906      	bls.n	8003668 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e164      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
 800365e:	bf00      	nop
 8003660:	40021000 	.word	0x40021000
 8003664:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003668:	4ba8      	ldr	r3, [pc, #672]	; (800390c <HAL_RCC_OscConfig+0x824>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1e8      	bne.n	8003648 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003676:	7ffb      	ldrb	r3, [r7, #31]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d105      	bne.n	8003688 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800367c:	4ba3      	ldr	r3, [pc, #652]	; (800390c <HAL_RCC_OscConfig+0x824>)
 800367e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003680:	4aa2      	ldr	r2, [pc, #648]	; (800390c <HAL_RCC_OscConfig+0x824>)
 8003682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003686:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0320 	and.w	r3, r3, #32
 8003690:	2b00      	cmp	r3, #0
 8003692:	d03c      	beq.n	800370e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	2b00      	cmp	r3, #0
 800369a:	d01c      	beq.n	80036d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800369c:	4b9b      	ldr	r3, [pc, #620]	; (800390c <HAL_RCC_OscConfig+0x824>)
 800369e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036a2:	4a9a      	ldr	r2, [pc, #616]	; (800390c <HAL_RCC_OscConfig+0x824>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ac:	f7fe faf0 	bl	8001c90 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036b4:	f7fe faec 	bl	8001c90 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e130      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036c6:	4b91      	ldr	r3, [pc, #580]	; (800390c <HAL_RCC_OscConfig+0x824>)
 80036c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0ef      	beq.n	80036b4 <HAL_RCC_OscConfig+0x5cc>
 80036d4:	e01b      	b.n	800370e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036d6:	4b8d      	ldr	r3, [pc, #564]	; (800390c <HAL_RCC_OscConfig+0x824>)
 80036d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036dc:	4a8b      	ldr	r2, [pc, #556]	; (800390c <HAL_RCC_OscConfig+0x824>)
 80036de:	f023 0301 	bic.w	r3, r3, #1
 80036e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e6:	f7fe fad3 	bl	8001c90 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036ee:	f7fe facf 	bl	8001c90 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e113      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003700:	4b82      	ldr	r3, [pc, #520]	; (800390c <HAL_RCC_OscConfig+0x824>)
 8003702:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1ef      	bne.n	80036ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 8107 	beq.w	8003926 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	2b02      	cmp	r3, #2
 800371e:	f040 80cb 	bne.w	80038b8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003722:	4b7a      	ldr	r3, [pc, #488]	; (800390c <HAL_RCC_OscConfig+0x824>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f003 0203 	and.w	r2, r3, #3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	429a      	cmp	r2, r3
 8003734:	d12c      	bne.n	8003790 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	3b01      	subs	r3, #1
 8003742:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003744:	429a      	cmp	r2, r3
 8003746:	d123      	bne.n	8003790 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003752:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003754:	429a      	cmp	r2, r3
 8003756:	d11b      	bne.n	8003790 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003762:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003764:	429a      	cmp	r2, r3
 8003766:	d113      	bne.n	8003790 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003772:	085b      	lsrs	r3, r3, #1
 8003774:	3b01      	subs	r3, #1
 8003776:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d109      	bne.n	8003790 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	085b      	lsrs	r3, r3, #1
 8003788:	3b01      	subs	r3, #1
 800378a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800378c:	429a      	cmp	r2, r3
 800378e:	d06d      	beq.n	800386c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	2b0c      	cmp	r3, #12
 8003794:	d068      	beq.n	8003868 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003796:	4b5d      	ldr	r3, [pc, #372]	; (800390c <HAL_RCC_OscConfig+0x824>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d105      	bne.n	80037ae <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80037a2:	4b5a      	ldr	r3, [pc, #360]	; (800390c <HAL_RCC_OscConfig+0x824>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e0ba      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037b2:	4b56      	ldr	r3, [pc, #344]	; (800390c <HAL_RCC_OscConfig+0x824>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a55      	ldr	r2, [pc, #340]	; (800390c <HAL_RCC_OscConfig+0x824>)
 80037b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037be:	f7fe fa67 	bl	8001c90 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c6:	f7fe fa63 	bl	8001c90 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e0a7      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d8:	4b4c      	ldr	r3, [pc, #304]	; (800390c <HAL_RCC_OscConfig+0x824>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f0      	bne.n	80037c6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037e4:	4b49      	ldr	r3, [pc, #292]	; (800390c <HAL_RCC_OscConfig+0x824>)
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	4b49      	ldr	r3, [pc, #292]	; (8003910 <HAL_RCC_OscConfig+0x828>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037f4:	3a01      	subs	r2, #1
 80037f6:	0112      	lsls	r2, r2, #4
 80037f8:	4311      	orrs	r1, r2
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037fe:	0212      	lsls	r2, r2, #8
 8003800:	4311      	orrs	r1, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003806:	0852      	lsrs	r2, r2, #1
 8003808:	3a01      	subs	r2, #1
 800380a:	0552      	lsls	r2, r2, #21
 800380c:	4311      	orrs	r1, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003812:	0852      	lsrs	r2, r2, #1
 8003814:	3a01      	subs	r2, #1
 8003816:	0652      	lsls	r2, r2, #25
 8003818:	4311      	orrs	r1, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800381e:	06d2      	lsls	r2, r2, #27
 8003820:	430a      	orrs	r2, r1
 8003822:	493a      	ldr	r1, [pc, #232]	; (800390c <HAL_RCC_OscConfig+0x824>)
 8003824:	4313      	orrs	r3, r2
 8003826:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003828:	4b38      	ldr	r3, [pc, #224]	; (800390c <HAL_RCC_OscConfig+0x824>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a37      	ldr	r2, [pc, #220]	; (800390c <HAL_RCC_OscConfig+0x824>)
 800382e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003832:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003834:	4b35      	ldr	r3, [pc, #212]	; (800390c <HAL_RCC_OscConfig+0x824>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	4a34      	ldr	r2, [pc, #208]	; (800390c <HAL_RCC_OscConfig+0x824>)
 800383a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800383e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003840:	f7fe fa26 	bl	8001c90 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003848:	f7fe fa22 	bl	8001c90 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e066      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800385a:	4b2c      	ldr	r3, [pc, #176]	; (800390c <HAL_RCC_OscConfig+0x824>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003866:	e05e      	b.n	8003926 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e05d      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800386c:	4b27      	ldr	r3, [pc, #156]	; (800390c <HAL_RCC_OscConfig+0x824>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d156      	bne.n	8003926 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003878:	4b24      	ldr	r3, [pc, #144]	; (800390c <HAL_RCC_OscConfig+0x824>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a23      	ldr	r2, [pc, #140]	; (800390c <HAL_RCC_OscConfig+0x824>)
 800387e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003882:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003884:	4b21      	ldr	r3, [pc, #132]	; (800390c <HAL_RCC_OscConfig+0x824>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4a20      	ldr	r2, [pc, #128]	; (800390c <HAL_RCC_OscConfig+0x824>)
 800388a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800388e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003890:	f7fe f9fe 	bl	8001c90 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003898:	f7fe f9fa 	bl	8001c90 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e03e      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038aa:	4b18      	ldr	r3, [pc, #96]	; (800390c <HAL_RCC_OscConfig+0x824>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0x7b0>
 80038b6:	e036      	b.n	8003926 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	2b0c      	cmp	r3, #12
 80038bc:	d031      	beq.n	8003922 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038be:	4b13      	ldr	r3, [pc, #76]	; (800390c <HAL_RCC_OscConfig+0x824>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a12      	ldr	r2, [pc, #72]	; (800390c <HAL_RCC_OscConfig+0x824>)
 80038c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038c8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80038ca:	4b10      	ldr	r3, [pc, #64]	; (800390c <HAL_RCC_OscConfig+0x824>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d105      	bne.n	80038e2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80038d6:	4b0d      	ldr	r3, [pc, #52]	; (800390c <HAL_RCC_OscConfig+0x824>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	4a0c      	ldr	r2, [pc, #48]	; (800390c <HAL_RCC_OscConfig+0x824>)
 80038dc:	f023 0303 	bic.w	r3, r3, #3
 80038e0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <HAL_RCC_OscConfig+0x824>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	4a09      	ldr	r2, [pc, #36]	; (800390c <HAL_RCC_OscConfig+0x824>)
 80038e8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f2:	f7fe f9cd 	bl	8001c90 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f8:	e00c      	b.n	8003914 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fa:	f7fe f9c9 	bl	8001c90 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d905      	bls.n	8003914 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e00d      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
 800390c:	40021000 	.word	0x40021000
 8003910:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003914:	4b06      	ldr	r3, [pc, #24]	; (8003930 <HAL_RCC_OscConfig+0x848>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1ec      	bne.n	80038fa <HAL_RCC_OscConfig+0x812>
 8003920:	e001      	b.n	8003926 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3720      	adds	r7, #32
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40021000 	.word	0x40021000

08003934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e10f      	b.n	8003b6c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800394c:	4b89      	ldr	r3, [pc, #548]	; (8003b74 <HAL_RCC_ClockConfig+0x240>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	429a      	cmp	r2, r3
 8003958:	d910      	bls.n	800397c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395a:	4b86      	ldr	r3, [pc, #536]	; (8003b74 <HAL_RCC_ClockConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 020f 	bic.w	r2, r3, #15
 8003962:	4984      	ldr	r1, [pc, #528]	; (8003b74 <HAL_RCC_ClockConfig+0x240>)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	4313      	orrs	r3, r2
 8003968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396a:	4b82      	ldr	r3, [pc, #520]	; (8003b74 <HAL_RCC_ClockConfig+0x240>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d001      	beq.n	800397c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0f7      	b.n	8003b6c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 8089 	beq.w	8003a9c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b03      	cmp	r3, #3
 8003990:	d133      	bne.n	80039fa <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003992:	4b79      	ldr	r3, [pc, #484]	; (8003b78 <HAL_RCC_ClockConfig+0x244>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e0e4      	b.n	8003b6c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80039a2:	f000 fa3f 	bl	8003e24 <RCC_GetSysClockFreqFromPLLSource>
 80039a6:	4602      	mov	r2, r0
 80039a8:	4b74      	ldr	r3, [pc, #464]	; (8003b7c <HAL_RCC_ClockConfig+0x248>)
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d955      	bls.n	8003a5a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80039ae:	4b72      	ldr	r3, [pc, #456]	; (8003b78 <HAL_RCC_ClockConfig+0x244>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10a      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039ba:	4b6f      	ldr	r3, [pc, #444]	; (8003b78 <HAL_RCC_ClockConfig+0x244>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039c2:	4a6d      	ldr	r2, [pc, #436]	; (8003b78 <HAL_RCC_ClockConfig+0x244>)
 80039c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039ca:	2380      	movs	r3, #128	; 0x80
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	e044      	b.n	8003a5a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d03e      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x126>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d13a      	bne.n	8003a5a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039e4:	4b64      	ldr	r3, [pc, #400]	; (8003b78 <HAL_RCC_ClockConfig+0x244>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ec:	4a62      	ldr	r2, [pc, #392]	; (8003b78 <HAL_RCC_ClockConfig+0x244>)
 80039ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039f4:	2380      	movs	r3, #128	; 0x80
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	e02f      	b.n	8003a5a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d107      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a02:	4b5d      	ldr	r3, [pc, #372]	; (8003b78 <HAL_RCC_ClockConfig+0x244>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d115      	bne.n	8003a3a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e0ac      	b.n	8003b6c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d107      	bne.n	8003a2a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a1a:	4b57      	ldr	r3, [pc, #348]	; (8003b78 <HAL_RCC_ClockConfig+0x244>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e0a0      	b.n	8003b6c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a2a:	4b53      	ldr	r3, [pc, #332]	; (8003b78 <HAL_RCC_ClockConfig+0x244>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e098      	b.n	8003b6c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003a3a:	f000 f8a7 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	4b4e      	ldr	r3, [pc, #312]	; (8003b7c <HAL_RCC_ClockConfig+0x248>)
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d909      	bls.n	8003a5a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a46:	4b4c      	ldr	r3, [pc, #304]	; (8003b78 <HAL_RCC_ClockConfig+0x244>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a4e:	4a4a      	ldr	r2, [pc, #296]	; (8003b78 <HAL_RCC_ClockConfig+0x244>)
 8003a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a56:	2380      	movs	r3, #128	; 0x80
 8003a58:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a5a:	4b47      	ldr	r3, [pc, #284]	; (8003b78 <HAL_RCC_ClockConfig+0x244>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f023 0203 	bic.w	r2, r3, #3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	4944      	ldr	r1, [pc, #272]	; (8003b78 <HAL_RCC_ClockConfig+0x244>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a6c:	f7fe f910 	bl	8001c90 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a72:	e00a      	b.n	8003a8a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a74:	f7fe f90c 	bl	8001c90 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e070      	b.n	8003b6c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8a:	4b3b      	ldr	r3, [pc, #236]	; (8003b78 <HAL_RCC_ClockConfig+0x244>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 020c 	and.w	r2, r3, #12
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d1eb      	bne.n	8003a74 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d009      	beq.n	8003abc <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aa8:	4b33      	ldr	r3, [pc, #204]	; (8003b78 <HAL_RCC_ClockConfig+0x244>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4930      	ldr	r1, [pc, #192]	; (8003b78 <HAL_RCC_ClockConfig+0x244>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]
 8003aba:	e008      	b.n	8003ace <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	2b80      	cmp	r3, #128	; 0x80
 8003ac0:	d105      	bne.n	8003ace <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003ac2:	4b2d      	ldr	r3, [pc, #180]	; (8003b78 <HAL_RCC_ClockConfig+0x244>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	4a2c      	ldr	r2, [pc, #176]	; (8003b78 <HAL_RCC_ClockConfig+0x244>)
 8003ac8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003acc:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ace:	4b29      	ldr	r3, [pc, #164]	; (8003b74 <HAL_RCC_ClockConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d210      	bcs.n	8003afe <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003adc:	4b25      	ldr	r3, [pc, #148]	; (8003b74 <HAL_RCC_ClockConfig+0x240>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f023 020f 	bic.w	r2, r3, #15
 8003ae4:	4923      	ldr	r1, [pc, #140]	; (8003b74 <HAL_RCC_ClockConfig+0x240>)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aec:	4b21      	ldr	r3, [pc, #132]	; (8003b74 <HAL_RCC_ClockConfig+0x240>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d001      	beq.n	8003afe <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e036      	b.n	8003b6c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d008      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b0a:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <HAL_RCC_ClockConfig+0x244>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	4918      	ldr	r1, [pc, #96]	; (8003b78 <HAL_RCC_ClockConfig+0x244>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d009      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b28:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <HAL_RCC_ClockConfig+0x244>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	4910      	ldr	r1, [pc, #64]	; (8003b78 <HAL_RCC_ClockConfig+0x244>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b3c:	f000 f826 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 8003b40:	4601      	mov	r1, r0
 8003b42:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <HAL_RCC_ClockConfig+0x244>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	091b      	lsrs	r3, r3, #4
 8003b48:	f003 030f 	and.w	r3, r3, #15
 8003b4c:	4a0c      	ldr	r2, [pc, #48]	; (8003b80 <HAL_RCC_ClockConfig+0x24c>)
 8003b4e:	5cd3      	ldrb	r3, [r2, r3]
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	fa21 f303 	lsr.w	r3, r1, r3
 8003b58:	4a0a      	ldr	r2, [pc, #40]	; (8003b84 <HAL_RCC_ClockConfig+0x250>)
 8003b5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <HAL_RCC_ClockConfig+0x254>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fd fb23 	bl	80011ac <HAL_InitTick>
 8003b66:	4603      	mov	r3, r0
 8003b68:	73fb      	strb	r3, [r7, #15]

  return status;
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40022000 	.word	0x40022000
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	04c4b400 	.word	0x04c4b400
 8003b80:	080089a8 	.word	0x080089a8
 8003b84:	20000000 	.word	0x20000000
 8003b88:	20000004 	.word	0x20000004

08003b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b089      	sub	sp, #36	; 0x24
 8003b90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61fb      	str	r3, [r7, #28]
 8003b96:	2300      	movs	r3, #0
 8003b98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b9a:	4b3d      	ldr	r3, [pc, #244]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ba4:	4b3a      	ldr	r3, [pc, #232]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2b0c      	cmp	r3, #12
 8003bb8:	d121      	bne.n	8003bfe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d11e      	bne.n	8003bfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bc0:	4b33      	ldr	r3, [pc, #204]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0308 	and.w	r3, r3, #8
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d107      	bne.n	8003bdc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bcc:	4b30      	ldr	r3, [pc, #192]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd2:	0a1b      	lsrs	r3, r3, #8
 8003bd4:	f003 030f 	and.w	r3, r3, #15
 8003bd8:	61fb      	str	r3, [r7, #28]
 8003bda:	e005      	b.n	8003be8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bdc:	4b2c      	ldr	r3, [pc, #176]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	091b      	lsrs	r3, r3, #4
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003be8:	4a2a      	ldr	r2, [pc, #168]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10d      	bne.n	8003c14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bfc:	e00a      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d102      	bne.n	8003c0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c04:	4b24      	ldr	r3, [pc, #144]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c06:	61bb      	str	r3, [r7, #24]
 8003c08:	e004      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d101      	bne.n	8003c14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c10:	4b21      	ldr	r3, [pc, #132]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	2b0c      	cmp	r3, #12
 8003c18:	d133      	bne.n	8003c82 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c1a:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d002      	beq.n	8003c30 <HAL_RCC_GetSysClockFreq+0xa4>
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d003      	beq.n	8003c36 <HAL_RCC_GetSysClockFreq+0xaa>
 8003c2e:	e005      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c30:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c32:	617b      	str	r3, [r7, #20]
      break;
 8003c34:	e005      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c36:	4b18      	ldr	r3, [pc, #96]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c38:	617b      	str	r3, [r7, #20]
      break;
 8003c3a:	e002      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	617b      	str	r3, [r7, #20]
      break;
 8003c40:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c42:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	091b      	lsrs	r3, r3, #4
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c50:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	fb02 f203 	mul.w	r2, r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c66:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c68:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	0e5b      	lsrs	r3, r3, #25
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	3301      	adds	r3, #1
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c80:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c82:	69bb      	ldr	r3, [r7, #24]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3724      	adds	r7, #36	; 0x24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	40021000 	.word	0x40021000
 8003c94:	080089c0 	.word	0x080089c0
 8003c98:	00f42400 	.word	0x00f42400

08003c9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ca0:	4b03      	ldr	r3, [pc, #12]	; (8003cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	20000000 	.word	0x20000000

08003cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cb8:	f7ff fff0 	bl	8003c9c <HAL_RCC_GetHCLKFreq>
 8003cbc:	4601      	mov	r1, r0
 8003cbe:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	0a1b      	lsrs	r3, r3, #8
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cca:	5cd3      	ldrb	r3, [r2, r3]
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	080089b8 	.word	0x080089b8

08003ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ce4:	f7ff ffda 	bl	8003c9c <HAL_RCC_GetHCLKFreq>
 8003ce8:	4601      	mov	r1, r0
 8003cea:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	0adb      	lsrs	r3, r3, #11
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	4a04      	ldr	r2, [pc, #16]	; (8003d08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cf6:	5cd3      	ldrb	r3, [r2, r3]
 8003cf8:	f003 031f 	and.w	r3, r3, #31
 8003cfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40021000 	.word	0x40021000
 8003d08:	080089b8 	.word	0x080089b8

08003d0c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	220f      	movs	r2, #15
 8003d1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003d1c:	4b12      	ldr	r3, [pc, #72]	; (8003d68 <HAL_RCC_GetClockConfig+0x5c>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 0203 	and.w	r2, r3, #3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003d28:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <HAL_RCC_GetClockConfig+0x5c>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003d34:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <HAL_RCC_GetClockConfig+0x5c>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003d40:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <HAL_RCC_GetClockConfig+0x5c>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	08db      	lsrs	r3, r3, #3
 8003d46:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003d4e:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <HAL_RCC_GetClockConfig+0x60>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 020f 	and.w	r2, r3, #15
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	601a      	str	r2, [r3, #0]
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40022000 	.word	0x40022000

08003d70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d78:	2300      	movs	r3, #0
 8003d7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d7c:	4b27      	ldr	r3, [pc, #156]	; (8003e1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d88:	f7ff f8da 	bl	8002f40 <HAL_PWREx_GetVoltageRange>
 8003d8c:	6178      	str	r0, [r7, #20]
 8003d8e:	e014      	b.n	8003dba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d90:	4b22      	ldr	r3, [pc, #136]	; (8003e1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d94:	4a21      	ldr	r2, [pc, #132]	; (8003e1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d9c:	4b1f      	ldr	r3, [pc, #124]	; (8003e1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003da8:	f7ff f8ca 	bl	8002f40 <HAL_PWREx_GetVoltageRange>
 8003dac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003dae:	4b1b      	ldr	r3, [pc, #108]	; (8003e1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db2:	4a1a      	ldr	r2, [pc, #104]	; (8003e1c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003db8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc0:	d10b      	bne.n	8003dda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b80      	cmp	r3, #128	; 0x80
 8003dc6:	d913      	bls.n	8003df0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2ba0      	cmp	r3, #160	; 0xa0
 8003dcc:	d902      	bls.n	8003dd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003dce:	2302      	movs	r3, #2
 8003dd0:	613b      	str	r3, [r7, #16]
 8003dd2:	e00d      	b.n	8003df0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	e00a      	b.n	8003df0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b7f      	cmp	r3, #127	; 0x7f
 8003dde:	d902      	bls.n	8003de6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003de0:	2302      	movs	r3, #2
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	e004      	b.n	8003df0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b70      	cmp	r3, #112	; 0x70
 8003dea:	d101      	bne.n	8003df0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dec:	2301      	movs	r3, #1
 8003dee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003df0:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f023 020f 	bic.w	r2, r3, #15
 8003df8:	4909      	ldr	r1, [pc, #36]	; (8003e20 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e00:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d001      	beq.n	8003e12 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	40022000 	.word	0x40022000

08003e24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003e2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ee4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d118      	bne.n	8003e6c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e3a:	4b2a      	ldr	r3, [pc, #168]	; (8003ee4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d107      	bne.n	8003e56 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e46:	4b27      	ldr	r3, [pc, #156]	; (8003ee4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e4c:	0a1b      	lsrs	r3, r3, #8
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	e005      	b.n	8003e62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e56:	4b23      	ldr	r3, [pc, #140]	; (8003ee4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	091b      	lsrs	r3, r3, #4
 8003e5c:	f003 030f 	and.w	r3, r3, #15
 8003e60:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e62:	4a21      	ldr	r2, [pc, #132]	; (8003ee8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ee4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0303 	and.w	r3, r3, #3
 8003e74:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d002      	beq.n	8003e82 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d003      	beq.n	8003e88 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003e80:	e005      	b.n	8003e8e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003e82:	4b1a      	ldr	r3, [pc, #104]	; (8003eec <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003e84:	613b      	str	r3, [r7, #16]
    break;
 8003e86:	e005      	b.n	8003e94 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003e88:	4b18      	ldr	r3, [pc, #96]	; (8003eec <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003e8a:	613b      	str	r3, [r7, #16]
    break;
 8003e8c:	e002      	b.n	8003e94 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	613b      	str	r3, [r7, #16]
    break;
 8003e92:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e94:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	091b      	lsrs	r3, r3, #4
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ea2:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	0a1b      	lsrs	r3, r3, #8
 8003ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	fb02 f203 	mul.w	r2, r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb8:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003eba:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	0e5b      	lsrs	r3, r3, #25
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed2:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003ed4:	683b      	ldr	r3, [r7, #0]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	371c      	adds	r7, #28
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	080089c0 	.word	0x080089c0
 8003eec:	00f42400 	.word	0x00f42400

08003ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ef8:	2300      	movs	r3, #0
 8003efa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003efc:	2300      	movs	r3, #0
 8003efe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d03d      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f10:	2b40      	cmp	r3, #64	; 0x40
 8003f12:	d00b      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003f14:	2b40      	cmp	r3, #64	; 0x40
 8003f16:	d804      	bhi.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00e      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d015      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003f20:	e01d      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003f22:	2b60      	cmp	r3, #96	; 0x60
 8003f24:	d01e      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f26:	2b80      	cmp	r3, #128	; 0x80
 8003f28:	d01c      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f2a:	e018      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f2c:	4b86      	ldr	r3, [pc, #536]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	4a85      	ldr	r2, [pc, #532]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f36:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f38:	e015      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	2100      	movs	r1, #0
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fb5d 	bl	8004600 <RCCEx_PLLSAI1_Config>
 8003f46:	4603      	mov	r3, r0
 8003f48:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f4a:	e00c      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3320      	adds	r3, #32
 8003f50:	2100      	movs	r1, #0
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fc44 	bl	80047e0 <RCCEx_PLLSAI2_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f5c:	e003      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	74fb      	strb	r3, [r7, #19]
      break;
 8003f62:	e000      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f66:	7cfb      	ldrb	r3, [r7, #19]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10b      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f6c:	4b76      	ldr	r3, [pc, #472]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f72:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f7a:	4973      	ldr	r1, [pc, #460]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003f82:	e001      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f84:	7cfb      	ldrb	r3, [r7, #19]
 8003f86:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d042      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f9c:	d00f      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa2:	d805      	bhi.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d011      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fac:	d017      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003fae:	e01f      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003fb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fb4:	d01f      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fba:	d01c      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fbc:	e018      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fbe:	4b62      	ldr	r3, [pc, #392]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	4a61      	ldr	r2, [pc, #388]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fca:	e015      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fb14 	bl	8004600 <RCCEx_PLLSAI1_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fdc:	e00c      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3320      	adds	r3, #32
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 fbfb 	bl	80047e0 <RCCEx_PLLSAI2_Config>
 8003fea:	4603      	mov	r3, r0
 8003fec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fee:	e003      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	74fb      	strb	r3, [r7, #19]
      break;
 8003ff4:	e000      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003ff6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ff8:	7cfb      	ldrb	r3, [r7, #19]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10b      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ffe:	4b52      	ldr	r3, [pc, #328]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004000:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400c:	494e      	ldr	r1, [pc, #312]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004014:	e001      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004016:	7cfb      	ldrb	r3, [r7, #19]
 8004018:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 809f 	beq.w	8004166 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004028:	2300      	movs	r3, #0
 800402a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800402c:	4b46      	ldr	r3, [pc, #280]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800402e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800403c:	2300      	movs	r3, #0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00d      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004042:	4b41      	ldr	r3, [pc, #260]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004046:	4a40      	ldr	r2, [pc, #256]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800404c:	6593      	str	r3, [r2, #88]	; 0x58
 800404e:	4b3e      	ldr	r3, [pc, #248]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004056:	60bb      	str	r3, [r7, #8]
 8004058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800405a:	2301      	movs	r3, #1
 800405c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800405e:	4b3b      	ldr	r3, [pc, #236]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a3a      	ldr	r2, [pc, #232]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004068:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800406a:	f7fd fe11 	bl	8001c90 <HAL_GetTick>
 800406e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004070:	e009      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004072:	f7fd fe0d 	bl	8001c90 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d902      	bls.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	74fb      	strb	r3, [r7, #19]
        break;
 8004084:	e005      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004086:	4b31      	ldr	r3, [pc, #196]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0ef      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8004092:	7cfb      	ldrb	r3, [r7, #19]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d15b      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004098:	4b2b      	ldr	r3, [pc, #172]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d01f      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d019      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040b6:	4b24      	ldr	r3, [pc, #144]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040c2:	4b21      	ldr	r3, [pc, #132]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c8:	4a1f      	ldr	r2, [pc, #124]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040d2:	4b1d      	ldr	r3, [pc, #116]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d8:	4a1b      	ldr	r2, [pc, #108]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040e2:	4a19      	ldr	r2, [pc, #100]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d016      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f4:	f7fd fdcc 	bl	8001c90 <HAL_GetTick>
 80040f8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040fa:	e00b      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040fc:	f7fd fdc8 	bl	8001c90 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	f241 3288 	movw	r2, #5000	; 0x1388
 800410a:	4293      	cmp	r3, r2
 800410c:	d902      	bls.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	74fb      	strb	r3, [r7, #19]
            break;
 8004112:	e006      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004114:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0ec      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8004122:	7cfb      	ldrb	r3, [r7, #19]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10c      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004128:	4b07      	ldr	r3, [pc, #28]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004138:	4903      	ldr	r1, [pc, #12]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004140:	e008      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004142:	7cfb      	ldrb	r3, [r7, #19]
 8004144:	74bb      	strb	r3, [r7, #18]
 8004146:	e005      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004148:	40021000 	.word	0x40021000
 800414c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004150:	7cfb      	ldrb	r3, [r7, #19]
 8004152:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004154:	7c7b      	ldrb	r3, [r7, #17]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d105      	bne.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415a:	4ba0      	ldr	r3, [pc, #640]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415e:	4a9f      	ldr	r2, [pc, #636]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004164:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004172:	4b9a      	ldr	r3, [pc, #616]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004178:	f023 0203 	bic.w	r2, r3, #3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004180:	4996      	ldr	r1, [pc, #600]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004194:	4b91      	ldr	r3, [pc, #580]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	f023 020c 	bic.w	r2, r3, #12
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	498e      	ldr	r1, [pc, #568]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041b6:	4b89      	ldr	r3, [pc, #548]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c4:	4985      	ldr	r1, [pc, #532]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041d8:	4b80      	ldr	r3, [pc, #512]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e6:	497d      	ldr	r1, [pc, #500]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0310 	and.w	r3, r3, #16
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041fa:	4b78      	ldr	r3, [pc, #480]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004200:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004208:	4974      	ldr	r1, [pc, #464]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0320 	and.w	r3, r3, #32
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800421c:	4b6f      	ldr	r3, [pc, #444]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422a:	496c      	ldr	r1, [pc, #432]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800423e:	4b67      	ldr	r3, [pc, #412]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800424c:	4963      	ldr	r1, [pc, #396]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004260:	4b5e      	ldr	r3, [pc, #376]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800426e:	495b      	ldr	r1, [pc, #364]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004282:	4b56      	ldr	r3, [pc, #344]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004288:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004290:	4952      	ldr	r1, [pc, #328]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042a4:	4b4d      	ldr	r3, [pc, #308]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b2:	494a      	ldr	r1, [pc, #296]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042c6:	4b45      	ldr	r3, [pc, #276]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d4:	4941      	ldr	r1, [pc, #260]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042e8:	4b3c      	ldr	r3, [pc, #240]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042ee:	f023 0203 	bic.w	r2, r3, #3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f6:	4939      	ldr	r1, [pc, #228]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d028      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800430a:	4b34      	ldr	r3, [pc, #208]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800430c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004310:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004318:	4930      	ldr	r1, [pc, #192]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004324:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004328:	d106      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800432a:	4b2c      	ldr	r3, [pc, #176]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	4a2b      	ldr	r2, [pc, #172]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004330:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004334:	60d3      	str	r3, [r2, #12]
 8004336:	e011      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800433c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004340:	d10c      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3304      	adds	r3, #4
 8004346:	2101      	movs	r1, #1
 8004348:	4618      	mov	r0, r3
 800434a:	f000 f959 	bl	8004600 <RCCEx_PLLSAI1_Config>
 800434e:	4603      	mov	r3, r0
 8004350:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004352:	7cfb      	ldrb	r3, [r7, #19]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8004358:	7cfb      	ldrb	r3, [r7, #19]
 800435a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d04d      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800436c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004370:	d108      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004372:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004374:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004378:	4a18      	ldr	r2, [pc, #96]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800437e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004382:	e012      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004384:	4b15      	ldr	r3, [pc, #84]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004386:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800438a:	4a14      	ldr	r2, [pc, #80]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004390:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004394:	4b11      	ldr	r3, [pc, #68]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043a2:	490e      	ldr	r1, [pc, #56]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043b2:	d106      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043b4:	4b09      	ldr	r3, [pc, #36]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4a08      	ldr	r2, [pc, #32]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043be:	60d3      	str	r3, [r2, #12]
 80043c0:	e020      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043ca:	d109      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043cc:	4b03      	ldr	r3, [pc, #12]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	4a02      	ldr	r2, [pc, #8]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d6:	60d3      	str	r3, [r2, #12]
 80043d8:	e014      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80043da:	bf00      	nop
 80043dc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043e8:	d10c      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3304      	adds	r3, #4
 80043ee:	2101      	movs	r1, #1
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 f905 	bl	8004600 <RCCEx_PLLSAI1_Config>
 80043f6:	4603      	mov	r3, r0
 80043f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043fa:	7cfb      	ldrb	r3, [r7, #19]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004400:	7cfb      	ldrb	r3, [r7, #19]
 8004402:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d028      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004410:	4b7a      	ldr	r3, [pc, #488]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004416:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800441e:	4977      	ldr	r1, [pc, #476]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800442a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800442e:	d106      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004430:	4b72      	ldr	r3, [pc, #456]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4a71      	ldr	r2, [pc, #452]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800443a:	60d3      	str	r3, [r2, #12]
 800443c:	e011      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004442:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004446:	d10c      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3304      	adds	r3, #4
 800444c:	2101      	movs	r1, #1
 800444e:	4618      	mov	r0, r3
 8004450:	f000 f8d6 	bl	8004600 <RCCEx_PLLSAI1_Config>
 8004454:	4603      	mov	r3, r0
 8004456:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004458:	7cfb      	ldrb	r3, [r7, #19]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 800445e:	7cfb      	ldrb	r3, [r7, #19]
 8004460:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d01e      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800446e:	4b63      	ldr	r3, [pc, #396]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004474:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800447e:	495f      	ldr	r1, [pc, #380]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800448c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004490:	d10c      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3304      	adds	r3, #4
 8004496:	2102      	movs	r1, #2
 8004498:	4618      	mov	r0, r3
 800449a:	f000 f8b1 	bl	8004600 <RCCEx_PLLSAI1_Config>
 800449e:	4603      	mov	r3, r0
 80044a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044a2:	7cfb      	ldrb	r3, [r7, #19]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80044a8:	7cfb      	ldrb	r3, [r7, #19]
 80044aa:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00b      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044b8:	4b50      	ldr	r3, [pc, #320]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80044ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044be:	f023 0204 	bic.w	r2, r3, #4
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c8:	494c      	ldr	r1, [pc, #304]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00b      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80044dc:	4b47      	ldr	r3, [pc, #284]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80044de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044e2:	f023 0218 	bic.w	r2, r3, #24
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ec:	4943      	ldr	r1, [pc, #268]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d035      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004500:	4b3e      	ldr	r3, [pc, #248]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a3d      	ldr	r2, [pc, #244]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800450a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800450c:	f7fd fbc0 	bl	8001c90 <HAL_GetTick>
 8004510:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004512:	e009      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004514:	f7fd fbbc 	bl	8001c90 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d902      	bls.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x638>
      {
        ret = HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	74fb      	strb	r3, [r7, #19]
        break;
 8004526:	e005      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x644>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004528:	4b34      	ldr	r3, [pc, #208]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1ef      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x624>
      }
    }

    if(ret == HAL_OK)
 8004534:	7cfb      	ldrb	r3, [r7, #19]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d113      	bne.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x672>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800453a:	4b30      	ldr	r3, [pc, #192]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800453c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004540:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800454a:	492c      	ldr	r1, [pc, #176]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3320      	adds	r3, #32
 8004556:	2102      	movs	r1, #2
 8004558:	4618      	mov	r0, r3
 800455a:	f000 f941 	bl	80047e0 <RCCEx_PLLSAI2_Config>
 800455e:	4603      	mov	r3, r0
 8004560:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8004562:	7cfb      	ldrb	r3, [r7, #19]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* set overall return value */
      status = ret;
 8004568:	7cfb      	ldrb	r3, [r7, #19]
 800456a:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d01e      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004578:	4b20      	ldr	r3, [pc, #128]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800457a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800457e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004588:	491c      	ldr	r1, [pc, #112]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459a:	d10c      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3320      	adds	r3, #32
 80045a0:	2101      	movs	r1, #1
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 f91c 	bl	80047e0 <RCCEx_PLLSAI2_Config>
 80045a8:	4603      	mov	r3, r0
 80045aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045ac:	7cfb      	ldrb	r3, [r7, #19]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      {
        /* set overall return value */
        status = ret;
 80045b2:	7cfb      	ldrb	r3, [r7, #19]
 80045b4:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d017      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80045c2:	4b0e      	ldr	r3, [pc, #56]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80045c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d2:	490a      	ldr	r1, [pc, #40]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045e4:	d105      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045e6:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	4a04      	ldr	r2, [pc, #16]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80045ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045f0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40021000 	.word	0x40021000

08004600 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800460e:	4b70      	ldr	r3, [pc, #448]	; (80047d0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00e      	beq.n	8004638 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800461a:	4b6d      	ldr	r3, [pc, #436]	; (80047d0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f003 0203 	and.w	r2, r3, #3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d103      	bne.n	8004632 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
       ||
 800462e:	2b00      	cmp	r3, #0
 8004630:	d13f      	bne.n	80046b2 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	73fb      	strb	r3, [r7, #15]
 8004636:	e03c      	b.n	80046b2 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d00c      	beq.n	800465a <RCCEx_PLLSAI1_Config+0x5a>
 8004640:	2b03      	cmp	r3, #3
 8004642:	d013      	beq.n	800466c <RCCEx_PLLSAI1_Config+0x6c>
 8004644:	2b01      	cmp	r3, #1
 8004646:	d120      	bne.n	800468a <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004648:	4b61      	ldr	r3, [pc, #388]	; (80047d0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d11d      	bne.n	8004690 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004658:	e01a      	b.n	8004690 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800465a:	4b5d      	ldr	r3, [pc, #372]	; (80047d0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004662:	2b00      	cmp	r3, #0
 8004664:	d116      	bne.n	8004694 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800466a:	e013      	b.n	8004694 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800466c:	4b58      	ldr	r3, [pc, #352]	; (80047d0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10f      	bne.n	8004698 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004678:	4b55      	ldr	r3, [pc, #340]	; (80047d0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d109      	bne.n	8004698 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004688:	e006      	b.n	8004698 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	73fb      	strb	r3, [r7, #15]
      break;
 800468e:	e004      	b.n	800469a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004690:	bf00      	nop
 8004692:	e002      	b.n	800469a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004694:	bf00      	nop
 8004696:	e000      	b.n	800469a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004698:	bf00      	nop
    }

    if(status == HAL_OK)
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d108      	bne.n	80046b2 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80046a0:	4b4b      	ldr	r3, [pc, #300]	; (80047d0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f023 0203 	bic.w	r2, r3, #3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4948      	ldr	r1, [pc, #288]	; (80047d0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f040 8086 	bne.w	80047c6 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046ba:	4b45      	ldr	r3, [pc, #276]	; (80047d0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a44      	ldr	r2, [pc, #272]	; (80047d0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80046c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c6:	f7fd fae3 	bl	8001c90 <HAL_GetTick>
 80046ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046cc:	e009      	b.n	80046e2 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046ce:	f7fd fadf 	bl	8001c90 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d902      	bls.n	80046e2 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	73fb      	strb	r3, [r7, #15]
        break;
 80046e0:	e005      	b.n	80046ee <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046e2:	4b3b      	ldr	r3, [pc, #236]	; (80047d0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1ef      	bne.n	80046ce <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d168      	bne.n	80047c6 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d113      	bne.n	8004722 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046fa:	4b35      	ldr	r3, [pc, #212]	; (80047d0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80046fc:	691a      	ldr	r2, [r3, #16]
 80046fe:	4b35      	ldr	r3, [pc, #212]	; (80047d4 <RCCEx_PLLSAI1_Config+0x1d4>)
 8004700:	4013      	ands	r3, r2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6892      	ldr	r2, [r2, #8]
 8004706:	0211      	lsls	r1, r2, #8
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	68d2      	ldr	r2, [r2, #12]
 800470c:	06d2      	lsls	r2, r2, #27
 800470e:	4311      	orrs	r1, r2
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6852      	ldr	r2, [r2, #4]
 8004714:	3a01      	subs	r2, #1
 8004716:	0112      	lsls	r2, r2, #4
 8004718:	430a      	orrs	r2, r1
 800471a:	492d      	ldr	r1, [pc, #180]	; (80047d0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800471c:	4313      	orrs	r3, r2
 800471e:	610b      	str	r3, [r1, #16]
 8004720:	e02d      	b.n	800477e <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d115      	bne.n	8004754 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004728:	4b29      	ldr	r3, [pc, #164]	; (80047d0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800472a:	691a      	ldr	r2, [r3, #16]
 800472c:	4b2a      	ldr	r3, [pc, #168]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800472e:	4013      	ands	r3, r2
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6892      	ldr	r2, [r2, #8]
 8004734:	0211      	lsls	r1, r2, #8
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6912      	ldr	r2, [r2, #16]
 800473a:	0852      	lsrs	r2, r2, #1
 800473c:	3a01      	subs	r2, #1
 800473e:	0552      	lsls	r2, r2, #21
 8004740:	4311      	orrs	r1, r2
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6852      	ldr	r2, [r2, #4]
 8004746:	3a01      	subs	r2, #1
 8004748:	0112      	lsls	r2, r2, #4
 800474a:	430a      	orrs	r2, r1
 800474c:	4920      	ldr	r1, [pc, #128]	; (80047d0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800474e:	4313      	orrs	r3, r2
 8004750:	610b      	str	r3, [r1, #16]
 8004752:	e014      	b.n	800477e <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004754:	4b1e      	ldr	r3, [pc, #120]	; (80047d0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	4b20      	ldr	r3, [pc, #128]	; (80047dc <RCCEx_PLLSAI1_Config+0x1dc>)
 800475a:	4013      	ands	r3, r2
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6892      	ldr	r2, [r2, #8]
 8004760:	0211      	lsls	r1, r2, #8
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6952      	ldr	r2, [r2, #20]
 8004766:	0852      	lsrs	r2, r2, #1
 8004768:	3a01      	subs	r2, #1
 800476a:	0652      	lsls	r2, r2, #25
 800476c:	4311      	orrs	r1, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6852      	ldr	r2, [r2, #4]
 8004772:	3a01      	subs	r2, #1
 8004774:	0112      	lsls	r2, r2, #4
 8004776:	430a      	orrs	r2, r1
 8004778:	4915      	ldr	r1, [pc, #84]	; (80047d0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800477a:	4313      	orrs	r3, r2
 800477c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800477e:	4b14      	ldr	r3, [pc, #80]	; (80047d0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a13      	ldr	r2, [pc, #76]	; (80047d0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004784:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004788:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478a:	f7fd fa81 	bl	8001c90 <HAL_GetTick>
 800478e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004790:	e009      	b.n	80047a6 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004792:	f7fd fa7d 	bl	8001c90 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d902      	bls.n	80047a6 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	73fb      	strb	r3, [r7, #15]
          break;
 80047a4:	e005      	b.n	80047b2 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047a6:	4b0a      	ldr	r3, [pc, #40]	; (80047d0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0ef      	beq.n	8004792 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d106      	bne.n	80047c6 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047b8:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	4903      	ldr	r1, [pc, #12]	; (80047d0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40021000 	.word	0x40021000
 80047d4:	07ff800f 	.word	0x07ff800f
 80047d8:	ff9f800f 	.word	0xff9f800f
 80047dc:	f9ff800f 	.word	0xf9ff800f

080047e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047ee:	4b70      	ldr	r3, [pc, #448]	; (80049b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00e      	beq.n	8004818 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047fa:	4b6d      	ldr	r3, [pc, #436]	; (80049b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f003 0203 	and.w	r2, r3, #3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d103      	bne.n	8004812 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
       ||
 800480e:	2b00      	cmp	r3, #0
 8004810:	d13f      	bne.n	8004892 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	73fb      	strb	r3, [r7, #15]
 8004816:	e03c      	b.n	8004892 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d00c      	beq.n	800483a <RCCEx_PLLSAI2_Config+0x5a>
 8004820:	2b03      	cmp	r3, #3
 8004822:	d013      	beq.n	800484c <RCCEx_PLLSAI2_Config+0x6c>
 8004824:	2b01      	cmp	r3, #1
 8004826:	d120      	bne.n	800486a <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004828:	4b61      	ldr	r3, [pc, #388]	; (80049b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d11d      	bne.n	8004870 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004838:	e01a      	b.n	8004870 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800483a:	4b5d      	ldr	r3, [pc, #372]	; (80049b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004842:	2b00      	cmp	r3, #0
 8004844:	d116      	bne.n	8004874 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800484a:	e013      	b.n	8004874 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800484c:	4b58      	ldr	r3, [pc, #352]	; (80049b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10f      	bne.n	8004878 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004858:	4b55      	ldr	r3, [pc, #340]	; (80049b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d109      	bne.n	8004878 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004868:	e006      	b.n	8004878 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
      break;
 800486e:	e004      	b.n	800487a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004870:	bf00      	nop
 8004872:	e002      	b.n	800487a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004874:	bf00      	nop
 8004876:	e000      	b.n	800487a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004878:	bf00      	nop
    }

    if(status == HAL_OK)
 800487a:	7bfb      	ldrb	r3, [r7, #15]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d108      	bne.n	8004892 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004880:	4b4b      	ldr	r3, [pc, #300]	; (80049b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f023 0203 	bic.w	r2, r3, #3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4948      	ldr	r1, [pc, #288]	; (80049b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800488e:	4313      	orrs	r3, r2
 8004890:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	2b00      	cmp	r3, #0
 8004896:	f040 8086 	bne.w	80049a6 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800489a:	4b45      	ldr	r3, [pc, #276]	; (80049b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a44      	ldr	r2, [pc, #272]	; (80049b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80048a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a6:	f7fd f9f3 	bl	8001c90 <HAL_GetTick>
 80048aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048ac:	e009      	b.n	80048c2 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048ae:	f7fd f9ef 	bl	8001c90 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d902      	bls.n	80048c2 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	73fb      	strb	r3, [r7, #15]
        break;
 80048c0:	e005      	b.n	80048ce <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048c2:	4b3b      	ldr	r3, [pc, #236]	; (80049b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1ef      	bne.n	80048ae <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d168      	bne.n	80049a6 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d113      	bne.n	8004902 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048da:	4b35      	ldr	r3, [pc, #212]	; (80049b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80048dc:	695a      	ldr	r2, [r3, #20]
 80048de:	4b35      	ldr	r3, [pc, #212]	; (80049b4 <RCCEx_PLLSAI2_Config+0x1d4>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6892      	ldr	r2, [r2, #8]
 80048e6:	0211      	lsls	r1, r2, #8
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	68d2      	ldr	r2, [r2, #12]
 80048ec:	06d2      	lsls	r2, r2, #27
 80048ee:	4311      	orrs	r1, r2
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6852      	ldr	r2, [r2, #4]
 80048f4:	3a01      	subs	r2, #1
 80048f6:	0112      	lsls	r2, r2, #4
 80048f8:	430a      	orrs	r2, r1
 80048fa:	492d      	ldr	r1, [pc, #180]	; (80049b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	614b      	str	r3, [r1, #20]
 8004900:	e02d      	b.n	800495e <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d115      	bne.n	8004934 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004908:	4b29      	ldr	r3, [pc, #164]	; (80049b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800490a:	695a      	ldr	r2, [r3, #20]
 800490c:	4b2a      	ldr	r3, [pc, #168]	; (80049b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800490e:	4013      	ands	r3, r2
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6892      	ldr	r2, [r2, #8]
 8004914:	0211      	lsls	r1, r2, #8
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6912      	ldr	r2, [r2, #16]
 800491a:	0852      	lsrs	r2, r2, #1
 800491c:	3a01      	subs	r2, #1
 800491e:	0552      	lsls	r2, r2, #21
 8004920:	4311      	orrs	r1, r2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6852      	ldr	r2, [r2, #4]
 8004926:	3a01      	subs	r2, #1
 8004928:	0112      	lsls	r2, r2, #4
 800492a:	430a      	orrs	r2, r1
 800492c:	4920      	ldr	r1, [pc, #128]	; (80049b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800492e:	4313      	orrs	r3, r2
 8004930:	614b      	str	r3, [r1, #20]
 8004932:	e014      	b.n	800495e <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004934:	4b1e      	ldr	r3, [pc, #120]	; (80049b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004936:	695a      	ldr	r2, [r3, #20]
 8004938:	4b20      	ldr	r3, [pc, #128]	; (80049bc <RCCEx_PLLSAI2_Config+0x1dc>)
 800493a:	4013      	ands	r3, r2
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6892      	ldr	r2, [r2, #8]
 8004940:	0211      	lsls	r1, r2, #8
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6952      	ldr	r2, [r2, #20]
 8004946:	0852      	lsrs	r2, r2, #1
 8004948:	3a01      	subs	r2, #1
 800494a:	0652      	lsls	r2, r2, #25
 800494c:	4311      	orrs	r1, r2
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6852      	ldr	r2, [r2, #4]
 8004952:	3a01      	subs	r2, #1
 8004954:	0112      	lsls	r2, r2, #4
 8004956:	430a      	orrs	r2, r1
 8004958:	4915      	ldr	r1, [pc, #84]	; (80049b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800495a:	4313      	orrs	r3, r2
 800495c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800495e:	4b14      	ldr	r3, [pc, #80]	; (80049b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a13      	ldr	r2, [pc, #76]	; (80049b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004968:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496a:	f7fd f991 	bl	8001c90 <HAL_GetTick>
 800496e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004970:	e009      	b.n	8004986 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004972:	f7fd f98d 	bl	8001c90 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d902      	bls.n	8004986 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	73fb      	strb	r3, [r7, #15]
          break;
 8004984:	e005      	b.n	8004992 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004986:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0ef      	beq.n	8004972 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004992:	7bfb      	ldrb	r3, [r7, #15]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d106      	bne.n	80049a6 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004998:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800499a:	695a      	ldr	r2, [r3, #20]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	4903      	ldr	r1, [pc, #12]	; (80049b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40021000 	.word	0x40021000
 80049b4:	07ff800f 	.word	0x07ff800f
 80049b8:	ff9f800f 	.word	0xff9f800f
 80049bc:	f9ff800f 	.word	0xf9ff800f

080049c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e095      	b.n	8004afe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d108      	bne.n	80049ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049e2:	d009      	beq.n	80049f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	61da      	str	r2, [r3, #28]
 80049ea:	e005      	b.n	80049f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fc fb22 	bl	800105c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a38:	d902      	bls.n	8004a40 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	e002      	b.n	8004a46 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a44:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a4e:	d007      	beq.n	8004a60 <HAL_SPI_Init+0xa0>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a58:	d002      	beq.n	8004a60 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa2:	ea42 0103 	orr.w	r1, r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aaa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	0c1b      	lsrs	r3, r3, #16
 8004abc:	f003 0204 	and.w	r2, r3, #4
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	f003 0310 	and.w	r3, r3, #16
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004adc:	ea42 0103 	orr.w	r1, r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b082      	sub	sp, #8
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e049      	b.n	8004bac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d106      	bne.n	8004b32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7fc fad9 	bl	80010e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2202      	movs	r2, #2
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3304      	adds	r3, #4
 8004b42:	4619      	mov	r1, r3
 8004b44:	4610      	mov	r0, r2
 8004b46:	f000 f9ed 	bl	8004f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d001      	beq.n	8004bcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e04f      	b.n	8004c6c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68da      	ldr	r2, [r3, #12]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0201 	orr.w	r2, r2, #1
 8004be2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a23      	ldr	r2, [pc, #140]	; (8004c78 <HAL_TIM_Base_Start_IT+0xc4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d01d      	beq.n	8004c2a <HAL_TIM_Base_Start_IT+0x76>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf6:	d018      	beq.n	8004c2a <HAL_TIM_Base_Start_IT+0x76>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a1f      	ldr	r2, [pc, #124]	; (8004c7c <HAL_TIM_Base_Start_IT+0xc8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d013      	beq.n	8004c2a <HAL_TIM_Base_Start_IT+0x76>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a1e      	ldr	r2, [pc, #120]	; (8004c80 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d00e      	beq.n	8004c2a <HAL_TIM_Base_Start_IT+0x76>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a1c      	ldr	r2, [pc, #112]	; (8004c84 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d009      	beq.n	8004c2a <HAL_TIM_Base_Start_IT+0x76>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a1b      	ldr	r2, [pc, #108]	; (8004c88 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d004      	beq.n	8004c2a <HAL_TIM_Base_Start_IT+0x76>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a19      	ldr	r2, [pc, #100]	; (8004c8c <HAL_TIM_Base_Start_IT+0xd8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d115      	bne.n	8004c56 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	4b17      	ldr	r3, [pc, #92]	; (8004c90 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c32:	4013      	ands	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b06      	cmp	r3, #6
 8004c3a:	d015      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0xb4>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c42:	d011      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c54:	e008      	b.n	8004c68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f042 0201 	orr.w	r2, r2, #1
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	e000      	b.n	8004c6a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	40012c00 	.word	0x40012c00
 8004c7c:	40000400 	.word	0x40000400
 8004c80:	40000800 	.word	0x40000800
 8004c84:	40000c00 	.word	0x40000c00
 8004c88:	40013400 	.word	0x40013400
 8004c8c:	40014000 	.word	0x40014000
 8004c90:	00010007 	.word	0x00010007

08004c94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d122      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d11b      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f06f 0202 	mvn.w	r2, #2
 8004cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f905 	bl	8004ee6 <HAL_TIM_IC_CaptureCallback>
 8004cdc:	e005      	b.n	8004cea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f8f7 	bl	8004ed2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f908 	bl	8004efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f003 0304 	and.w	r3, r3, #4
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d122      	bne.n	8004d44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d11b      	bne.n	8004d44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f06f 0204 	mvn.w	r2, #4
 8004d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f8db 	bl	8004ee6 <HAL_TIM_IC_CaptureCallback>
 8004d30:	e005      	b.n	8004d3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f8cd 	bl	8004ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f8de 	bl	8004efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	d122      	bne.n	8004d98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b08      	cmp	r3, #8
 8004d5e:	d11b      	bne.n	8004d98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f06f 0208 	mvn.w	r2, #8
 8004d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2204      	movs	r2, #4
 8004d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f8b1 	bl	8004ee6 <HAL_TIM_IC_CaptureCallback>
 8004d84:	e005      	b.n	8004d92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f8a3 	bl	8004ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f8b4 	bl	8004efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	f003 0310 	and.w	r3, r3, #16
 8004da2:	2b10      	cmp	r3, #16
 8004da4:	d122      	bne.n	8004dec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	2b10      	cmp	r3, #16
 8004db2:	d11b      	bne.n	8004dec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f06f 0210 	mvn.w	r2, #16
 8004dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2208      	movs	r2, #8
 8004dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f887 	bl	8004ee6 <HAL_TIM_IC_CaptureCallback>
 8004dd8:	e005      	b.n	8004de6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f879 	bl	8004ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f88a 	bl	8004efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d10e      	bne.n	8004e18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d107      	bne.n	8004e18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f06f 0201 	mvn.w	r2, #1
 8004e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fc f8e4 	bl	8000fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e22:	2b80      	cmp	r3, #128	; 0x80
 8004e24:	d10e      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e30:	2b80      	cmp	r3, #128	; 0x80
 8004e32:	d107      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f914 	bl	800506c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e52:	d10e      	bne.n	8004e72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5e:	2b80      	cmp	r3, #128	; 0x80
 8004e60:	d107      	bne.n	8004e72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f907 	bl	8005080 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7c:	2b40      	cmp	r3, #64	; 0x40
 8004e7e:	d10e      	bne.n	8004e9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8a:	2b40      	cmp	r3, #64	; 0x40
 8004e8c:	d107      	bne.n	8004e9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f838 	bl	8004f0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	f003 0320 	and.w	r3, r3, #32
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	d10e      	bne.n	8004eca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f003 0320 	and.w	r3, r3, #32
 8004eb6:	2b20      	cmp	r3, #32
 8004eb8:	d107      	bne.n	8004eca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f06f 0220 	mvn.w	r2, #32
 8004ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f8c7 	bl	8005058 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eca:	bf00      	nop
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
	...

08004f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a40      	ldr	r2, [pc, #256]	; (8005038 <TIM_Base_SetConfig+0x114>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d013      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f42:	d00f      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a3d      	ldr	r2, [pc, #244]	; (800503c <TIM_Base_SetConfig+0x118>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00b      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a3c      	ldr	r2, [pc, #240]	; (8005040 <TIM_Base_SetConfig+0x11c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d007      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a3b      	ldr	r2, [pc, #236]	; (8005044 <TIM_Base_SetConfig+0x120>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d003      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a3a      	ldr	r2, [pc, #232]	; (8005048 <TIM_Base_SetConfig+0x124>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d108      	bne.n	8004f76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a2f      	ldr	r2, [pc, #188]	; (8005038 <TIM_Base_SetConfig+0x114>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d01f      	beq.n	8004fbe <TIM_Base_SetConfig+0x9a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f84:	d01b      	beq.n	8004fbe <TIM_Base_SetConfig+0x9a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a2c      	ldr	r2, [pc, #176]	; (800503c <TIM_Base_SetConfig+0x118>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d017      	beq.n	8004fbe <TIM_Base_SetConfig+0x9a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a2b      	ldr	r2, [pc, #172]	; (8005040 <TIM_Base_SetConfig+0x11c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d013      	beq.n	8004fbe <TIM_Base_SetConfig+0x9a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a2a      	ldr	r2, [pc, #168]	; (8005044 <TIM_Base_SetConfig+0x120>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00f      	beq.n	8004fbe <TIM_Base_SetConfig+0x9a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a29      	ldr	r2, [pc, #164]	; (8005048 <TIM_Base_SetConfig+0x124>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00b      	beq.n	8004fbe <TIM_Base_SetConfig+0x9a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a28      	ldr	r2, [pc, #160]	; (800504c <TIM_Base_SetConfig+0x128>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d007      	beq.n	8004fbe <TIM_Base_SetConfig+0x9a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a27      	ldr	r2, [pc, #156]	; (8005050 <TIM_Base_SetConfig+0x12c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d003      	beq.n	8004fbe <TIM_Base_SetConfig+0x9a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a26      	ldr	r2, [pc, #152]	; (8005054 <TIM_Base_SetConfig+0x130>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d108      	bne.n	8004fd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a10      	ldr	r2, [pc, #64]	; (8005038 <TIM_Base_SetConfig+0x114>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d00f      	beq.n	800501c <TIM_Base_SetConfig+0xf8>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a12      	ldr	r2, [pc, #72]	; (8005048 <TIM_Base_SetConfig+0x124>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00b      	beq.n	800501c <TIM_Base_SetConfig+0xf8>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a11      	ldr	r2, [pc, #68]	; (800504c <TIM_Base_SetConfig+0x128>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d007      	beq.n	800501c <TIM_Base_SetConfig+0xf8>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a10      	ldr	r2, [pc, #64]	; (8005050 <TIM_Base_SetConfig+0x12c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d003      	beq.n	800501c <TIM_Base_SetConfig+0xf8>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a0f      	ldr	r2, [pc, #60]	; (8005054 <TIM_Base_SetConfig+0x130>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d103      	bne.n	8005024 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	615a      	str	r2, [r3, #20]
}
 800502a:	bf00      	nop
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	40012c00 	.word	0x40012c00
 800503c:	40000400 	.word	0x40000400
 8005040:	40000800 	.word	0x40000800
 8005044:	40000c00 	.word	0x40000c00
 8005048:	40013400 	.word	0x40013400
 800504c:	40014000 	.word	0x40014000
 8005050:	40014400 	.word	0x40014400
 8005054:	40014800 	.word	0x40014800

08005058 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e042      	b.n	800512c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d106      	bne.n	80050be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7fc f833 	bl	8001124 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2224      	movs	r2, #36	; 0x24
 80050c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0201 	bic.w	r2, r2, #1
 80050d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f8c4 	bl	8005264 <UART_SetConfig>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e022      	b.n	800512c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fb8a 	bl	8005808 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005102:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005112:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0201 	orr.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 fc11 	bl	800594c <UART_CheckIdleState>
 800512a:	4603      	mov	r3, r0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b08a      	sub	sp, #40	; 0x28
 8005138:	af02      	add	r7, sp, #8
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	4613      	mov	r3, r2
 8005142:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800514a:	2b20      	cmp	r3, #32
 800514c:	f040 8084 	bne.w	8005258 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <HAL_UART_Transmit+0x28>
 8005156:	88fb      	ldrh	r3, [r7, #6]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e07c      	b.n	800525a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005166:	2b01      	cmp	r3, #1
 8005168:	d101      	bne.n	800516e <HAL_UART_Transmit+0x3a>
 800516a:	2302      	movs	r3, #2
 800516c:	e075      	b.n	800525a <HAL_UART_Transmit+0x126>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2221      	movs	r2, #33	; 0x21
 8005182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005186:	f7fc fd83 	bl	8001c90 <HAL_GetTick>
 800518a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	88fa      	ldrh	r2, [r7, #6]
 8005190:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	88fa      	ldrh	r2, [r7, #6]
 8005198:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a4:	d108      	bne.n	80051b8 <HAL_UART_Transmit+0x84>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d104      	bne.n	80051b8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	e003      	b.n	80051c0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051bc:	2300      	movs	r3, #0
 80051be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80051c8:	e02d      	b.n	8005226 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2200      	movs	r2, #0
 80051d2:	2180      	movs	r1, #128	; 0x80
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 fc01 	bl	80059dc <UART_WaitOnFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e03a      	b.n	800525a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10b      	bne.n	8005202 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	881a      	ldrh	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f6:	b292      	uxth	r2, r2
 80051f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	3302      	adds	r3, #2
 80051fe:	61bb      	str	r3, [r7, #24]
 8005200:	e008      	b.n	8005214 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	781a      	ldrb	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	b292      	uxth	r2, r2
 800520c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	3301      	adds	r3, #1
 8005212:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800521a:	b29b      	uxth	r3, r3
 800521c:	3b01      	subs	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800522c:	b29b      	uxth	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1cb      	bne.n	80051ca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2200      	movs	r2, #0
 800523a:	2140      	movs	r1, #64	; 0x40
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 fbcd 	bl	80059dc <UART_WaitOnFlagUntilTimeout>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e006      	b.n	800525a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2220      	movs	r2, #32
 8005250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005254:	2300      	movs	r3, #0
 8005256:	e000      	b.n	800525a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005258:	2302      	movs	r3, #2
  }
}
 800525a:	4618      	mov	r0, r3
 800525c:	3720      	adds	r7, #32
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005264:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005268:	b088      	sub	sp, #32
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	431a      	orrs	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	4313      	orrs	r3, r2
 8005288:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	4313      	orrs	r3, r2
 8005292:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	4bb1      	ldr	r3, [pc, #708]	; (8005560 <UART_SetConfig+0x2fc>)
 800529c:	4013      	ands	r3, r2
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	6812      	ldr	r2, [r2, #0]
 80052a2:	69f9      	ldr	r1, [r7, #28]
 80052a4:	430b      	orrs	r3, r1
 80052a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4aa6      	ldr	r2, [pc, #664]	; (8005564 <UART_SetConfig+0x300>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d004      	beq.n	80052d8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	69fa      	ldr	r2, [r7, #28]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80052e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	6812      	ldr	r2, [r2, #0]
 80052ea:	69f9      	ldr	r1, [r7, #28]
 80052ec:	430b      	orrs	r3, r1
 80052ee:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f6:	f023 010f 	bic.w	r1, r3, #15
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a97      	ldr	r2, [pc, #604]	; (8005568 <UART_SetConfig+0x304>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d121      	bne.n	8005354 <UART_SetConfig+0xf0>
 8005310:	4b96      	ldr	r3, [pc, #600]	; (800556c <UART_SetConfig+0x308>)
 8005312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	2b03      	cmp	r3, #3
 800531c:	d816      	bhi.n	800534c <UART_SetConfig+0xe8>
 800531e:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <UART_SetConfig+0xc0>)
 8005320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005324:	08005335 	.word	0x08005335
 8005328:	08005341 	.word	0x08005341
 800532c:	0800533b 	.word	0x0800533b
 8005330:	08005347 	.word	0x08005347
 8005334:	2301      	movs	r3, #1
 8005336:	76fb      	strb	r3, [r7, #27]
 8005338:	e0e8      	b.n	800550c <UART_SetConfig+0x2a8>
 800533a:	2302      	movs	r3, #2
 800533c:	76fb      	strb	r3, [r7, #27]
 800533e:	e0e5      	b.n	800550c <UART_SetConfig+0x2a8>
 8005340:	2304      	movs	r3, #4
 8005342:	76fb      	strb	r3, [r7, #27]
 8005344:	e0e2      	b.n	800550c <UART_SetConfig+0x2a8>
 8005346:	2308      	movs	r3, #8
 8005348:	76fb      	strb	r3, [r7, #27]
 800534a:	e0df      	b.n	800550c <UART_SetConfig+0x2a8>
 800534c:	2310      	movs	r3, #16
 800534e:	76fb      	strb	r3, [r7, #27]
 8005350:	bf00      	nop
 8005352:	e0db      	b.n	800550c <UART_SetConfig+0x2a8>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a85      	ldr	r2, [pc, #532]	; (8005570 <UART_SetConfig+0x30c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d134      	bne.n	80053c8 <UART_SetConfig+0x164>
 800535e:	4b83      	ldr	r3, [pc, #524]	; (800556c <UART_SetConfig+0x308>)
 8005360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005364:	f003 030c 	and.w	r3, r3, #12
 8005368:	2b0c      	cmp	r3, #12
 800536a:	d829      	bhi.n	80053c0 <UART_SetConfig+0x15c>
 800536c:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <UART_SetConfig+0x110>)
 800536e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005372:	bf00      	nop
 8005374:	080053a9 	.word	0x080053a9
 8005378:	080053c1 	.word	0x080053c1
 800537c:	080053c1 	.word	0x080053c1
 8005380:	080053c1 	.word	0x080053c1
 8005384:	080053b5 	.word	0x080053b5
 8005388:	080053c1 	.word	0x080053c1
 800538c:	080053c1 	.word	0x080053c1
 8005390:	080053c1 	.word	0x080053c1
 8005394:	080053af 	.word	0x080053af
 8005398:	080053c1 	.word	0x080053c1
 800539c:	080053c1 	.word	0x080053c1
 80053a0:	080053c1 	.word	0x080053c1
 80053a4:	080053bb 	.word	0x080053bb
 80053a8:	2300      	movs	r3, #0
 80053aa:	76fb      	strb	r3, [r7, #27]
 80053ac:	e0ae      	b.n	800550c <UART_SetConfig+0x2a8>
 80053ae:	2302      	movs	r3, #2
 80053b0:	76fb      	strb	r3, [r7, #27]
 80053b2:	e0ab      	b.n	800550c <UART_SetConfig+0x2a8>
 80053b4:	2304      	movs	r3, #4
 80053b6:	76fb      	strb	r3, [r7, #27]
 80053b8:	e0a8      	b.n	800550c <UART_SetConfig+0x2a8>
 80053ba:	2308      	movs	r3, #8
 80053bc:	76fb      	strb	r3, [r7, #27]
 80053be:	e0a5      	b.n	800550c <UART_SetConfig+0x2a8>
 80053c0:	2310      	movs	r3, #16
 80053c2:	76fb      	strb	r3, [r7, #27]
 80053c4:	bf00      	nop
 80053c6:	e0a1      	b.n	800550c <UART_SetConfig+0x2a8>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a69      	ldr	r2, [pc, #420]	; (8005574 <UART_SetConfig+0x310>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d120      	bne.n	8005414 <UART_SetConfig+0x1b0>
 80053d2:	4b66      	ldr	r3, [pc, #408]	; (800556c <UART_SetConfig+0x308>)
 80053d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053dc:	2b10      	cmp	r3, #16
 80053de:	d00f      	beq.n	8005400 <UART_SetConfig+0x19c>
 80053e0:	2b10      	cmp	r3, #16
 80053e2:	d802      	bhi.n	80053ea <UART_SetConfig+0x186>
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <UART_SetConfig+0x190>
 80053e8:	e010      	b.n	800540c <UART_SetConfig+0x1a8>
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d005      	beq.n	80053fa <UART_SetConfig+0x196>
 80053ee:	2b30      	cmp	r3, #48	; 0x30
 80053f0:	d009      	beq.n	8005406 <UART_SetConfig+0x1a2>
 80053f2:	e00b      	b.n	800540c <UART_SetConfig+0x1a8>
 80053f4:	2300      	movs	r3, #0
 80053f6:	76fb      	strb	r3, [r7, #27]
 80053f8:	e088      	b.n	800550c <UART_SetConfig+0x2a8>
 80053fa:	2302      	movs	r3, #2
 80053fc:	76fb      	strb	r3, [r7, #27]
 80053fe:	e085      	b.n	800550c <UART_SetConfig+0x2a8>
 8005400:	2304      	movs	r3, #4
 8005402:	76fb      	strb	r3, [r7, #27]
 8005404:	e082      	b.n	800550c <UART_SetConfig+0x2a8>
 8005406:	2308      	movs	r3, #8
 8005408:	76fb      	strb	r3, [r7, #27]
 800540a:	e07f      	b.n	800550c <UART_SetConfig+0x2a8>
 800540c:	2310      	movs	r3, #16
 800540e:	76fb      	strb	r3, [r7, #27]
 8005410:	bf00      	nop
 8005412:	e07b      	b.n	800550c <UART_SetConfig+0x2a8>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a57      	ldr	r2, [pc, #348]	; (8005578 <UART_SetConfig+0x314>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d120      	bne.n	8005460 <UART_SetConfig+0x1fc>
 800541e:	4b53      	ldr	r3, [pc, #332]	; (800556c <UART_SetConfig+0x308>)
 8005420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005424:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005428:	2b40      	cmp	r3, #64	; 0x40
 800542a:	d00f      	beq.n	800544c <UART_SetConfig+0x1e8>
 800542c:	2b40      	cmp	r3, #64	; 0x40
 800542e:	d802      	bhi.n	8005436 <UART_SetConfig+0x1d2>
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <UART_SetConfig+0x1dc>
 8005434:	e010      	b.n	8005458 <UART_SetConfig+0x1f4>
 8005436:	2b80      	cmp	r3, #128	; 0x80
 8005438:	d005      	beq.n	8005446 <UART_SetConfig+0x1e2>
 800543a:	2bc0      	cmp	r3, #192	; 0xc0
 800543c:	d009      	beq.n	8005452 <UART_SetConfig+0x1ee>
 800543e:	e00b      	b.n	8005458 <UART_SetConfig+0x1f4>
 8005440:	2300      	movs	r3, #0
 8005442:	76fb      	strb	r3, [r7, #27]
 8005444:	e062      	b.n	800550c <UART_SetConfig+0x2a8>
 8005446:	2302      	movs	r3, #2
 8005448:	76fb      	strb	r3, [r7, #27]
 800544a:	e05f      	b.n	800550c <UART_SetConfig+0x2a8>
 800544c:	2304      	movs	r3, #4
 800544e:	76fb      	strb	r3, [r7, #27]
 8005450:	e05c      	b.n	800550c <UART_SetConfig+0x2a8>
 8005452:	2308      	movs	r3, #8
 8005454:	76fb      	strb	r3, [r7, #27]
 8005456:	e059      	b.n	800550c <UART_SetConfig+0x2a8>
 8005458:	2310      	movs	r3, #16
 800545a:	76fb      	strb	r3, [r7, #27]
 800545c:	bf00      	nop
 800545e:	e055      	b.n	800550c <UART_SetConfig+0x2a8>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a45      	ldr	r2, [pc, #276]	; (800557c <UART_SetConfig+0x318>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d124      	bne.n	80054b4 <UART_SetConfig+0x250>
 800546a:	4b40      	ldr	r3, [pc, #256]	; (800556c <UART_SetConfig+0x308>)
 800546c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005470:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005478:	d012      	beq.n	80054a0 <UART_SetConfig+0x23c>
 800547a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800547e:	d802      	bhi.n	8005486 <UART_SetConfig+0x222>
 8005480:	2b00      	cmp	r3, #0
 8005482:	d007      	beq.n	8005494 <UART_SetConfig+0x230>
 8005484:	e012      	b.n	80054ac <UART_SetConfig+0x248>
 8005486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800548a:	d006      	beq.n	800549a <UART_SetConfig+0x236>
 800548c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005490:	d009      	beq.n	80054a6 <UART_SetConfig+0x242>
 8005492:	e00b      	b.n	80054ac <UART_SetConfig+0x248>
 8005494:	2300      	movs	r3, #0
 8005496:	76fb      	strb	r3, [r7, #27]
 8005498:	e038      	b.n	800550c <UART_SetConfig+0x2a8>
 800549a:	2302      	movs	r3, #2
 800549c:	76fb      	strb	r3, [r7, #27]
 800549e:	e035      	b.n	800550c <UART_SetConfig+0x2a8>
 80054a0:	2304      	movs	r3, #4
 80054a2:	76fb      	strb	r3, [r7, #27]
 80054a4:	e032      	b.n	800550c <UART_SetConfig+0x2a8>
 80054a6:	2308      	movs	r3, #8
 80054a8:	76fb      	strb	r3, [r7, #27]
 80054aa:	e02f      	b.n	800550c <UART_SetConfig+0x2a8>
 80054ac:	2310      	movs	r3, #16
 80054ae:	76fb      	strb	r3, [r7, #27]
 80054b0:	bf00      	nop
 80054b2:	e02b      	b.n	800550c <UART_SetConfig+0x2a8>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a2a      	ldr	r2, [pc, #168]	; (8005564 <UART_SetConfig+0x300>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d124      	bne.n	8005508 <UART_SetConfig+0x2a4>
 80054be:	4b2b      	ldr	r3, [pc, #172]	; (800556c <UART_SetConfig+0x308>)
 80054c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054cc:	d012      	beq.n	80054f4 <UART_SetConfig+0x290>
 80054ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d2:	d802      	bhi.n	80054da <UART_SetConfig+0x276>
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d007      	beq.n	80054e8 <UART_SetConfig+0x284>
 80054d8:	e012      	b.n	8005500 <UART_SetConfig+0x29c>
 80054da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054de:	d006      	beq.n	80054ee <UART_SetConfig+0x28a>
 80054e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054e4:	d009      	beq.n	80054fa <UART_SetConfig+0x296>
 80054e6:	e00b      	b.n	8005500 <UART_SetConfig+0x29c>
 80054e8:	2300      	movs	r3, #0
 80054ea:	76fb      	strb	r3, [r7, #27]
 80054ec:	e00e      	b.n	800550c <UART_SetConfig+0x2a8>
 80054ee:	2302      	movs	r3, #2
 80054f0:	76fb      	strb	r3, [r7, #27]
 80054f2:	e00b      	b.n	800550c <UART_SetConfig+0x2a8>
 80054f4:	2304      	movs	r3, #4
 80054f6:	76fb      	strb	r3, [r7, #27]
 80054f8:	e008      	b.n	800550c <UART_SetConfig+0x2a8>
 80054fa:	2308      	movs	r3, #8
 80054fc:	76fb      	strb	r3, [r7, #27]
 80054fe:	e005      	b.n	800550c <UART_SetConfig+0x2a8>
 8005500:	2310      	movs	r3, #16
 8005502:	76fb      	strb	r3, [r7, #27]
 8005504:	bf00      	nop
 8005506:	e001      	b.n	800550c <UART_SetConfig+0x2a8>
 8005508:	2310      	movs	r3, #16
 800550a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a14      	ldr	r2, [pc, #80]	; (8005564 <UART_SetConfig+0x300>)
 8005512:	4293      	cmp	r3, r2
 8005514:	f040 80a1 	bne.w	800565a <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005518:	7efb      	ldrb	r3, [r7, #27]
 800551a:	2b08      	cmp	r3, #8
 800551c:	d836      	bhi.n	800558c <UART_SetConfig+0x328>
 800551e:	a201      	add	r2, pc, #4	; (adr r2, 8005524 <UART_SetConfig+0x2c0>)
 8005520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005524:	08005549 	.word	0x08005549
 8005528:	0800558d 	.word	0x0800558d
 800552c:	08005551 	.word	0x08005551
 8005530:	0800558d 	.word	0x0800558d
 8005534:	08005557 	.word	0x08005557
 8005538:	0800558d 	.word	0x0800558d
 800553c:	0800558d 	.word	0x0800558d
 8005540:	0800558d 	.word	0x0800558d
 8005544:	08005585 	.word	0x08005585
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005548:	f7fe fbb4 	bl	8003cb4 <HAL_RCC_GetPCLK1Freq>
 800554c:	6178      	str	r0, [r7, #20]
        break;
 800554e:	e022      	b.n	8005596 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005550:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <UART_SetConfig+0x31c>)
 8005552:	617b      	str	r3, [r7, #20]
        break;
 8005554:	e01f      	b.n	8005596 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005556:	f7fe fb19 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 800555a:	6178      	str	r0, [r7, #20]
        break;
 800555c:	e01b      	b.n	8005596 <UART_SetConfig+0x332>
 800555e:	bf00      	nop
 8005560:	cfff69f3 	.word	0xcfff69f3
 8005564:	40008000 	.word	0x40008000
 8005568:	40013800 	.word	0x40013800
 800556c:	40021000 	.word	0x40021000
 8005570:	40004400 	.word	0x40004400
 8005574:	40004800 	.word	0x40004800
 8005578:	40004c00 	.word	0x40004c00
 800557c:	40005000 	.word	0x40005000
 8005580:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005584:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005588:	617b      	str	r3, [r7, #20]
        break;
 800558a:	e004      	b.n	8005596 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	76bb      	strb	r3, [r7, #26]
        break;
 8005594:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 811d 	beq.w	80057d8 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	4a97      	ldr	r2, [pc, #604]	; (8005800 <UART_SetConfig+0x59c>)
 80055a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055a8:	461a      	mov	r2, r3
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80055b0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	4613      	mov	r3, r2
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	4413      	add	r3, r2
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d305      	bcc.n	80055ce <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d902      	bls.n	80055d4 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	76bb      	strb	r3, [r7, #26]
 80055d2:	e101      	b.n	80057d8 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f04f 0100 	mov.w	r1, #0
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	4a87      	ldr	r2, [pc, #540]	; (8005800 <UART_SetConfig+0x59c>)
 80055e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	f04f 0400 	mov.w	r4, #0
 80055ec:	461a      	mov	r2, r3
 80055ee:	4623      	mov	r3, r4
 80055f0:	f7fa fe06 	bl	8000200 <__aeabi_uldivmod>
 80055f4:	4603      	mov	r3, r0
 80055f6:	460c      	mov	r4, r1
 80055f8:	4619      	mov	r1, r3
 80055fa:	4622      	mov	r2, r4
 80055fc:	f04f 0300 	mov.w	r3, #0
 8005600:	f04f 0400 	mov.w	r4, #0
 8005604:	0214      	lsls	r4, r2, #8
 8005606:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800560a:	020b      	lsls	r3, r1, #8
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6852      	ldr	r2, [r2, #4]
 8005610:	0852      	lsrs	r2, r2, #1
 8005612:	4611      	mov	r1, r2
 8005614:	f04f 0200 	mov.w	r2, #0
 8005618:	eb13 0b01 	adds.w	fp, r3, r1
 800561c:	eb44 0c02 	adc.w	ip, r4, r2
 8005620:	4658      	mov	r0, fp
 8005622:	4661      	mov	r1, ip
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f04f 0400 	mov.w	r4, #0
 800562c:	461a      	mov	r2, r3
 800562e:	4623      	mov	r3, r4
 8005630:	f7fa fde6 	bl	8000200 <__aeabi_uldivmod>
 8005634:	4603      	mov	r3, r0
 8005636:	460c      	mov	r4, r1
 8005638:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005640:	d308      	bcc.n	8005654 <UART_SetConfig+0x3f0>
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005648:	d204      	bcs.n	8005654 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	60da      	str	r2, [r3, #12]
 8005652:	e0c1      	b.n	80057d8 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	76bb      	strb	r3, [r7, #26]
 8005658:	e0be      	b.n	80057d8 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005662:	d164      	bne.n	800572e <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8005664:	7efb      	ldrb	r3, [r7, #27]
 8005666:	2b08      	cmp	r3, #8
 8005668:	d827      	bhi.n	80056ba <UART_SetConfig+0x456>
 800566a:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <UART_SetConfig+0x40c>)
 800566c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005670:	08005695 	.word	0x08005695
 8005674:	0800569d 	.word	0x0800569d
 8005678:	080056a5 	.word	0x080056a5
 800567c:	080056bb 	.word	0x080056bb
 8005680:	080056ab 	.word	0x080056ab
 8005684:	080056bb 	.word	0x080056bb
 8005688:	080056bb 	.word	0x080056bb
 800568c:	080056bb 	.word	0x080056bb
 8005690:	080056b3 	.word	0x080056b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005694:	f7fe fb0e 	bl	8003cb4 <HAL_RCC_GetPCLK1Freq>
 8005698:	6178      	str	r0, [r7, #20]
        break;
 800569a:	e013      	b.n	80056c4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800569c:	f7fe fb20 	bl	8003ce0 <HAL_RCC_GetPCLK2Freq>
 80056a0:	6178      	str	r0, [r7, #20]
        break;
 80056a2:	e00f      	b.n	80056c4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056a4:	4b57      	ldr	r3, [pc, #348]	; (8005804 <UART_SetConfig+0x5a0>)
 80056a6:	617b      	str	r3, [r7, #20]
        break;
 80056a8:	e00c      	b.n	80056c4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056aa:	f7fe fa6f 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 80056ae:	6178      	str	r0, [r7, #20]
        break;
 80056b0:	e008      	b.n	80056c4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056b6:	617b      	str	r3, [r7, #20]
        break;
 80056b8:	e004      	b.n	80056c4 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	76bb      	strb	r3, [r7, #26]
        break;
 80056c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 8086 	beq.w	80057d8 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	4a4b      	ldr	r2, [pc, #300]	; (8005800 <UART_SetConfig+0x59c>)
 80056d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056d6:	461a      	mov	r2, r3
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	fbb3 f3f2 	udiv	r3, r3, r2
 80056de:	005a      	lsls	r2, r3, #1
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	085b      	lsrs	r3, r3, #1
 80056e6:	441a      	add	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	2b0f      	cmp	r3, #15
 80056f8:	d916      	bls.n	8005728 <UART_SetConfig+0x4c4>
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005700:	d212      	bcs.n	8005728 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	b29b      	uxth	r3, r3
 8005706:	f023 030f 	bic.w	r3, r3, #15
 800570a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	085b      	lsrs	r3, r3, #1
 8005710:	b29b      	uxth	r3, r3
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	b29a      	uxth	r2, r3
 8005718:	89fb      	ldrh	r3, [r7, #14]
 800571a:	4313      	orrs	r3, r2
 800571c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	89fa      	ldrh	r2, [r7, #14]
 8005724:	60da      	str	r2, [r3, #12]
 8005726:	e057      	b.n	80057d8 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	76bb      	strb	r3, [r7, #26]
 800572c:	e054      	b.n	80057d8 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 800572e:	7efb      	ldrb	r3, [r7, #27]
 8005730:	2b08      	cmp	r3, #8
 8005732:	d828      	bhi.n	8005786 <UART_SetConfig+0x522>
 8005734:	a201      	add	r2, pc, #4	; (adr r2, 800573c <UART_SetConfig+0x4d8>)
 8005736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573a:	bf00      	nop
 800573c:	08005761 	.word	0x08005761
 8005740:	08005769 	.word	0x08005769
 8005744:	08005771 	.word	0x08005771
 8005748:	08005787 	.word	0x08005787
 800574c:	08005777 	.word	0x08005777
 8005750:	08005787 	.word	0x08005787
 8005754:	08005787 	.word	0x08005787
 8005758:	08005787 	.word	0x08005787
 800575c:	0800577f 	.word	0x0800577f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005760:	f7fe faa8 	bl	8003cb4 <HAL_RCC_GetPCLK1Freq>
 8005764:	6178      	str	r0, [r7, #20]
        break;
 8005766:	e013      	b.n	8005790 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005768:	f7fe faba 	bl	8003ce0 <HAL_RCC_GetPCLK2Freq>
 800576c:	6178      	str	r0, [r7, #20]
        break;
 800576e:	e00f      	b.n	8005790 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005770:	4b24      	ldr	r3, [pc, #144]	; (8005804 <UART_SetConfig+0x5a0>)
 8005772:	617b      	str	r3, [r7, #20]
        break;
 8005774:	e00c      	b.n	8005790 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005776:	f7fe fa09 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 800577a:	6178      	str	r0, [r7, #20]
        break;
 800577c:	e008      	b.n	8005790 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800577e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005782:	617b      	str	r3, [r7, #20]
        break;
 8005784:	e004      	b.n	8005790 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	76bb      	strb	r3, [r7, #26]
        break;
 800578e:	bf00      	nop
    }

    if (pclk != 0U)
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d020      	beq.n	80057d8 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	4a19      	ldr	r2, [pc, #100]	; (8005800 <UART_SetConfig+0x59c>)
 800579c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057a0:	461a      	mov	r2, r3
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	fbb3 f2f2 	udiv	r2, r3, r2
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	085b      	lsrs	r3, r3, #1
 80057ae:	441a      	add	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	2b0f      	cmp	r3, #15
 80057c0:	d908      	bls.n	80057d4 <UART_SetConfig+0x570>
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c8:	d204      	bcs.n	80057d4 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	60da      	str	r2, [r3, #12]
 80057d2:	e001      	b.n	80057d8 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80057f4:	7ebb      	ldrb	r3, [r7, #26]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3720      	adds	r7, #32
 80057fa:	46bd      	mov	sp, r7
 80057fc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005800:	080089f0 	.word	0x080089f0
 8005804:	00f42400 	.word	0x00f42400

08005808 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00a      	beq.n	8005832 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00a      	beq.n	8005854 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587a:	f003 0308 	and.w	r3, r3, #8
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589c:	f003 0310 	and.w	r3, r3, #16
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00a      	beq.n	80058ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d01a      	beq.n	800591e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005906:	d10a      	bne.n	800591e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	605a      	str	r2, [r3, #4]
  }
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af02      	add	r7, sp, #8
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800595c:	f7fc f998 	bl	8001c90 <HAL_GetTick>
 8005960:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0308 	and.w	r3, r3, #8
 800596c:	2b08      	cmp	r3, #8
 800596e:	d10e      	bne.n	800598e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005970:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f82c 	bl	80059dc <UART_WaitOnFlagUntilTimeout>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e022      	b.n	80059d4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b04      	cmp	r3, #4
 800599a:	d10e      	bne.n	80059ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800599c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f816 	bl	80059dc <UART_WaitOnFlagUntilTimeout>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e00c      	b.n	80059d4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2220      	movs	r2, #32
 80059be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2220      	movs	r2, #32
 80059c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	603b      	str	r3, [r7, #0]
 80059e8:	4613      	mov	r3, r2
 80059ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ec:	e062      	b.n	8005ab4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f4:	d05e      	beq.n	8005ab4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f6:	f7fc f94b 	bl	8001c90 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d302      	bcc.n	8005a0c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d11d      	bne.n	8005a48 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a1a:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 0201 	bic.w	r2, r2, #1
 8005a2a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e045      	b.n	8005ad4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0304 	and.w	r3, r3, #4
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d02e      	beq.n	8005ab4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a64:	d126      	bne.n	8005ab4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a6e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a7e:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0201 	bic.w	r2, r2, #1
 8005a8e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e00f      	b.n	8005ad4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	69da      	ldr	r2, [r3, #28]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	4013      	ands	r3, r2
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	bf0c      	ite	eq
 8005ac4:	2301      	moveq	r3, #1
 8005ac6:	2300      	movne	r3, #0
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	461a      	mov	r2, r3
 8005acc:	79fb      	ldrb	r3, [r7, #7]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d08d      	beq.n	80059ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_UARTEx_DisableFifoMode+0x16>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e027      	b.n	8005b42 <HAL_UARTEx_DisableFifoMode+0x66>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2224      	movs	r2, #36	; 0x24
 8005afe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0201 	bic.w	r2, r2, #1
 8005b18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b084      	sub	sp, #16
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e02d      	b.n	8005bc2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2224      	movs	r2, #36	; 0x24
 8005b72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0201 	bic.w	r2, r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f850 	bl	8005c48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b084      	sub	sp, #16
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d101      	bne.n	8005be2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005bde:	2302      	movs	r3, #2
 8005be0:	e02d      	b.n	8005c3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2224      	movs	r2, #36	; 0x24
 8005bee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0201 	bic.w	r2, r2, #1
 8005c08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f812 	bl	8005c48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b089      	sub	sp, #36	; 0x24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005c50:	4a2f      	ldr	r2, [pc, #188]	; (8005d10 <UARTEx_SetNbDataToProcess+0xc8>)
 8005c52:	f107 0314 	add.w	r3, r7, #20
 8005c56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c5a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005c5e:	4a2d      	ldr	r2, [pc, #180]	; (8005d14 <UARTEx_SetNbDataToProcess+0xcc>)
 8005c60:	f107 030c 	add.w	r3, r7, #12
 8005c64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c68:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d108      	bne.n	8005c86 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c84:	e03d      	b.n	8005d02 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c86:	2308      	movs	r3, #8
 8005c88:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c8a:	2308      	movs	r3, #8
 8005c8c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	0e5b      	lsrs	r3, r3, #25
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	0f5b      	lsrs	r3, r3, #29
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005cae:	7fbb      	ldrb	r3, [r7, #30]
 8005cb0:	7f3a      	ldrb	r2, [r7, #28]
 8005cb2:	f107 0120 	add.w	r1, r7, #32
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005cbc:	fb02 f303 	mul.w	r3, r2, r3
 8005cc0:	7f3a      	ldrb	r2, [r7, #28]
 8005cc2:	f107 0120 	add.w	r1, r7, #32
 8005cc6:	440a      	add	r2, r1
 8005cc8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005ccc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005cd8:	7ffb      	ldrb	r3, [r7, #31]
 8005cda:	7f7a      	ldrb	r2, [r7, #29]
 8005cdc:	f107 0120 	add.w	r1, r7, #32
 8005ce0:	440a      	add	r2, r1
 8005ce2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005ce6:	fb02 f303 	mul.w	r3, r2, r3
 8005cea:	7f7a      	ldrb	r2, [r7, #29]
 8005cec:	f107 0120 	add.w	r1, r7, #32
 8005cf0:	440a      	add	r2, r1
 8005cf2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005cf6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005d02:	bf00      	nop
 8005d04:	3724      	adds	r7, #36	; 0x24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	08008990 	.word	0x08008990
 8005d14:	08008998 	.word	0x08008998

08005d18 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	4603      	mov	r3, r0
 8005d20:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d2a:	2b84      	cmp	r3, #132	; 0x84
 8005d2c:	d005      	beq.n	8005d3a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005d2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4413      	add	r3, r2
 8005d36:	3303      	adds	r3, #3
 8005d38:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d4e:	f3ef 8305 	mrs	r3, IPSR
 8005d52:	607b      	str	r3, [r7, #4]
  return(result);
 8005d54:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	bf14      	ite	ne
 8005d5a:	2301      	movne	r3, #1
 8005d5c:	2300      	moveq	r3, #0
 8005d5e:	b2db      	uxtb	r3, r3
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005d70:	f001 fb4a 	bl	8007408 <vTaskStartScheduler>
  
  return osOK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005d7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d7c:	b089      	sub	sp, #36	; 0x24
 8005d7e:	af04      	add	r7, sp, #16
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d020      	beq.n	8005dce <osThreadCreate+0x54>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01c      	beq.n	8005dce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685c      	ldr	r4, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681d      	ldr	r5, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691e      	ldr	r6, [r3, #16]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff ffb6 	bl	8005d18 <makeFreeRtosPriority>
 8005dac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005db6:	9202      	str	r2, [sp, #8]
 8005db8:	9301      	str	r3, [sp, #4]
 8005dba:	9100      	str	r1, [sp, #0]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	4632      	mov	r2, r6
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	f001 f95d 	bl	8007082 <xTaskCreateStatic>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	e01c      	b.n	8005e08 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685c      	ldr	r4, [r3, #4]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dda:	b29e      	uxth	r6, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7ff ff98 	bl	8005d18 <makeFreeRtosPriority>
 8005de8:	4602      	mov	r2, r0
 8005dea:	f107 030c 	add.w	r3, r7, #12
 8005dee:	9301      	str	r3, [sp, #4]
 8005df0:	9200      	str	r2, [sp, #0]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	4632      	mov	r2, r6
 8005df6:	4629      	mov	r1, r5
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f001 f99c 	bl	8007136 <xTaskCreate>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d001      	beq.n	8005e08 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005e04:	2300      	movs	r3, #0
 8005e06:	e000      	b.n	8005e0a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005e08:	68fb      	ldr	r3, [r7, #12]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e12 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <osDelay+0x16>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	e000      	b.n	8005e2a <osDelay+0x18>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f001 fab8 	bl	80073a0 <vTaskDelay>
  
  return osOK;
 8005e30:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b086      	sub	sp, #24
 8005e3e:	af02      	add	r7, sp, #8
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d010      	beq.n	8005e6e <osSemaphoreCreate+0x34>
    if (count == 1) {
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d10b      	bne.n	8005e6a <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	2303      	movs	r3, #3
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2100      	movs	r1, #0
 8005e60:	2001      	movs	r0, #1
 8005e62:	f000 fa9b 	bl	800639c <xQueueGenericCreateStatic>
 8005e66:	4603      	mov	r3, r0
 8005e68:	e016      	b.n	8005e98 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	e014      	b.n	8005e98 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d110      	bne.n	8005e96 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8005e74:	2203      	movs	r2, #3
 8005e76:	2100      	movs	r1, #0
 8005e78:	2001      	movs	r0, #1
 8005e7a:	f000 fb02 	bl	8006482 <xQueueGenericCreate>
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <osSemaphoreCreate+0x58>
 8005e86:	2300      	movs	r3, #0
 8005e88:	2200      	movs	r2, #0
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f000 fb57 	bl	8006540 <xQueueGenericSend>
      return sema;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	e000      	b.n	8005e98 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005e96:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005eb4:	2380      	movs	r3, #128	; 0x80
 8005eb6:	e03a      	b.n	8005f2e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec2:	d103      	bne.n	8005ecc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	e009      	b.n	8005ee0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d006      	beq.n	8005ee0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <osSemaphoreWait+0x40>
      ticks = 1;
 8005edc:	2301      	movs	r3, #1
 8005ede:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005ee0:	f7ff ff32 	bl	8005d48 <inHandlerMode>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d017      	beq.n	8005f1a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005eea:	f107 0308 	add.w	r3, r7, #8
 8005eee:	461a      	mov	r2, r3
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 ff20 	bl	8006d38 <xQueueReceiveFromISR>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d001      	beq.n	8005f02 <osSemaphoreWait+0x62>
      return osErrorOS;
 8005efe:	23ff      	movs	r3, #255	; 0xff
 8005f00:	e015      	b.n	8005f2e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d011      	beq.n	8005f2c <osSemaphoreWait+0x8c>
 8005f08:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <osSemaphoreWait+0x98>)
 8005f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	e008      	b.n	8005f2c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005f1a:	68f9      	ldr	r1, [r7, #12]
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fe03 	bl	8006b28 <xQueueSemaphoreTake>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d001      	beq.n	8005f2c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005f28:	23ff      	movs	r3, #255	; 0xff
 8005f2a:	e000      	b.n	8005f2e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	e000ed04 	.word	0xe000ed04

08005f3c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005f4c:	f7ff fefc 	bl	8005d48 <inHandlerMode>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d016      	beq.n	8005f84 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005f56:	f107 0308 	add.w	r3, r7, #8
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fc7d 	bl	800685c <xQueueGiveFromISR>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d001      	beq.n	8005f6c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005f68:	23ff      	movs	r3, #255	; 0xff
 8005f6a:	e017      	b.n	8005f9c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d013      	beq.n	8005f9a <osSemaphoreRelease+0x5e>
 8005f72:	4b0c      	ldr	r3, [pc, #48]	; (8005fa4 <osSemaphoreRelease+0x68>)
 8005f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	e00a      	b.n	8005f9a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005f84:	2300      	movs	r3, #0
 8005f86:	2200      	movs	r2, #0
 8005f88:	2100      	movs	r1, #0
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fad8 	bl	8006540 <xQueueGenericSend>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d001      	beq.n	8005f9a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005f96:	23ff      	movs	r3, #255	; 0xff
 8005f98:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	e000ed04 	.word	0xe000ed04

08005fa8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005fa8:	b590      	push	{r4, r7, lr}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af02      	add	r7, sp, #8
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d012      	beq.n	8005fe0 <osMessageCreate+0x38>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00e      	beq.n	8005fe0 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6818      	ldr	r0, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6859      	ldr	r1, [r3, #4]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689a      	ldr	r2, [r3, #8]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68dc      	ldr	r4, [r3, #12]
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	4623      	mov	r3, r4
 8005fd8:	f000 f9e0 	bl	800639c <xQueueGenericCreateStatic>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	e008      	b.n	8005ff2 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6818      	ldr	r0, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	4619      	mov	r1, r3
 8005fec:	f000 fa49 	bl	8006482 <xQueueGenericCreate>
 8005ff0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd90      	pop	{r4, r7, pc}
	...

08005ffc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006008:	2300      	movs	r3, #0
 800600a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <osMessagePut+0x1e>
    ticks = 1;
 8006016:	2301      	movs	r3, #1
 8006018:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800601a:	f7ff fe95 	bl	8005d48 <inHandlerMode>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d018      	beq.n	8006056 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006024:	f107 0210 	add.w	r2, r7, #16
 8006028:	f107 0108 	add.w	r1, r7, #8
 800602c:	2300      	movs	r3, #0
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f000 fb80 	bl	8006734 <xQueueGenericSendFromISR>
 8006034:	4603      	mov	r3, r0
 8006036:	2b01      	cmp	r3, #1
 8006038:	d001      	beq.n	800603e <osMessagePut+0x42>
      return osErrorOS;
 800603a:	23ff      	movs	r3, #255	; 0xff
 800603c:	e018      	b.n	8006070 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d014      	beq.n	800606e <osMessagePut+0x72>
 8006044:	4b0c      	ldr	r3, [pc, #48]	; (8006078 <osMessagePut+0x7c>)
 8006046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	e00b      	b.n	800606e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006056:	f107 0108 	add.w	r1, r7, #8
 800605a:	2300      	movs	r3, #0
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 fa6e 	bl	8006540 <xQueueGenericSend>
 8006064:	4603      	mov	r3, r0
 8006066:	2b01      	cmp	r3, #1
 8006068:	d001      	beq.n	800606e <osMessagePut+0x72>
      return osErrorOS;
 800606a:	23ff      	movs	r3, #255	; 0xff
 800606c:	e000      	b.n	8006070 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3718      	adds	r7, #24
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	e000ed04 	.word	0xe000ed04

0800607c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800607c:	b590      	push	{r4, r7, lr}
 800607e:	b08b      	sub	sp, #44	; 0x2c
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800608c:	2300      	movs	r3, #0
 800608e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10a      	bne.n	80060ac <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006096:	2380      	movs	r3, #128	; 0x80
 8006098:	617b      	str	r3, [r7, #20]
    return event;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	461c      	mov	r4, r3
 800609e:	f107 0314 	add.w	r3, r7, #20
 80060a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80060a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80060aa:	e054      	b.n	8006156 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80060ac:	2300      	movs	r3, #0
 80060ae:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80060b0:	2300      	movs	r3, #0
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ba:	d103      	bne.n	80060c4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80060bc:	f04f 33ff 	mov.w	r3, #4294967295
 80060c0:	627b      	str	r3, [r7, #36]	; 0x24
 80060c2:	e009      	b.n	80060d8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d006      	beq.n	80060d8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d101      	bne.n	80060d8 <osMessageGet+0x5c>
      ticks = 1;
 80060d4:	2301      	movs	r3, #1
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80060d8:	f7ff fe36 	bl	8005d48 <inHandlerMode>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d01c      	beq.n	800611c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80060e2:	f107 0220 	add.w	r2, r7, #32
 80060e6:	f107 0314 	add.w	r3, r7, #20
 80060ea:	3304      	adds	r3, #4
 80060ec:	4619      	mov	r1, r3
 80060ee:	68b8      	ldr	r0, [r7, #8]
 80060f0:	f000 fe22 	bl	8006d38 <xQueueReceiveFromISR>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d102      	bne.n	8006100 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80060fa:	2310      	movs	r3, #16
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	e001      	b.n	8006104 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006100:	2300      	movs	r3, #0
 8006102:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d01d      	beq.n	8006146 <osMessageGet+0xca>
 800610a:	4b15      	ldr	r3, [pc, #84]	; (8006160 <osMessageGet+0xe4>)
 800610c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	e014      	b.n	8006146 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800611c:	f107 0314 	add.w	r3, r7, #20
 8006120:	3304      	adds	r3, #4
 8006122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006124:	4619      	mov	r1, r3
 8006126:	68b8      	ldr	r0, [r7, #8]
 8006128:	f000 fc22 	bl	8006970 <xQueueReceive>
 800612c:	4603      	mov	r3, r0
 800612e:	2b01      	cmp	r3, #1
 8006130:	d102      	bne.n	8006138 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006132:	2310      	movs	r3, #16
 8006134:	617b      	str	r3, [r7, #20]
 8006136:	e006      	b.n	8006146 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <osMessageGet+0xc6>
 800613e:	2300      	movs	r3, #0
 8006140:	e000      	b.n	8006144 <osMessageGet+0xc8>
 8006142:	2340      	movs	r3, #64	; 0x40
 8006144:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	461c      	mov	r4, r3
 800614a:	f107 0314 	add.w	r3, r7, #20
 800614e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006152:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	372c      	adds	r7, #44	; 0x2c
 800615a:	46bd      	mov	sp, r7
 800615c:	bd90      	pop	{r4, r7, pc}
 800615e:	bf00      	nop
 8006160:	e000ed04 	.word	0xe000ed04

08006164 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f103 0208 	add.w	r2, r3, #8
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f04f 32ff 	mov.w	r2, #4294967295
 800617c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f103 0208 	add.w	r2, r3, #8
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f103 0208 	add.w	r2, r3, #8
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061be:	b480      	push	{r7}
 80061c0:	b085      	sub	sp, #20
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	1c5a      	adds	r2, r3, #1
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	601a      	str	r2, [r3, #0]
}
 80061fa:	bf00      	nop
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006206:	b480      	push	{r7}
 8006208:	b085      	sub	sp, #20
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621c:	d103      	bne.n	8006226 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	e00c      	b.n	8006240 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	3308      	adds	r3, #8
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	e002      	b.n	8006234 <vListInsert+0x2e>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	429a      	cmp	r2, r3
 800623e:	d2f6      	bcs.n	800622e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	601a      	str	r2, [r3, #0]
}
 800626c:	bf00      	nop
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	6892      	ldr	r2, [r2, #8]
 800628e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	6852      	ldr	r2, [r2, #4]
 8006298:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d103      	bne.n	80062ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	1e5a      	subs	r2, r3, #1
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d109      	bne.n	80062f4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	60bb      	str	r3, [r7, #8]
 80062f2:	e7fe      	b.n	80062f2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80062f4:	f001 ffda 	bl	80082ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006300:	68f9      	ldr	r1, [r7, #12]
 8006302:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006304:	fb01 f303 	mul.w	r3, r1, r3
 8006308:	441a      	add	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006324:	3b01      	subs	r3, #1
 8006326:	68f9      	ldr	r1, [r7, #12]
 8006328:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800632a:	fb01 f303 	mul.w	r3, r1, r3
 800632e:	441a      	add	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	22ff      	movs	r2, #255	; 0xff
 8006338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	22ff      	movs	r2, #255	; 0xff
 8006340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d114      	bne.n	8006374 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d01a      	beq.n	8006388 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3310      	adds	r3, #16
 8006356:	4618      	mov	r0, r3
 8006358:	f001 fa94 	bl	8007884 <xTaskRemoveFromEventList>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d012      	beq.n	8006388 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006362:	4b0d      	ldr	r3, [pc, #52]	; (8006398 <xQueueGenericReset+0xcc>)
 8006364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	e009      	b.n	8006388 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3310      	adds	r3, #16
 8006378:	4618      	mov	r0, r3
 800637a:	f7ff fef3 	bl	8006164 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3324      	adds	r3, #36	; 0x24
 8006382:	4618      	mov	r0, r3
 8006384:	f7ff feee 	bl	8006164 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006388:	f001 ffbe 	bl	8008308 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800638c:	2301      	movs	r3, #1
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08e      	sub	sp, #56	; 0x38
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d109      	bne.n	80063c4 <xQueueGenericCreateStatic+0x28>
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80063c2:	e7fe      	b.n	80063c2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d109      	bne.n	80063de <xQueueGenericCreateStatic+0x42>
 80063ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	627b      	str	r3, [r7, #36]	; 0x24
 80063dc:	e7fe      	b.n	80063dc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <xQueueGenericCreateStatic+0x4e>
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <xQueueGenericCreateStatic+0x52>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e000      	b.n	80063f0 <xQueueGenericCreateStatic+0x54>
 80063ee:	2300      	movs	r3, #0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d109      	bne.n	8006408 <xQueueGenericCreateStatic+0x6c>
 80063f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	623b      	str	r3, [r7, #32]
 8006406:	e7fe      	b.n	8006406 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d102      	bne.n	8006414 <xQueueGenericCreateStatic+0x78>
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <xQueueGenericCreateStatic+0x7c>
 8006414:	2301      	movs	r3, #1
 8006416:	e000      	b.n	800641a <xQueueGenericCreateStatic+0x7e>
 8006418:	2300      	movs	r3, #0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d109      	bne.n	8006432 <xQueueGenericCreateStatic+0x96>
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	61fb      	str	r3, [r7, #28]
 8006430:	e7fe      	b.n	8006430 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006432:	2348      	movs	r3, #72	; 0x48
 8006434:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2b48      	cmp	r3, #72	; 0x48
 800643a:	d009      	beq.n	8006450 <xQueueGenericCreateStatic+0xb4>
 800643c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	61bb      	str	r3, [r7, #24]
 800644e:	e7fe      	b.n	800644e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006450:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00d      	beq.n	8006478 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800645c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006464:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	4613      	mov	r3, r2
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	68b9      	ldr	r1, [r7, #8]
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 f844 	bl	8006500 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800647a:	4618      	mov	r0, r3
 800647c:	3730      	adds	r7, #48	; 0x30
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006482:	b580      	push	{r7, lr}
 8006484:	b08a      	sub	sp, #40	; 0x28
 8006486:	af02      	add	r7, sp, #8
 8006488:	60f8      	str	r0, [r7, #12]
 800648a:	60b9      	str	r1, [r7, #8]
 800648c:	4613      	mov	r3, r2
 800648e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d109      	bne.n	80064aa <xQueueGenericCreate+0x28>
 8006496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	613b      	str	r3, [r7, #16]
 80064a8:	e7fe      	b.n	80064a8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d102      	bne.n	80064b6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80064b0:	2300      	movs	r3, #0
 80064b2:	61fb      	str	r3, [r7, #28]
 80064b4:	e004      	b.n	80064c0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	fb02 f303 	mul.w	r3, r2, r3
 80064be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	3348      	adds	r3, #72	; 0x48
 80064c4:	4618      	mov	r0, r3
 80064c6:	f002 f80b 	bl	80084e0 <pvPortMalloc>
 80064ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d011      	beq.n	80064f6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	3348      	adds	r3, #72	; 0x48
 80064da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064e4:	79fa      	ldrb	r2, [r7, #7]
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	4613      	mov	r3, r2
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	68b9      	ldr	r1, [r7, #8]
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 f805 	bl	8006500 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80064f6:	69bb      	ldr	r3, [r7, #24]
	}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3720      	adds	r7, #32
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d103      	bne.n	800651c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	e002      	b.n	8006522 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800652e:	2101      	movs	r1, #1
 8006530:	69b8      	ldr	r0, [r7, #24]
 8006532:	f7ff fecb 	bl	80062cc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006536:	bf00      	nop
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
	...

08006540 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b08e      	sub	sp, #56	; 0x38
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
 800654c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800654e:	2300      	movs	r3, #0
 8006550:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006558:	2b00      	cmp	r3, #0
 800655a:	d109      	bne.n	8006570 <xQueueGenericSend+0x30>
 800655c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	62bb      	str	r3, [r7, #40]	; 0x28
 800656e:	e7fe      	b.n	800656e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d103      	bne.n	800657e <xQueueGenericSend+0x3e>
 8006576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <xQueueGenericSend+0x42>
 800657e:	2301      	movs	r3, #1
 8006580:	e000      	b.n	8006584 <xQueueGenericSend+0x44>
 8006582:	2300      	movs	r3, #0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d109      	bne.n	800659c <xQueueGenericSend+0x5c>
 8006588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658c:	f383 8811 	msr	BASEPRI, r3
 8006590:	f3bf 8f6f 	isb	sy
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
 800659a:	e7fe      	b.n	800659a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d103      	bne.n	80065aa <xQueueGenericSend+0x6a>
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d101      	bne.n	80065ae <xQueueGenericSend+0x6e>
 80065aa:	2301      	movs	r3, #1
 80065ac:	e000      	b.n	80065b0 <xQueueGenericSend+0x70>
 80065ae:	2300      	movs	r3, #0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d109      	bne.n	80065c8 <xQueueGenericSend+0x88>
 80065b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	623b      	str	r3, [r7, #32]
 80065c6:	e7fe      	b.n	80065c6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065c8:	f001 fb12 	bl	8007bf0 <xTaskGetSchedulerState>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d102      	bne.n	80065d8 <xQueueGenericSend+0x98>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <xQueueGenericSend+0x9c>
 80065d8:	2301      	movs	r3, #1
 80065da:	e000      	b.n	80065de <xQueueGenericSend+0x9e>
 80065dc:	2300      	movs	r3, #0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d109      	bne.n	80065f6 <xQueueGenericSend+0xb6>
 80065e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	61fb      	str	r3, [r7, #28]
 80065f4:	e7fe      	b.n	80065f4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065f6:	f001 fe59 	bl	80082ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006602:	429a      	cmp	r2, r3
 8006604:	d302      	bcc.n	800660c <xQueueGenericSend+0xcc>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2b02      	cmp	r3, #2
 800660a:	d129      	bne.n	8006660 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	68b9      	ldr	r1, [r7, #8]
 8006610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006612:	f000 fc26 	bl	8006e62 <prvCopyDataToQueue>
 8006616:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	2b00      	cmp	r3, #0
 800661e:	d010      	beq.n	8006642 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	3324      	adds	r3, #36	; 0x24
 8006624:	4618      	mov	r0, r3
 8006626:	f001 f92d 	bl	8007884 <xTaskRemoveFromEventList>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d013      	beq.n	8006658 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006630:	4b3f      	ldr	r3, [pc, #252]	; (8006730 <xQueueGenericSend+0x1f0>)
 8006632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006636:	601a      	str	r2, [r3, #0]
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	e00a      	b.n	8006658 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d007      	beq.n	8006658 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006648:	4b39      	ldr	r3, [pc, #228]	; (8006730 <xQueueGenericSend+0x1f0>)
 800664a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006658:	f001 fe56 	bl	8008308 <vPortExitCritical>
				return pdPASS;
 800665c:	2301      	movs	r3, #1
 800665e:	e063      	b.n	8006728 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d103      	bne.n	800666e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006666:	f001 fe4f 	bl	8008308 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800666a:	2300      	movs	r3, #0
 800666c:	e05c      	b.n	8006728 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800666e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006670:	2b00      	cmp	r3, #0
 8006672:	d106      	bne.n	8006682 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006674:	f107 0314 	add.w	r3, r7, #20
 8006678:	4618      	mov	r0, r3
 800667a:	f001 f965 	bl	8007948 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800667e:	2301      	movs	r3, #1
 8006680:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006682:	f001 fe41 	bl	8008308 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006686:	f000 ff1d 	bl	80074c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800668a:	f001 fe0f 	bl	80082ac <vPortEnterCritical>
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006694:	b25b      	sxtb	r3, r3
 8006696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669a:	d103      	bne.n	80066a4 <xQueueGenericSend+0x164>
 800669c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066aa:	b25b      	sxtb	r3, r3
 80066ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b0:	d103      	bne.n	80066ba <xQueueGenericSend+0x17a>
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066ba:	f001 fe25 	bl	8008308 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066be:	1d3a      	adds	r2, r7, #4
 80066c0:	f107 0314 	add.w	r3, r7, #20
 80066c4:	4611      	mov	r1, r2
 80066c6:	4618      	mov	r0, r3
 80066c8:	f001 f954 	bl	8007974 <xTaskCheckForTimeOut>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d124      	bne.n	800671c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80066d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066d4:	f000 fcbd 	bl	8007052 <prvIsQueueFull>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d018      	beq.n	8006710 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	3310      	adds	r3, #16
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	4611      	mov	r1, r2
 80066e6:	4618      	mov	r0, r3
 80066e8:	f001 f8a8 	bl	800783c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80066ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066ee:	f000 fc48 	bl	8006f82 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066f2:	f000 fef5 	bl	80074e0 <xTaskResumeAll>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f47f af7c 	bne.w	80065f6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80066fe:	4b0c      	ldr	r3, [pc, #48]	; (8006730 <xQueueGenericSend+0x1f0>)
 8006700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	e772      	b.n	80065f6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006712:	f000 fc36 	bl	8006f82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006716:	f000 fee3 	bl	80074e0 <xTaskResumeAll>
 800671a:	e76c      	b.n	80065f6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800671c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800671e:	f000 fc30 	bl	8006f82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006722:	f000 fedd 	bl	80074e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006726:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006728:	4618      	mov	r0, r3
 800672a:	3738      	adds	r7, #56	; 0x38
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	e000ed04 	.word	0xe000ed04

08006734 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b08e      	sub	sp, #56	; 0x38
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006748:	2b00      	cmp	r3, #0
 800674a:	d109      	bne.n	8006760 <xQueueGenericSendFromISR+0x2c>
 800674c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	627b      	str	r3, [r7, #36]	; 0x24
 800675e:	e7fe      	b.n	800675e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d103      	bne.n	800676e <xQueueGenericSendFromISR+0x3a>
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <xQueueGenericSendFromISR+0x3e>
 800676e:	2301      	movs	r3, #1
 8006770:	e000      	b.n	8006774 <xQueueGenericSendFromISR+0x40>
 8006772:	2300      	movs	r3, #0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d109      	bne.n	800678c <xQueueGenericSendFromISR+0x58>
 8006778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	623b      	str	r3, [r7, #32]
 800678a:	e7fe      	b.n	800678a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b02      	cmp	r3, #2
 8006790:	d103      	bne.n	800679a <xQueueGenericSendFromISR+0x66>
 8006792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006796:	2b01      	cmp	r3, #1
 8006798:	d101      	bne.n	800679e <xQueueGenericSendFromISR+0x6a>
 800679a:	2301      	movs	r3, #1
 800679c:	e000      	b.n	80067a0 <xQueueGenericSendFromISR+0x6c>
 800679e:	2300      	movs	r3, #0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d109      	bne.n	80067b8 <xQueueGenericSendFromISR+0x84>
 80067a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a8:	f383 8811 	msr	BASEPRI, r3
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	61fb      	str	r3, [r7, #28]
 80067b6:	e7fe      	b.n	80067b6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067b8:	f001 fe54 	bl	8008464 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80067bc:	f3ef 8211 	mrs	r2, BASEPRI
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	61ba      	str	r2, [r7, #24]
 80067d2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80067d4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d302      	bcc.n	80067ea <xQueueGenericSendFromISR+0xb6>
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d12c      	bne.n	8006844 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	68b9      	ldr	r1, [r7, #8]
 80067f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067fa:	f000 fb32 	bl	8006e62 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067fe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006806:	d112      	bne.n	800682e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	2b00      	cmp	r3, #0
 800680e:	d016      	beq.n	800683e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006812:	3324      	adds	r3, #36	; 0x24
 8006814:	4618      	mov	r0, r3
 8006816:	f001 f835 	bl	8007884 <xTaskRemoveFromEventList>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00e      	beq.n	800683e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00b      	beq.n	800683e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	e007      	b.n	800683e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800682e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006832:	3301      	adds	r3, #1
 8006834:	b2db      	uxtb	r3, r3
 8006836:	b25a      	sxtb	r2, r3
 8006838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800683e:	2301      	movs	r3, #1
 8006840:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006842:	e001      	b.n	8006848 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006844:	2300      	movs	r3, #0
 8006846:	637b      	str	r3, [r7, #52]	; 0x34
 8006848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006854:	4618      	mov	r0, r3
 8006856:	3738      	adds	r7, #56	; 0x38
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b08e      	sub	sp, #56	; 0x38
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800686a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686c:	2b00      	cmp	r3, #0
 800686e:	d109      	bne.n	8006884 <xQueueGiveFromISR+0x28>
	__asm volatile
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	623b      	str	r3, [r7, #32]
 8006882:	e7fe      	b.n	8006882 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006888:	2b00      	cmp	r3, #0
 800688a:	d009      	beq.n	80068a0 <xQueueGiveFromISR+0x44>
 800688c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	61fb      	str	r3, [r7, #28]
 800689e:	e7fe      	b.n	800689e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80068a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d103      	bne.n	80068b0 <xQueueGiveFromISR+0x54>
 80068a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <xQueueGiveFromISR+0x58>
 80068b0:	2301      	movs	r3, #1
 80068b2:	e000      	b.n	80068b6 <xQueueGiveFromISR+0x5a>
 80068b4:	2300      	movs	r3, #0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d109      	bne.n	80068ce <xQueueGiveFromISR+0x72>
 80068ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	61bb      	str	r3, [r7, #24]
 80068cc:	e7fe      	b.n	80068cc <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068ce:	f001 fdc9 	bl	8008464 <vPortValidateInterruptPriority>
	__asm volatile
 80068d2:	f3ef 8211 	mrs	r2, BASEPRI
 80068d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	617a      	str	r2, [r7, #20]
 80068e8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80068ea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d22b      	bcs.n	8006956 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690a:	1c5a      	adds	r2, r3, #1
 800690c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006910:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006918:	d112      	bne.n	8006940 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	2b00      	cmp	r3, #0
 8006920:	d016      	beq.n	8006950 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006924:	3324      	adds	r3, #36	; 0x24
 8006926:	4618      	mov	r0, r3
 8006928:	f000 ffac 	bl	8007884 <xTaskRemoveFromEventList>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00e      	beq.n	8006950 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00b      	beq.n	8006950 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2201      	movs	r2, #1
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	e007      	b.n	8006950 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006944:	3301      	adds	r3, #1
 8006946:	b2db      	uxtb	r3, r3
 8006948:	b25a      	sxtb	r2, r3
 800694a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006950:	2301      	movs	r3, #1
 8006952:	637b      	str	r3, [r7, #52]	; 0x34
 8006954:	e001      	b.n	800695a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006956:	2300      	movs	r3, #0
 8006958:	637b      	str	r3, [r7, #52]	; 0x34
 800695a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006966:	4618      	mov	r0, r3
 8006968:	3738      	adds	r7, #56	; 0x38
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
	...

08006970 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08c      	sub	sp, #48	; 0x30
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800697c:	2300      	movs	r3, #0
 800697e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006986:	2b00      	cmp	r3, #0
 8006988:	d109      	bne.n	800699e <xQueueReceive+0x2e>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	623b      	str	r3, [r7, #32]
 800699c:	e7fe      	b.n	800699c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d103      	bne.n	80069ac <xQueueReceive+0x3c>
 80069a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <xQueueReceive+0x40>
 80069ac:	2301      	movs	r3, #1
 80069ae:	e000      	b.n	80069b2 <xQueueReceive+0x42>
 80069b0:	2300      	movs	r3, #0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d109      	bne.n	80069ca <xQueueReceive+0x5a>
 80069b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ba:	f383 8811 	msr	BASEPRI, r3
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	61fb      	str	r3, [r7, #28]
 80069c8:	e7fe      	b.n	80069c8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069ca:	f001 f911 	bl	8007bf0 <xTaskGetSchedulerState>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d102      	bne.n	80069da <xQueueReceive+0x6a>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <xQueueReceive+0x6e>
 80069da:	2301      	movs	r3, #1
 80069dc:	e000      	b.n	80069e0 <xQueueReceive+0x70>
 80069de:	2300      	movs	r3, #0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d109      	bne.n	80069f8 <xQueueReceive+0x88>
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	61bb      	str	r3, [r7, #24]
 80069f6:	e7fe      	b.n	80069f6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069f8:	f001 fc58 	bl	80082ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d01f      	beq.n	8006a48 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a08:	68b9      	ldr	r1, [r7, #8]
 8006a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a0c:	f000 fa93 	bl	8006f36 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	1e5a      	subs	r2, r3, #1
 8006a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a16:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00f      	beq.n	8006a40 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	3310      	adds	r3, #16
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 ff2d 	bl	8007884 <xTaskRemoveFromEventList>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d007      	beq.n	8006a40 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a30:	4b3c      	ldr	r3, [pc, #240]	; (8006b24 <xQueueReceive+0x1b4>)
 8006a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a40:	f001 fc62 	bl	8008308 <vPortExitCritical>
				return pdPASS;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e069      	b.n	8006b1c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d103      	bne.n	8006a56 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a4e:	f001 fc5b 	bl	8008308 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a52:	2300      	movs	r3, #0
 8006a54:	e062      	b.n	8006b1c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d106      	bne.n	8006a6a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a5c:	f107 0310 	add.w	r3, r7, #16
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 ff71 	bl	8007948 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a66:	2301      	movs	r3, #1
 8006a68:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a6a:	f001 fc4d 	bl	8008308 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a6e:	f000 fd29 	bl	80074c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a72:	f001 fc1b 	bl	80082ac <vPortEnterCritical>
 8006a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a7c:	b25b      	sxtb	r3, r3
 8006a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a82:	d103      	bne.n	8006a8c <xQueueReceive+0x11c>
 8006a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a92:	b25b      	sxtb	r3, r3
 8006a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a98:	d103      	bne.n	8006aa2 <xQueueReceive+0x132>
 8006a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006aa2:	f001 fc31 	bl	8008308 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006aa6:	1d3a      	adds	r2, r7, #4
 8006aa8:	f107 0310 	add.w	r3, r7, #16
 8006aac:	4611      	mov	r1, r2
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 ff60 	bl	8007974 <xTaskCheckForTimeOut>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d123      	bne.n	8006b02 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006aba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006abc:	f000 fab3 	bl	8007026 <prvIsQueueEmpty>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d017      	beq.n	8006af6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	3324      	adds	r3, #36	; 0x24
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	4611      	mov	r1, r2
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 feb4 	bl	800783c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ad6:	f000 fa54 	bl	8006f82 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ada:	f000 fd01 	bl	80074e0 <xTaskResumeAll>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d189      	bne.n	80069f8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006ae4:	4b0f      	ldr	r3, [pc, #60]	; (8006b24 <xQueueReceive+0x1b4>)
 8006ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	f3bf 8f6f 	isb	sy
 8006af4:	e780      	b.n	80069f8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006af8:	f000 fa43 	bl	8006f82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006afc:	f000 fcf0 	bl	80074e0 <xTaskResumeAll>
 8006b00:	e77a      	b.n	80069f8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b04:	f000 fa3d 	bl	8006f82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b08:	f000 fcea 	bl	80074e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b0e:	f000 fa8a 	bl	8007026 <prvIsQueueEmpty>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f43f af6f 	beq.w	80069f8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b1a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3730      	adds	r7, #48	; 0x30
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	e000ed04 	.word	0xe000ed04

08006b28 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08e      	sub	sp, #56	; 0x38
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b32:	2300      	movs	r3, #0
 8006b34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d109      	bne.n	8006b58 <xQueueSemaphoreTake+0x30>
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	623b      	str	r3, [r7, #32]
 8006b56:	e7fe      	b.n	8006b56 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d009      	beq.n	8006b74 <xQueueSemaphoreTake+0x4c>
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	61fb      	str	r3, [r7, #28]
 8006b72:	e7fe      	b.n	8006b72 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b74:	f001 f83c 	bl	8007bf0 <xTaskGetSchedulerState>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d102      	bne.n	8006b84 <xQueueSemaphoreTake+0x5c>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <xQueueSemaphoreTake+0x60>
 8006b84:	2301      	movs	r3, #1
 8006b86:	e000      	b.n	8006b8a <xQueueSemaphoreTake+0x62>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d109      	bne.n	8006ba2 <xQueueSemaphoreTake+0x7a>
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	61bb      	str	r3, [r7, #24]
 8006ba0:	e7fe      	b.n	8006ba0 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ba2:	f001 fb83 	bl	80082ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006baa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d024      	beq.n	8006bfc <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb4:	1e5a      	subs	r2, r3, #1
 8006bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d104      	bne.n	8006bcc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006bc2:	f001 f9cf 	bl	8007f64 <pvTaskIncrementMutexHeldCount>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00f      	beq.n	8006bf4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd6:	3310      	adds	r3, #16
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 fe53 	bl	8007884 <xTaskRemoveFromEventList>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d007      	beq.n	8006bf4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006be4:	4b53      	ldr	r3, [pc, #332]	; (8006d34 <xQueueSemaphoreTake+0x20c>)
 8006be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006bf4:	f001 fb88 	bl	8008308 <vPortExitCritical>
				return pdPASS;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e096      	b.n	8006d2a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d110      	bne.n	8006c24 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d009      	beq.n	8006c1c <xQueueSemaphoreTake+0xf4>
 8006c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	617b      	str	r3, [r7, #20]
 8006c1a:	e7fe      	b.n	8006c1a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006c1c:	f001 fb74 	bl	8008308 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c20:	2300      	movs	r3, #0
 8006c22:	e082      	b.n	8006d2a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d106      	bne.n	8006c38 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c2a:	f107 030c 	add.w	r3, r7, #12
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 fe8a 	bl	8007948 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c34:	2301      	movs	r3, #1
 8006c36:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c38:	f001 fb66 	bl	8008308 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c3c:	f000 fc42 	bl	80074c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c40:	f001 fb34 	bl	80082ac <vPortEnterCritical>
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c4a:	b25b      	sxtb	r3, r3
 8006c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c50:	d103      	bne.n	8006c5a <xQueueSemaphoreTake+0x132>
 8006c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c60:	b25b      	sxtb	r3, r3
 8006c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c66:	d103      	bne.n	8006c70 <xQueueSemaphoreTake+0x148>
 8006c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c70:	f001 fb4a 	bl	8008308 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c74:	463a      	mov	r2, r7
 8006c76:	f107 030c 	add.w	r3, r7, #12
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 fe79 	bl	8007974 <xTaskCheckForTimeOut>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d132      	bne.n	8006cee <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c8a:	f000 f9cc 	bl	8007026 <prvIsQueueEmpty>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d026      	beq.n	8006ce2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d109      	bne.n	8006cb0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8006c9c:	f001 fb06 	bl	80082ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 ffc1 	bl	8007c2c <xTaskPriorityInherit>
 8006caa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006cac:	f001 fb2c 	bl	8008308 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb2:	3324      	adds	r3, #36	; 0x24
 8006cb4:	683a      	ldr	r2, [r7, #0]
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 fdbf 	bl	800783c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cc0:	f000 f95f 	bl	8006f82 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cc4:	f000 fc0c 	bl	80074e0 <xTaskResumeAll>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f47f af69 	bne.w	8006ba2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8006cd0:	4b18      	ldr	r3, [pc, #96]	; (8006d34 <xQueueSemaphoreTake+0x20c>)
 8006cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	e75f      	b.n	8006ba2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006ce2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ce4:	f000 f94d 	bl	8006f82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ce8:	f000 fbfa 	bl	80074e0 <xTaskResumeAll>
 8006cec:	e759      	b.n	8006ba2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006cee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cf0:	f000 f947 	bl	8006f82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cf4:	f000 fbf4 	bl	80074e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cfa:	f000 f994 	bl	8007026 <prvIsQueueEmpty>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f43f af4e 	beq.w	8006ba2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00d      	beq.n	8006d28 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006d0c:	f001 face 	bl	80082ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006d10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d12:	f000 f88e 	bl	8006e32 <prvGetDisinheritPriorityAfterTimeout>
 8006d16:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f001 f888 	bl	8007e34 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006d24:	f001 faf0 	bl	8008308 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3738      	adds	r7, #56	; 0x38
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	e000ed04 	.word	0xe000ed04

08006d38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08e      	sub	sp, #56	; 0x38
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d109      	bne.n	8006d62 <xQueueReceiveFromISR+0x2a>
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	623b      	str	r3, [r7, #32]
 8006d60:	e7fe      	b.n	8006d60 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d103      	bne.n	8006d70 <xQueueReceiveFromISR+0x38>
 8006d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <xQueueReceiveFromISR+0x3c>
 8006d70:	2301      	movs	r3, #1
 8006d72:	e000      	b.n	8006d76 <xQueueReceiveFromISR+0x3e>
 8006d74:	2300      	movs	r3, #0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d109      	bne.n	8006d8e <xQueueReceiveFromISR+0x56>
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	61fb      	str	r3, [r7, #28]
 8006d8c:	e7fe      	b.n	8006d8c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d8e:	f001 fb69 	bl	8008464 <vPortValidateInterruptPriority>
	__asm volatile
 8006d92:	f3ef 8211 	mrs	r2, BASEPRI
 8006d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	61ba      	str	r2, [r7, #24]
 8006da8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006daa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006dac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d02f      	beq.n	8006e1a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006dc4:	68b9      	ldr	r1, [r7, #8]
 8006dc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dc8:	f000 f8b5 	bl	8006f36 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dce:	1e5a      	subs	r2, r3, #1
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006dd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ddc:	d112      	bne.n	8006e04 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d016      	beq.n	8006e14 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	3310      	adds	r3, #16
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 fd4a 	bl	8007884 <xTaskRemoveFromEventList>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00e      	beq.n	8006e14 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00b      	beq.n	8006e14 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	e007      	b.n	8006e14 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e08:	3301      	adds	r3, #1
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	b25a      	sxtb	r2, r3
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006e14:	2301      	movs	r3, #1
 8006e16:	637b      	str	r3, [r7, #52]	; 0x34
 8006e18:	e001      	b.n	8006e1e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e20:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3738      	adds	r7, #56	; 0x38
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006e32:	b480      	push	{r7}
 8006e34:	b085      	sub	sp, #20
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d006      	beq.n	8006e50 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f1c3 0307 	rsb	r3, r3, #7
 8006e4c:	60fb      	str	r3, [r7, #12]
 8006e4e:	e001      	b.n	8006e54 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006e50:	2300      	movs	r3, #0
 8006e52:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006e54:	68fb      	ldr	r3, [r7, #12]
	}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b086      	sub	sp, #24
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	60f8      	str	r0, [r7, #12]
 8006e6a:	60b9      	str	r1, [r7, #8]
 8006e6c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e76:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10d      	bne.n	8006e9c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d14d      	bne.n	8006f24 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 ff4d 	bl	8007d2c <xTaskPriorityDisinherit>
 8006e92:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	609a      	str	r2, [r3, #8]
 8006e9a:	e043      	b.n	8006f24 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d119      	bne.n	8006ed6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6858      	ldr	r0, [r3, #4]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eaa:	461a      	mov	r2, r3
 8006eac:	68b9      	ldr	r1, [r7, #8]
 8006eae:	f001 fd11 	bl	80088d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eba:	441a      	add	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d32b      	bcc.n	8006f24 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	605a      	str	r2, [r3, #4]
 8006ed4:	e026      	b.n	8006f24 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	68d8      	ldr	r0, [r3, #12]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ede:	461a      	mov	r2, r3
 8006ee0:	68b9      	ldr	r1, [r7, #8]
 8006ee2:	f001 fcf7 	bl	80088d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eee:	425b      	negs	r3, r3
 8006ef0:	441a      	add	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	68da      	ldr	r2, [r3, #12]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d207      	bcs.n	8006f12 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	689a      	ldr	r2, [r3, #8]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0a:	425b      	negs	r3, r3
 8006f0c:	441a      	add	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d105      	bne.n	8006f24 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	3b01      	subs	r3, #1
 8006f22:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	1c5a      	adds	r2, r3, #1
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f2c:	697b      	ldr	r3, [r7, #20]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3718      	adds	r7, #24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b082      	sub	sp, #8
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d018      	beq.n	8006f7a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68da      	ldr	r2, [r3, #12]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f50:	441a      	add	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d303      	bcc.n	8006f6a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68d9      	ldr	r1, [r3, #12]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	461a      	mov	r2, r3
 8006f74:	6838      	ldr	r0, [r7, #0]
 8006f76:	f001 fcad 	bl	80088d4 <memcpy>
	}
}
 8006f7a:	bf00      	nop
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f8a:	f001 f98f 	bl	80082ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f94:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f96:	e011      	b.n	8006fbc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d012      	beq.n	8006fc6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	3324      	adds	r3, #36	; 0x24
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 fc6d 	bl	8007884 <xTaskRemoveFromEventList>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006fb0:	f000 fd40 	bl	8007a34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	dce9      	bgt.n	8006f98 <prvUnlockQueue+0x16>
 8006fc4:	e000      	b.n	8006fc8 <prvUnlockQueue+0x46>
					break;
 8006fc6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	22ff      	movs	r2, #255	; 0xff
 8006fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006fd0:	f001 f99a 	bl	8008308 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006fd4:	f001 f96a 	bl	80082ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fde:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006fe0:	e011      	b.n	8007006 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d012      	beq.n	8007010 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3310      	adds	r3, #16
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 fc48 	bl	8007884 <xTaskRemoveFromEventList>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ffa:	f000 fd1b 	bl	8007a34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ffe:	7bbb      	ldrb	r3, [r7, #14]
 8007000:	3b01      	subs	r3, #1
 8007002:	b2db      	uxtb	r3, r3
 8007004:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007006:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800700a:	2b00      	cmp	r3, #0
 800700c:	dce9      	bgt.n	8006fe2 <prvUnlockQueue+0x60>
 800700e:	e000      	b.n	8007012 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007010:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	22ff      	movs	r2, #255	; 0xff
 8007016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800701a:	f001 f975 	bl	8008308 <vPortExitCritical>
}
 800701e:	bf00      	nop
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800702e:	f001 f93d 	bl	80082ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007036:	2b00      	cmp	r3, #0
 8007038:	d102      	bne.n	8007040 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800703a:	2301      	movs	r3, #1
 800703c:	60fb      	str	r3, [r7, #12]
 800703e:	e001      	b.n	8007044 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007040:	2300      	movs	r3, #0
 8007042:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007044:	f001 f960 	bl	8008308 <vPortExitCritical>

	return xReturn;
 8007048:	68fb      	ldr	r3, [r7, #12]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800705a:	f001 f927 	bl	80082ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007066:	429a      	cmp	r2, r3
 8007068:	d102      	bne.n	8007070 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800706a:	2301      	movs	r3, #1
 800706c:	60fb      	str	r3, [r7, #12]
 800706e:	e001      	b.n	8007074 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007070:	2300      	movs	r3, #0
 8007072:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007074:	f001 f948 	bl	8008308 <vPortExitCritical>

	return xReturn;
 8007078:	68fb      	ldr	r3, [r7, #12]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007082:	b580      	push	{r7, lr}
 8007084:	b08e      	sub	sp, #56	; 0x38
 8007086:	af04      	add	r7, sp, #16
 8007088:	60f8      	str	r0, [r7, #12]
 800708a:	60b9      	str	r1, [r7, #8]
 800708c:	607a      	str	r2, [r7, #4]
 800708e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007092:	2b00      	cmp	r3, #0
 8007094:	d109      	bne.n	80070aa <xTaskCreateStatic+0x28>
	__asm volatile
 8007096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709a:	f383 8811 	msr	BASEPRI, r3
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	623b      	str	r3, [r7, #32]
 80070a8:	e7fe      	b.n	80070a8 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80070aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d109      	bne.n	80070c4 <xTaskCreateStatic+0x42>
 80070b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	61fb      	str	r3, [r7, #28]
 80070c2:	e7fe      	b.n	80070c2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80070c4:	2354      	movs	r3, #84	; 0x54
 80070c6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	2b54      	cmp	r3, #84	; 0x54
 80070cc:	d009      	beq.n	80070e2 <xTaskCreateStatic+0x60>
 80070ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	61bb      	str	r3, [r7, #24]
 80070e0:	e7fe      	b.n	80070e0 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80070e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80070e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d01e      	beq.n	8007128 <xTaskCreateStatic+0xa6>
 80070ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d01b      	beq.n	8007128 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	2202      	movs	r2, #2
 80070fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007102:	2300      	movs	r3, #0
 8007104:	9303      	str	r3, [sp, #12]
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	9302      	str	r3, [sp, #8]
 800710a:	f107 0314 	add.w	r3, r7, #20
 800710e:	9301      	str	r3, [sp, #4]
 8007110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	68b9      	ldr	r1, [r7, #8]
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f000 f850 	bl	80071c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007120:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007122:	f000 f8d3 	bl	80072cc <prvAddNewTaskToReadyList>
 8007126:	e001      	b.n	800712c <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8007128:	2300      	movs	r3, #0
 800712a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800712c:	697b      	ldr	r3, [r7, #20]
	}
 800712e:	4618      	mov	r0, r3
 8007130:	3728      	adds	r7, #40	; 0x28
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007136:	b580      	push	{r7, lr}
 8007138:	b08c      	sub	sp, #48	; 0x30
 800713a:	af04      	add	r7, sp, #16
 800713c:	60f8      	str	r0, [r7, #12]
 800713e:	60b9      	str	r1, [r7, #8]
 8007140:	603b      	str	r3, [r7, #0]
 8007142:	4613      	mov	r3, r2
 8007144:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007146:	88fb      	ldrh	r3, [r7, #6]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4618      	mov	r0, r3
 800714c:	f001 f9c8 	bl	80084e0 <pvPortMalloc>
 8007150:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00e      	beq.n	8007176 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007158:	2054      	movs	r0, #84	; 0x54
 800715a:	f001 f9c1 	bl	80084e0 <pvPortMalloc>
 800715e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d003      	beq.n	800716e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	631a      	str	r2, [r3, #48]	; 0x30
 800716c:	e005      	b.n	800717a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800716e:	6978      	ldr	r0, [r7, #20]
 8007170:	f001 fa78 	bl	8008664 <vPortFree>
 8007174:	e001      	b.n	800717a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007176:	2300      	movs	r3, #0
 8007178:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d017      	beq.n	80071b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007188:	88fa      	ldrh	r2, [r7, #6]
 800718a:	2300      	movs	r3, #0
 800718c:	9303      	str	r3, [sp, #12]
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	9302      	str	r3, [sp, #8]
 8007192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007194:	9301      	str	r3, [sp, #4]
 8007196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	68b9      	ldr	r1, [r7, #8]
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f000 f80e 	bl	80071c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071a4:	69f8      	ldr	r0, [r7, #28]
 80071a6:	f000 f891 	bl	80072cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071aa:	2301      	movs	r3, #1
 80071ac:	61bb      	str	r3, [r7, #24]
 80071ae:	e002      	b.n	80071b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071b0:	f04f 33ff 	mov.w	r3, #4294967295
 80071b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80071b6:	69bb      	ldr	r3, [r7, #24]
	}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3720      	adds	r7, #32
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b088      	sub	sp, #32
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80071ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071d8:	3b01      	subs	r3, #1
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	f023 0307 	bic.w	r3, r3, #7
 80071e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	f003 0307 	and.w	r3, r3, #7
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d009      	beq.n	8007206 <prvInitialiseNewTask+0x46>
 80071f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	617b      	str	r3, [r7, #20]
 8007204:	e7fe      	b.n	8007204 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d01f      	beq.n	800724c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800720c:	2300      	movs	r3, #0
 800720e:	61fb      	str	r3, [r7, #28]
 8007210:	e012      	b.n	8007238 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	4413      	add	r3, r2
 8007218:	7819      	ldrb	r1, [r3, #0]
 800721a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	4413      	add	r3, r2
 8007220:	3334      	adds	r3, #52	; 0x34
 8007222:	460a      	mov	r2, r1
 8007224:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	4413      	add	r3, r2
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d006      	beq.n	8007240 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	3301      	adds	r3, #1
 8007236:	61fb      	str	r3, [r7, #28]
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	2b0f      	cmp	r3, #15
 800723c:	d9e9      	bls.n	8007212 <prvInitialiseNewTask+0x52>
 800723e:	e000      	b.n	8007242 <prvInitialiseNewTask+0x82>
			{
				break;
 8007240:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800724a:	e003      	b.n	8007254 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800724c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724e:	2200      	movs	r2, #0
 8007250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007256:	2b06      	cmp	r3, #6
 8007258:	d901      	bls.n	800725e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800725a:	2306      	movs	r3, #6
 800725c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800725e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007262:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007268:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800726a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726c:	2200      	movs	r2, #0
 800726e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007272:	3304      	adds	r3, #4
 8007274:	4618      	mov	r0, r3
 8007276:	f7fe ff95 	bl	80061a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800727a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727c:	3318      	adds	r3, #24
 800727e:	4618      	mov	r0, r3
 8007280:	f7fe ff90 	bl	80061a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007288:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800728a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728c:	f1c3 0207 	rsb	r2, r3, #7
 8007290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007292:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007298:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800729a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729c:	2200      	movs	r2, #0
 800729e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	68f9      	ldr	r1, [r7, #12]
 80072ac:	69b8      	ldr	r0, [r7, #24]
 80072ae:	f000 fed3 	bl	8008058 <pxPortInitialiseStack>
 80072b2:	4602      	mov	r2, r0
 80072b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80072b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d002      	beq.n	80072c4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80072be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072c4:	bf00      	nop
 80072c6:	3720      	adds	r7, #32
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80072d4:	f000 ffea 	bl	80082ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80072d8:	4b2a      	ldr	r3, [pc, #168]	; (8007384 <prvAddNewTaskToReadyList+0xb8>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	3301      	adds	r3, #1
 80072de:	4a29      	ldr	r2, [pc, #164]	; (8007384 <prvAddNewTaskToReadyList+0xb8>)
 80072e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80072e2:	4b29      	ldr	r3, [pc, #164]	; (8007388 <prvAddNewTaskToReadyList+0xbc>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d109      	bne.n	80072fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80072ea:	4a27      	ldr	r2, [pc, #156]	; (8007388 <prvAddNewTaskToReadyList+0xbc>)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80072f0:	4b24      	ldr	r3, [pc, #144]	; (8007384 <prvAddNewTaskToReadyList+0xb8>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d110      	bne.n	800731a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80072f8:	f000 fbc0 	bl	8007a7c <prvInitialiseTaskLists>
 80072fc:	e00d      	b.n	800731a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80072fe:	4b23      	ldr	r3, [pc, #140]	; (800738c <prvAddNewTaskToReadyList+0xc0>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d109      	bne.n	800731a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007306:	4b20      	ldr	r3, [pc, #128]	; (8007388 <prvAddNewTaskToReadyList+0xbc>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007310:	429a      	cmp	r2, r3
 8007312:	d802      	bhi.n	800731a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007314:	4a1c      	ldr	r2, [pc, #112]	; (8007388 <prvAddNewTaskToReadyList+0xbc>)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800731a:	4b1d      	ldr	r3, [pc, #116]	; (8007390 <prvAddNewTaskToReadyList+0xc4>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3301      	adds	r3, #1
 8007320:	4a1b      	ldr	r2, [pc, #108]	; (8007390 <prvAddNewTaskToReadyList+0xc4>)
 8007322:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007328:	2201      	movs	r2, #1
 800732a:	409a      	lsls	r2, r3
 800732c:	4b19      	ldr	r3, [pc, #100]	; (8007394 <prvAddNewTaskToReadyList+0xc8>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4313      	orrs	r3, r2
 8007332:	4a18      	ldr	r2, [pc, #96]	; (8007394 <prvAddNewTaskToReadyList+0xc8>)
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800733a:	4613      	mov	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	4413      	add	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4a15      	ldr	r2, [pc, #84]	; (8007398 <prvAddNewTaskToReadyList+0xcc>)
 8007344:	441a      	add	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	3304      	adds	r3, #4
 800734a:	4619      	mov	r1, r3
 800734c:	4610      	mov	r0, r2
 800734e:	f7fe ff36 	bl	80061be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007352:	f000 ffd9 	bl	8008308 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007356:	4b0d      	ldr	r3, [pc, #52]	; (800738c <prvAddNewTaskToReadyList+0xc0>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00e      	beq.n	800737c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800735e:	4b0a      	ldr	r3, [pc, #40]	; (8007388 <prvAddNewTaskToReadyList+0xbc>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007368:	429a      	cmp	r2, r3
 800736a:	d207      	bcs.n	800737c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800736c:	4b0b      	ldr	r3, [pc, #44]	; (800739c <prvAddNewTaskToReadyList+0xd0>)
 800736e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800737c:	bf00      	nop
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	20000388 	.word	0x20000388
 8007388:	20000288 	.word	0x20000288
 800738c:	20000394 	.word	0x20000394
 8007390:	200003a4 	.word	0x200003a4
 8007394:	20000390 	.word	0x20000390
 8007398:	2000028c 	.word	0x2000028c
 800739c:	e000ed04 	.word	0xe000ed04

080073a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80073a8:	2300      	movs	r3, #0
 80073aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d016      	beq.n	80073e0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80073b2:	4b13      	ldr	r3, [pc, #76]	; (8007400 <vTaskDelay+0x60>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d009      	beq.n	80073ce <vTaskDelay+0x2e>
 80073ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	60bb      	str	r3, [r7, #8]
 80073cc:	e7fe      	b.n	80073cc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80073ce:	f000 f879 	bl	80074c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80073d2:	2100      	movs	r1, #0
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fdd9 	bl	8007f8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80073da:	f000 f881 	bl	80074e0 <xTaskResumeAll>
 80073de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d107      	bne.n	80073f6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80073e6:	4b07      	ldr	r3, [pc, #28]	; (8007404 <vTaskDelay+0x64>)
 80073e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073f6:	bf00      	nop
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	200003b0 	.word	0x200003b0
 8007404:	e000ed04 	.word	0xe000ed04

08007408 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b08a      	sub	sp, #40	; 0x28
 800740c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800740e:	2300      	movs	r3, #0
 8007410:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007412:	2300      	movs	r3, #0
 8007414:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007416:	463a      	mov	r2, r7
 8007418:	1d39      	adds	r1, r7, #4
 800741a:	f107 0308 	add.w	r3, r7, #8
 800741e:	4618      	mov	r0, r3
 8007420:	f7f9 f86e 	bl	8000500 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	9202      	str	r2, [sp, #8]
 800742c:	9301      	str	r3, [sp, #4]
 800742e:	2300      	movs	r3, #0
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	2300      	movs	r3, #0
 8007434:	460a      	mov	r2, r1
 8007436:	491d      	ldr	r1, [pc, #116]	; (80074ac <vTaskStartScheduler+0xa4>)
 8007438:	481d      	ldr	r0, [pc, #116]	; (80074b0 <vTaskStartScheduler+0xa8>)
 800743a:	f7ff fe22 	bl	8007082 <xTaskCreateStatic>
 800743e:	4602      	mov	r2, r0
 8007440:	4b1c      	ldr	r3, [pc, #112]	; (80074b4 <vTaskStartScheduler+0xac>)
 8007442:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007444:	4b1b      	ldr	r3, [pc, #108]	; (80074b4 <vTaskStartScheduler+0xac>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800744c:	2301      	movs	r3, #1
 800744e:	617b      	str	r3, [r7, #20]
 8007450:	e001      	b.n	8007456 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007452:	2300      	movs	r3, #0
 8007454:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d115      	bne.n	8007488 <vTaskStartScheduler+0x80>
 800745c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800746e:	4b12      	ldr	r3, [pc, #72]	; (80074b8 <vTaskStartScheduler+0xb0>)
 8007470:	f04f 32ff 	mov.w	r2, #4294967295
 8007474:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007476:	4b11      	ldr	r3, [pc, #68]	; (80074bc <vTaskStartScheduler+0xb4>)
 8007478:	2201      	movs	r2, #1
 800747a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800747c:	4b10      	ldr	r3, [pc, #64]	; (80074c0 <vTaskStartScheduler+0xb8>)
 800747e:	2200      	movs	r2, #0
 8007480:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007482:	f000 fe75 	bl	8008170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007486:	e00d      	b.n	80074a4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748e:	d109      	bne.n	80074a4 <vTaskStartScheduler+0x9c>
 8007490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	60fb      	str	r3, [r7, #12]
 80074a2:	e7fe      	b.n	80074a2 <vTaskStartScheduler+0x9a>
}
 80074a4:	bf00      	nop
 80074a6:	3718      	adds	r7, #24
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	080089a0 	.word	0x080089a0
 80074b0:	08007a4d 	.word	0x08007a4d
 80074b4:	200003ac 	.word	0x200003ac
 80074b8:	200003a8 	.word	0x200003a8
 80074bc:	20000394 	.word	0x20000394
 80074c0:	2000038c 	.word	0x2000038c

080074c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80074c4:	b480      	push	{r7}
 80074c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80074c8:	4b04      	ldr	r3, [pc, #16]	; (80074dc <vTaskSuspendAll+0x18>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3301      	adds	r3, #1
 80074ce:	4a03      	ldr	r2, [pc, #12]	; (80074dc <vTaskSuspendAll+0x18>)
 80074d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80074d2:	bf00      	nop
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	200003b0 	.word	0x200003b0

080074e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80074e6:	2300      	movs	r3, #0
 80074e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80074ea:	2300      	movs	r3, #0
 80074ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80074ee:	4b41      	ldr	r3, [pc, #260]	; (80075f4 <xTaskResumeAll+0x114>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d109      	bne.n	800750a <xTaskResumeAll+0x2a>
 80074f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	603b      	str	r3, [r7, #0]
 8007508:	e7fe      	b.n	8007508 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800750a:	f000 fecf 	bl	80082ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800750e:	4b39      	ldr	r3, [pc, #228]	; (80075f4 <xTaskResumeAll+0x114>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3b01      	subs	r3, #1
 8007514:	4a37      	ldr	r2, [pc, #220]	; (80075f4 <xTaskResumeAll+0x114>)
 8007516:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007518:	4b36      	ldr	r3, [pc, #216]	; (80075f4 <xTaskResumeAll+0x114>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d161      	bne.n	80075e4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007520:	4b35      	ldr	r3, [pc, #212]	; (80075f8 <xTaskResumeAll+0x118>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d05d      	beq.n	80075e4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007528:	e02e      	b.n	8007588 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800752a:	4b34      	ldr	r3, [pc, #208]	; (80075fc <xTaskResumeAll+0x11c>)
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	3318      	adds	r3, #24
 8007536:	4618      	mov	r0, r3
 8007538:	f7fe fe9e 	bl	8006278 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	3304      	adds	r3, #4
 8007540:	4618      	mov	r0, r3
 8007542:	f7fe fe99 	bl	8006278 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754a:	2201      	movs	r2, #1
 800754c:	409a      	lsls	r2, r3
 800754e:	4b2c      	ldr	r3, [pc, #176]	; (8007600 <xTaskResumeAll+0x120>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4313      	orrs	r3, r2
 8007554:	4a2a      	ldr	r2, [pc, #168]	; (8007600 <xTaskResumeAll+0x120>)
 8007556:	6013      	str	r3, [r2, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800755c:	4613      	mov	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4a27      	ldr	r2, [pc, #156]	; (8007604 <xTaskResumeAll+0x124>)
 8007566:	441a      	add	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	3304      	adds	r3, #4
 800756c:	4619      	mov	r1, r3
 800756e:	4610      	mov	r0, r2
 8007570:	f7fe fe25 	bl	80061be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007578:	4b23      	ldr	r3, [pc, #140]	; (8007608 <xTaskResumeAll+0x128>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757e:	429a      	cmp	r2, r3
 8007580:	d302      	bcc.n	8007588 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007582:	4b22      	ldr	r3, [pc, #136]	; (800760c <xTaskResumeAll+0x12c>)
 8007584:	2201      	movs	r2, #1
 8007586:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007588:	4b1c      	ldr	r3, [pc, #112]	; (80075fc <xTaskResumeAll+0x11c>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1cc      	bne.n	800752a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007596:	f000 fb0b 	bl	8007bb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800759a:	4b1d      	ldr	r3, [pc, #116]	; (8007610 <xTaskResumeAll+0x130>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d010      	beq.n	80075c8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80075a6:	f000 f837 	bl	8007618 <xTaskIncrementTick>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d002      	beq.n	80075b6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80075b0:	4b16      	ldr	r3, [pc, #88]	; (800760c <xTaskResumeAll+0x12c>)
 80075b2:	2201      	movs	r2, #1
 80075b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3b01      	subs	r3, #1
 80075ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1f1      	bne.n	80075a6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80075c2:	4b13      	ldr	r3, [pc, #76]	; (8007610 <xTaskResumeAll+0x130>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80075c8:	4b10      	ldr	r3, [pc, #64]	; (800760c <xTaskResumeAll+0x12c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d009      	beq.n	80075e4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80075d0:	2301      	movs	r3, #1
 80075d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80075d4:	4b0f      	ldr	r3, [pc, #60]	; (8007614 <xTaskResumeAll+0x134>)
 80075d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075e4:	f000 fe90 	bl	8008308 <vPortExitCritical>

	return xAlreadyYielded;
 80075e8:	68bb      	ldr	r3, [r7, #8]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	200003b0 	.word	0x200003b0
 80075f8:	20000388 	.word	0x20000388
 80075fc:	20000348 	.word	0x20000348
 8007600:	20000390 	.word	0x20000390
 8007604:	2000028c 	.word	0x2000028c
 8007608:	20000288 	.word	0x20000288
 800760c:	2000039c 	.word	0x2000039c
 8007610:	20000398 	.word	0x20000398
 8007614:	e000ed04 	.word	0xe000ed04

08007618 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800761e:	2300      	movs	r3, #0
 8007620:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007622:	4b4e      	ldr	r3, [pc, #312]	; (800775c <xTaskIncrementTick+0x144>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	f040 8087 	bne.w	800773a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800762c:	4b4c      	ldr	r3, [pc, #304]	; (8007760 <xTaskIncrementTick+0x148>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3301      	adds	r3, #1
 8007632:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007634:	4a4a      	ldr	r2, [pc, #296]	; (8007760 <xTaskIncrementTick+0x148>)
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d11f      	bne.n	8007680 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007640:	4b48      	ldr	r3, [pc, #288]	; (8007764 <xTaskIncrementTick+0x14c>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d009      	beq.n	800765e <xTaskIncrementTick+0x46>
 800764a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	603b      	str	r3, [r7, #0]
 800765c:	e7fe      	b.n	800765c <xTaskIncrementTick+0x44>
 800765e:	4b41      	ldr	r3, [pc, #260]	; (8007764 <xTaskIncrementTick+0x14c>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	4b40      	ldr	r3, [pc, #256]	; (8007768 <xTaskIncrementTick+0x150>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a3e      	ldr	r2, [pc, #248]	; (8007764 <xTaskIncrementTick+0x14c>)
 800766a:	6013      	str	r3, [r2, #0]
 800766c:	4a3e      	ldr	r2, [pc, #248]	; (8007768 <xTaskIncrementTick+0x150>)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6013      	str	r3, [r2, #0]
 8007672:	4b3e      	ldr	r3, [pc, #248]	; (800776c <xTaskIncrementTick+0x154>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3301      	adds	r3, #1
 8007678:	4a3c      	ldr	r2, [pc, #240]	; (800776c <xTaskIncrementTick+0x154>)
 800767a:	6013      	str	r3, [r2, #0]
 800767c:	f000 fa98 	bl	8007bb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007680:	4b3b      	ldr	r3, [pc, #236]	; (8007770 <xTaskIncrementTick+0x158>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	429a      	cmp	r2, r3
 8007688:	d348      	bcc.n	800771c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800768a:	4b36      	ldr	r3, [pc, #216]	; (8007764 <xTaskIncrementTick+0x14c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d104      	bne.n	800769e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007694:	4b36      	ldr	r3, [pc, #216]	; (8007770 <xTaskIncrementTick+0x158>)
 8007696:	f04f 32ff 	mov.w	r2, #4294967295
 800769a:	601a      	str	r2, [r3, #0]
					break;
 800769c:	e03e      	b.n	800771c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800769e:	4b31      	ldr	r3, [pc, #196]	; (8007764 <xTaskIncrementTick+0x14c>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80076ae:	693a      	ldr	r2, [r7, #16]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d203      	bcs.n	80076be <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80076b6:	4a2e      	ldr	r2, [pc, #184]	; (8007770 <xTaskIncrementTick+0x158>)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80076bc:	e02e      	b.n	800771c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	3304      	adds	r3, #4
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fe fdd8 	bl	8006278 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d004      	beq.n	80076da <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	3318      	adds	r3, #24
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fe fdcf 	bl	8006278 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076de:	2201      	movs	r2, #1
 80076e0:	409a      	lsls	r2, r3
 80076e2:	4b24      	ldr	r3, [pc, #144]	; (8007774 <xTaskIncrementTick+0x15c>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	4a22      	ldr	r2, [pc, #136]	; (8007774 <xTaskIncrementTick+0x15c>)
 80076ea:	6013      	str	r3, [r2, #0]
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f0:	4613      	mov	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4413      	add	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4a1f      	ldr	r2, [pc, #124]	; (8007778 <xTaskIncrementTick+0x160>)
 80076fa:	441a      	add	r2, r3
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	3304      	adds	r3, #4
 8007700:	4619      	mov	r1, r3
 8007702:	4610      	mov	r0, r2
 8007704:	f7fe fd5b 	bl	80061be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800770c:	4b1b      	ldr	r3, [pc, #108]	; (800777c <xTaskIncrementTick+0x164>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007712:	429a      	cmp	r2, r3
 8007714:	d3b9      	bcc.n	800768a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007716:	2301      	movs	r3, #1
 8007718:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800771a:	e7b6      	b.n	800768a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800771c:	4b17      	ldr	r3, [pc, #92]	; (800777c <xTaskIncrementTick+0x164>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007722:	4915      	ldr	r1, [pc, #84]	; (8007778 <xTaskIncrementTick+0x160>)
 8007724:	4613      	mov	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	440b      	add	r3, r1
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d907      	bls.n	8007744 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8007734:	2301      	movs	r3, #1
 8007736:	617b      	str	r3, [r7, #20]
 8007738:	e004      	b.n	8007744 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800773a:	4b11      	ldr	r3, [pc, #68]	; (8007780 <xTaskIncrementTick+0x168>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3301      	adds	r3, #1
 8007740:	4a0f      	ldr	r2, [pc, #60]	; (8007780 <xTaskIncrementTick+0x168>)
 8007742:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007744:	4b0f      	ldr	r3, [pc, #60]	; (8007784 <xTaskIncrementTick+0x16c>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800774c:	2301      	movs	r3, #1
 800774e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007750:	697b      	ldr	r3, [r7, #20]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3718      	adds	r7, #24
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	200003b0 	.word	0x200003b0
 8007760:	2000038c 	.word	0x2000038c
 8007764:	20000340 	.word	0x20000340
 8007768:	20000344 	.word	0x20000344
 800776c:	200003a0 	.word	0x200003a0
 8007770:	200003a8 	.word	0x200003a8
 8007774:	20000390 	.word	0x20000390
 8007778:	2000028c 	.word	0x2000028c
 800777c:	20000288 	.word	0x20000288
 8007780:	20000398 	.word	0x20000398
 8007784:	2000039c 	.word	0x2000039c

08007788 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007788:	b480      	push	{r7}
 800778a:	b087      	sub	sp, #28
 800778c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800778e:	4b26      	ldr	r3, [pc, #152]	; (8007828 <vTaskSwitchContext+0xa0>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007796:	4b25      	ldr	r3, [pc, #148]	; (800782c <vTaskSwitchContext+0xa4>)
 8007798:	2201      	movs	r2, #1
 800779a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800779c:	e03e      	b.n	800781c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800779e:	4b23      	ldr	r3, [pc, #140]	; (800782c <vTaskSwitchContext+0xa4>)
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077a4:	4b22      	ldr	r3, [pc, #136]	; (8007830 <vTaskSwitchContext+0xa8>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	fab3 f383 	clz	r3, r3
 80077b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80077b2:	7afb      	ldrb	r3, [r7, #11]
 80077b4:	f1c3 031f 	rsb	r3, r3, #31
 80077b8:	617b      	str	r3, [r7, #20]
 80077ba:	491e      	ldr	r1, [pc, #120]	; (8007834 <vTaskSwitchContext+0xac>)
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	4613      	mov	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	440b      	add	r3, r1
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d109      	bne.n	80077e2 <vTaskSwitchContext+0x5a>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	607b      	str	r3, [r7, #4]
 80077e0:	e7fe      	b.n	80077e0 <vTaskSwitchContext+0x58>
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	4613      	mov	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	4413      	add	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4a11      	ldr	r2, [pc, #68]	; (8007834 <vTaskSwitchContext+0xac>)
 80077ee:	4413      	add	r3, r2
 80077f0:	613b      	str	r3, [r7, #16]
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	605a      	str	r2, [r3, #4]
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	3308      	adds	r3, #8
 8007804:	429a      	cmp	r2, r3
 8007806:	d104      	bne.n	8007812 <vTaskSwitchContext+0x8a>
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	685a      	ldr	r2, [r3, #4]
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	605a      	str	r2, [r3, #4]
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	4a07      	ldr	r2, [pc, #28]	; (8007838 <vTaskSwitchContext+0xb0>)
 800781a:	6013      	str	r3, [r2, #0]
}
 800781c:	bf00      	nop
 800781e:	371c      	adds	r7, #28
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	200003b0 	.word	0x200003b0
 800782c:	2000039c 	.word	0x2000039c
 8007830:	20000390 	.word	0x20000390
 8007834:	2000028c 	.word	0x2000028c
 8007838:	20000288 	.word	0x20000288

0800783c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d109      	bne.n	8007860 <vTaskPlaceOnEventList+0x24>
 800784c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	60fb      	str	r3, [r7, #12]
 800785e:	e7fe      	b.n	800785e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007860:	4b07      	ldr	r3, [pc, #28]	; (8007880 <vTaskPlaceOnEventList+0x44>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3318      	adds	r3, #24
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7fe fccc 	bl	8006206 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800786e:	2101      	movs	r1, #1
 8007870:	6838      	ldr	r0, [r7, #0]
 8007872:	f000 fb8b 	bl	8007f8c <prvAddCurrentTaskToDelayedList>
}
 8007876:	bf00      	nop
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	20000288 	.word	0x20000288

08007884 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b086      	sub	sp, #24
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d109      	bne.n	80078ae <xTaskRemoveFromEventList+0x2a>
 800789a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	e7fe      	b.n	80078ac <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	3318      	adds	r3, #24
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fe fce0 	bl	8006278 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078b8:	4b1d      	ldr	r3, [pc, #116]	; (8007930 <xTaskRemoveFromEventList+0xac>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d11c      	bne.n	80078fa <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	3304      	adds	r3, #4
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fe fcd7 	bl	8006278 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ce:	2201      	movs	r2, #1
 80078d0:	409a      	lsls	r2, r3
 80078d2:	4b18      	ldr	r3, [pc, #96]	; (8007934 <xTaskRemoveFromEventList+0xb0>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	4a16      	ldr	r2, [pc, #88]	; (8007934 <xTaskRemoveFromEventList+0xb0>)
 80078da:	6013      	str	r3, [r2, #0]
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e0:	4613      	mov	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4413      	add	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4a13      	ldr	r2, [pc, #76]	; (8007938 <xTaskRemoveFromEventList+0xb4>)
 80078ea:	441a      	add	r2, r3
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	3304      	adds	r3, #4
 80078f0:	4619      	mov	r1, r3
 80078f2:	4610      	mov	r0, r2
 80078f4:	f7fe fc63 	bl	80061be <vListInsertEnd>
 80078f8:	e005      	b.n	8007906 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	3318      	adds	r3, #24
 80078fe:	4619      	mov	r1, r3
 8007900:	480e      	ldr	r0, [pc, #56]	; (800793c <xTaskRemoveFromEventList+0xb8>)
 8007902:	f7fe fc5c 	bl	80061be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790a:	4b0d      	ldr	r3, [pc, #52]	; (8007940 <xTaskRemoveFromEventList+0xbc>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007910:	429a      	cmp	r2, r3
 8007912:	d905      	bls.n	8007920 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007914:	2301      	movs	r3, #1
 8007916:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007918:	4b0a      	ldr	r3, [pc, #40]	; (8007944 <xTaskRemoveFromEventList+0xc0>)
 800791a:	2201      	movs	r2, #1
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	e001      	b.n	8007924 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007920:	2300      	movs	r3, #0
 8007922:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007924:	697b      	ldr	r3, [r7, #20]
}
 8007926:	4618      	mov	r0, r3
 8007928:	3718      	adds	r7, #24
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	200003b0 	.word	0x200003b0
 8007934:	20000390 	.word	0x20000390
 8007938:	2000028c 	.word	0x2000028c
 800793c:	20000348 	.word	0x20000348
 8007940:	20000288 	.word	0x20000288
 8007944:	2000039c 	.word	0x2000039c

08007948 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007950:	4b06      	ldr	r3, [pc, #24]	; (800796c <vTaskInternalSetTimeOutState+0x24>)
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007958:	4b05      	ldr	r3, [pc, #20]	; (8007970 <vTaskInternalSetTimeOutState+0x28>)
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	605a      	str	r2, [r3, #4]
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	200003a0 	.word	0x200003a0
 8007970:	2000038c 	.word	0x2000038c

08007974 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b088      	sub	sp, #32
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d109      	bne.n	8007998 <xTaskCheckForTimeOut+0x24>
 8007984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007988:	f383 8811 	msr	BASEPRI, r3
 800798c:	f3bf 8f6f 	isb	sy
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	613b      	str	r3, [r7, #16]
 8007996:	e7fe      	b.n	8007996 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d109      	bne.n	80079b2 <xTaskCheckForTimeOut+0x3e>
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	e7fe      	b.n	80079b0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80079b2:	f000 fc7b 	bl	80082ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079b6:	4b1d      	ldr	r3, [pc, #116]	; (8007a2c <xTaskCheckForTimeOut+0xb8>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ce:	d102      	bne.n	80079d6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079d0:	2300      	movs	r3, #0
 80079d2:	61fb      	str	r3, [r7, #28]
 80079d4:	e023      	b.n	8007a1e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	4b15      	ldr	r3, [pc, #84]	; (8007a30 <xTaskCheckForTimeOut+0xbc>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d007      	beq.n	80079f2 <xTaskCheckForTimeOut+0x7e>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d302      	bcc.n	80079f2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079ec:	2301      	movs	r3, #1
 80079ee:	61fb      	str	r3, [r7, #28]
 80079f0:	e015      	b.n	8007a1e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d20b      	bcs.n	8007a14 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	1ad2      	subs	r2, r2, r3
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7ff ff9d 	bl	8007948 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	61fb      	str	r3, [r7, #28]
 8007a12:	e004      	b.n	8007a1e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2200      	movs	r2, #0
 8007a18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a1e:	f000 fc73 	bl	8008308 <vPortExitCritical>

	return xReturn;
 8007a22:	69fb      	ldr	r3, [r7, #28]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3720      	adds	r7, #32
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	2000038c 	.word	0x2000038c
 8007a30:	200003a0 	.word	0x200003a0

08007a34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a34:	b480      	push	{r7}
 8007a36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a38:	4b03      	ldr	r3, [pc, #12]	; (8007a48 <vTaskMissedYield+0x14>)
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	601a      	str	r2, [r3, #0]
}
 8007a3e:	bf00      	nop
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	2000039c 	.word	0x2000039c

08007a4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a54:	f000 f852 	bl	8007afc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a58:	4b06      	ldr	r3, [pc, #24]	; (8007a74 <prvIdleTask+0x28>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d9f9      	bls.n	8007a54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a60:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <prvIdleTask+0x2c>)
 8007a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a66:	601a      	str	r2, [r3, #0]
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a70:	e7f0      	b.n	8007a54 <prvIdleTask+0x8>
 8007a72:	bf00      	nop
 8007a74:	2000028c 	.word	0x2000028c
 8007a78:	e000ed04 	.word	0xe000ed04

08007a7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a82:	2300      	movs	r3, #0
 8007a84:	607b      	str	r3, [r7, #4]
 8007a86:	e00c      	b.n	8007aa2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4a12      	ldr	r2, [pc, #72]	; (8007adc <prvInitialiseTaskLists+0x60>)
 8007a94:	4413      	add	r3, r2
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fe fb64 	bl	8006164 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	607b      	str	r3, [r7, #4]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b06      	cmp	r3, #6
 8007aa6:	d9ef      	bls.n	8007a88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007aa8:	480d      	ldr	r0, [pc, #52]	; (8007ae0 <prvInitialiseTaskLists+0x64>)
 8007aaa:	f7fe fb5b 	bl	8006164 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007aae:	480d      	ldr	r0, [pc, #52]	; (8007ae4 <prvInitialiseTaskLists+0x68>)
 8007ab0:	f7fe fb58 	bl	8006164 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ab4:	480c      	ldr	r0, [pc, #48]	; (8007ae8 <prvInitialiseTaskLists+0x6c>)
 8007ab6:	f7fe fb55 	bl	8006164 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007aba:	480c      	ldr	r0, [pc, #48]	; (8007aec <prvInitialiseTaskLists+0x70>)
 8007abc:	f7fe fb52 	bl	8006164 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ac0:	480b      	ldr	r0, [pc, #44]	; (8007af0 <prvInitialiseTaskLists+0x74>)
 8007ac2:	f7fe fb4f 	bl	8006164 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ac6:	4b0b      	ldr	r3, [pc, #44]	; (8007af4 <prvInitialiseTaskLists+0x78>)
 8007ac8:	4a05      	ldr	r2, [pc, #20]	; (8007ae0 <prvInitialiseTaskLists+0x64>)
 8007aca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007acc:	4b0a      	ldr	r3, [pc, #40]	; (8007af8 <prvInitialiseTaskLists+0x7c>)
 8007ace:	4a05      	ldr	r2, [pc, #20]	; (8007ae4 <prvInitialiseTaskLists+0x68>)
 8007ad0:	601a      	str	r2, [r3, #0]
}
 8007ad2:	bf00      	nop
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	2000028c 	.word	0x2000028c
 8007ae0:	20000318 	.word	0x20000318
 8007ae4:	2000032c 	.word	0x2000032c
 8007ae8:	20000348 	.word	0x20000348
 8007aec:	2000035c 	.word	0x2000035c
 8007af0:	20000374 	.word	0x20000374
 8007af4:	20000340 	.word	0x20000340
 8007af8:	20000344 	.word	0x20000344

08007afc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b02:	e019      	b.n	8007b38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b04:	f000 fbd2 	bl	80082ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b08:	4b0f      	ldr	r3, [pc, #60]	; (8007b48 <prvCheckTasksWaitingTermination+0x4c>)
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	3304      	adds	r3, #4
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7fe fbaf 	bl	8006278 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b1a:	4b0c      	ldr	r3, [pc, #48]	; (8007b4c <prvCheckTasksWaitingTermination+0x50>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	4a0a      	ldr	r2, [pc, #40]	; (8007b4c <prvCheckTasksWaitingTermination+0x50>)
 8007b22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b24:	4b0a      	ldr	r3, [pc, #40]	; (8007b50 <prvCheckTasksWaitingTermination+0x54>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	4a09      	ldr	r2, [pc, #36]	; (8007b50 <prvCheckTasksWaitingTermination+0x54>)
 8007b2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b2e:	f000 fbeb 	bl	8008308 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f80e 	bl	8007b54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b38:	4b05      	ldr	r3, [pc, #20]	; (8007b50 <prvCheckTasksWaitingTermination+0x54>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1e1      	bne.n	8007b04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b40:	bf00      	nop
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	2000035c 	.word	0x2000035c
 8007b4c:	20000388 	.word	0x20000388
 8007b50:	20000370 	.word	0x20000370

08007b54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d108      	bne.n	8007b78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 fd7a 	bl	8008664 <vPortFree>
				vPortFree( pxTCB );
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fd77 	bl	8008664 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b76:	e017      	b.n	8007ba8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d103      	bne.n	8007b8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fd6e 	bl	8008664 <vPortFree>
	}
 8007b88:	e00e      	b.n	8007ba8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d009      	beq.n	8007ba8 <prvDeleteTCB+0x54>
 8007b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	60fb      	str	r3, [r7, #12]
 8007ba6:	e7fe      	b.n	8007ba6 <prvDeleteTCB+0x52>
	}
 8007ba8:	bf00      	nop
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bb6:	4b0c      	ldr	r3, [pc, #48]	; (8007be8 <prvResetNextTaskUnblockTime+0x38>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d104      	bne.n	8007bca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007bc0:	4b0a      	ldr	r3, [pc, #40]	; (8007bec <prvResetNextTaskUnblockTime+0x3c>)
 8007bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007bc8:	e008      	b.n	8007bdc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bca:	4b07      	ldr	r3, [pc, #28]	; (8007be8 <prvResetNextTaskUnblockTime+0x38>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	4a04      	ldr	r2, [pc, #16]	; (8007bec <prvResetNextTaskUnblockTime+0x3c>)
 8007bda:	6013      	str	r3, [r2, #0]
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	20000340 	.word	0x20000340
 8007bec:	200003a8 	.word	0x200003a8

08007bf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007bf6:	4b0b      	ldr	r3, [pc, #44]	; (8007c24 <xTaskGetSchedulerState+0x34>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d102      	bne.n	8007c04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	607b      	str	r3, [r7, #4]
 8007c02:	e008      	b.n	8007c16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c04:	4b08      	ldr	r3, [pc, #32]	; (8007c28 <xTaskGetSchedulerState+0x38>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d102      	bne.n	8007c12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	607b      	str	r3, [r7, #4]
 8007c10:	e001      	b.n	8007c16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c12:	2300      	movs	r3, #0
 8007c14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c16:	687b      	ldr	r3, [r7, #4]
	}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr
 8007c24:	20000394 	.word	0x20000394
 8007c28:	200003b0 	.word	0x200003b0

08007c2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d069      	beq.n	8007d16 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c46:	4b36      	ldr	r3, [pc, #216]	; (8007d20 <xTaskPriorityInherit+0xf4>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d259      	bcs.n	8007d04 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	db06      	blt.n	8007c66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c58:	4b31      	ldr	r3, [pc, #196]	; (8007d20 <xTaskPriorityInherit+0xf4>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5e:	f1c3 0207 	rsb	r2, r3, #7
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	6959      	ldr	r1, [r3, #20]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c6e:	4613      	mov	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4a2b      	ldr	r2, [pc, #172]	; (8007d24 <xTaskPriorityInherit+0xf8>)
 8007c78:	4413      	add	r3, r2
 8007c7a:	4299      	cmp	r1, r3
 8007c7c:	d13a      	bne.n	8007cf4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	3304      	adds	r3, #4
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fe faf8 	bl	8006278 <uxListRemove>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d115      	bne.n	8007cba <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c92:	4924      	ldr	r1, [pc, #144]	; (8007d24 <xTaskPriorityInherit+0xf8>)
 8007c94:	4613      	mov	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	440b      	add	r3, r1
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10a      	bne.n	8007cba <xTaskPriorityInherit+0x8e>
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	2201      	movs	r2, #1
 8007caa:	fa02 f303 	lsl.w	r3, r2, r3
 8007cae:	43da      	mvns	r2, r3
 8007cb0:	4b1d      	ldr	r3, [pc, #116]	; (8007d28 <xTaskPriorityInherit+0xfc>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	4a1c      	ldr	r2, [pc, #112]	; (8007d28 <xTaskPriorityInherit+0xfc>)
 8007cb8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007cba:	4b19      	ldr	r3, [pc, #100]	; (8007d20 <xTaskPriorityInherit+0xf4>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc8:	2201      	movs	r2, #1
 8007cca:	409a      	lsls	r2, r3
 8007ccc:	4b16      	ldr	r3, [pc, #88]	; (8007d28 <xTaskPriorityInherit+0xfc>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	4a15      	ldr	r2, [pc, #84]	; (8007d28 <xTaskPriorityInherit+0xfc>)
 8007cd4:	6013      	str	r3, [r2, #0]
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cda:	4613      	mov	r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4413      	add	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4a10      	ldr	r2, [pc, #64]	; (8007d24 <xTaskPriorityInherit+0xf8>)
 8007ce4:	441a      	add	r2, r3
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	3304      	adds	r3, #4
 8007cea:	4619      	mov	r1, r3
 8007cec:	4610      	mov	r0, r2
 8007cee:	f7fe fa66 	bl	80061be <vListInsertEnd>
 8007cf2:	e004      	b.n	8007cfe <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007cf4:	4b0a      	ldr	r3, [pc, #40]	; (8007d20 <xTaskPriorityInherit+0xf4>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	60fb      	str	r3, [r7, #12]
 8007d02:	e008      	b.n	8007d16 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d08:	4b05      	ldr	r3, [pc, #20]	; (8007d20 <xTaskPriorityInherit+0xf4>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d201      	bcs.n	8007d16 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007d12:	2301      	movs	r3, #1
 8007d14:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d16:	68fb      	ldr	r3, [r7, #12]
	}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	20000288 	.word	0x20000288
 8007d24:	2000028c 	.word	0x2000028c
 8007d28:	20000390 	.word	0x20000390

08007d2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d06c      	beq.n	8007e1c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d42:	4b39      	ldr	r3, [pc, #228]	; (8007e28 <xTaskPriorityDisinherit+0xfc>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	693a      	ldr	r2, [r7, #16]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d009      	beq.n	8007d60 <xTaskPriorityDisinherit+0x34>
 8007d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d50:	f383 8811 	msr	BASEPRI, r3
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	60fb      	str	r3, [r7, #12]
 8007d5e:	e7fe      	b.n	8007d5e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d109      	bne.n	8007d7c <xTaskPriorityDisinherit+0x50>
 8007d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6c:	f383 8811 	msr	BASEPRI, r3
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	60bb      	str	r3, [r7, #8]
 8007d7a:	e7fe      	b.n	8007d7a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d80:	1e5a      	subs	r2, r3, #1
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d044      	beq.n	8007e1c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d140      	bne.n	8007e1c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fe fa6a 	bl	8006278 <uxListRemove>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d115      	bne.n	8007dd6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dae:	491f      	ldr	r1, [pc, #124]	; (8007e2c <xTaskPriorityDisinherit+0x100>)
 8007db0:	4613      	mov	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	440b      	add	r3, r1
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10a      	bne.n	8007dd6 <xTaskPriorityDisinherit+0xaa>
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dca:	43da      	mvns	r2, r3
 8007dcc:	4b18      	ldr	r3, [pc, #96]	; (8007e30 <xTaskPriorityDisinherit+0x104>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	4a17      	ldr	r2, [pc, #92]	; (8007e30 <xTaskPriorityDisinherit+0x104>)
 8007dd4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de2:	f1c3 0207 	rsb	r2, r3, #7
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dee:	2201      	movs	r2, #1
 8007df0:	409a      	lsls	r2, r3
 8007df2:	4b0f      	ldr	r3, [pc, #60]	; (8007e30 <xTaskPriorityDisinherit+0x104>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	4a0d      	ldr	r2, [pc, #52]	; (8007e30 <xTaskPriorityDisinherit+0x104>)
 8007dfa:	6013      	str	r3, [r2, #0]
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e00:	4613      	mov	r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4413      	add	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4a08      	ldr	r2, [pc, #32]	; (8007e2c <xTaskPriorityDisinherit+0x100>)
 8007e0a:	441a      	add	r2, r3
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	3304      	adds	r3, #4
 8007e10:	4619      	mov	r1, r3
 8007e12:	4610      	mov	r0, r2
 8007e14:	f7fe f9d3 	bl	80061be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e1c:	697b      	ldr	r3, [r7, #20]
	}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3718      	adds	r7, #24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	20000288 	.word	0x20000288
 8007e2c:	2000028c 	.word	0x2000028c
 8007e30:	20000390 	.word	0x20000390

08007e34 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007e42:	2301      	movs	r3, #1
 8007e44:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 8081 	beq.w	8007f50 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d109      	bne.n	8007e6a <vTaskPriorityDisinheritAfterTimeout+0x36>
 8007e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	e7fe      	b.n	8007e68 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d902      	bls.n	8007e7a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	61fb      	str	r3, [r7, #28]
 8007e78:	e002      	b.n	8007e80 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e7e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e84:	69fa      	ldr	r2, [r7, #28]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d062      	beq.n	8007f50 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d15d      	bne.n	8007f50 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007e94:	4b30      	ldr	r3, [pc, #192]	; (8007f58 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d109      	bne.n	8007eb2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8007e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea2:	f383 8811 	msr	BASEPRI, r3
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	60bb      	str	r3, [r7, #8]
 8007eb0:	e7fe      	b.n	8007eb0 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	69fa      	ldr	r2, [r7, #28]
 8007ebc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	db04      	blt.n	8007ed0 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	f1c3 0207 	rsb	r2, r3, #7
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	6959      	ldr	r1, [r3, #20]
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4413      	add	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	4a1f      	ldr	r2, [pc, #124]	; (8007f5c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007ee0:	4413      	add	r3, r2
 8007ee2:	4299      	cmp	r1, r3
 8007ee4:	d134      	bne.n	8007f50 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	3304      	adds	r3, #4
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fe f9c4 	bl	8006278 <uxListRemove>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d115      	bne.n	8007f22 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efa:	4918      	ldr	r1, [pc, #96]	; (8007f5c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007efc:	4613      	mov	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4413      	add	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	440b      	add	r3, r1
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10a      	bne.n	8007f22 <vTaskPriorityDisinheritAfterTimeout+0xee>
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f10:	2201      	movs	r2, #1
 8007f12:	fa02 f303 	lsl.w	r3, r2, r3
 8007f16:	43da      	mvns	r2, r3
 8007f18:	4b11      	ldr	r3, [pc, #68]	; (8007f60 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	4a10      	ldr	r2, [pc, #64]	; (8007f60 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007f20:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f26:	2201      	movs	r2, #1
 8007f28:	409a      	lsls	r2, r3
 8007f2a:	4b0d      	ldr	r3, [pc, #52]	; (8007f60 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	4a0b      	ldr	r2, [pc, #44]	; (8007f60 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007f32:	6013      	str	r3, [r2, #0]
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f38:	4613      	mov	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4a06      	ldr	r2, [pc, #24]	; (8007f5c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007f42:	441a      	add	r2, r3
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	3304      	adds	r3, #4
 8007f48:	4619      	mov	r1, r3
 8007f4a:	4610      	mov	r0, r2
 8007f4c:	f7fe f937 	bl	80061be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f50:	bf00      	nop
 8007f52:	3720      	adds	r7, #32
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	20000288 	.word	0x20000288
 8007f5c:	2000028c 	.word	0x2000028c
 8007f60:	20000390 	.word	0x20000390

08007f64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007f64:	b480      	push	{r7}
 8007f66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007f68:	4b07      	ldr	r3, [pc, #28]	; (8007f88 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d004      	beq.n	8007f7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007f70:	4b05      	ldr	r3, [pc, #20]	; (8007f88 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f76:	3201      	adds	r2, #1
 8007f78:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007f7a:	4b03      	ldr	r3, [pc, #12]	; (8007f88 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
	}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	20000288 	.word	0x20000288

08007f8c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f96:	4b29      	ldr	r3, [pc, #164]	; (800803c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f9c:	4b28      	ldr	r3, [pc, #160]	; (8008040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fe f968 	bl	8006278 <uxListRemove>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10b      	bne.n	8007fc6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007fae:	4b24      	ldr	r3, [pc, #144]	; (8008040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fba:	43da      	mvns	r2, r3
 8007fbc:	4b21      	ldr	r3, [pc, #132]	; (8008044 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	4a20      	ldr	r2, [pc, #128]	; (8008044 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007fc4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fcc:	d10a      	bne.n	8007fe4 <prvAddCurrentTaskToDelayedList+0x58>
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d007      	beq.n	8007fe4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fd4:	4b1a      	ldr	r3, [pc, #104]	; (8008040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3304      	adds	r3, #4
 8007fda:	4619      	mov	r1, r3
 8007fdc:	481a      	ldr	r0, [pc, #104]	; (8008048 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007fde:	f7fe f8ee 	bl	80061be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007fe2:	e026      	b.n	8008032 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4413      	add	r3, r2
 8007fea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007fec:	4b14      	ldr	r3, [pc, #80]	; (8008040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d209      	bcs.n	8008010 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ffc:	4b13      	ldr	r3, [pc, #76]	; (800804c <prvAddCurrentTaskToDelayedList+0xc0>)
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	4b0f      	ldr	r3, [pc, #60]	; (8008040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	3304      	adds	r3, #4
 8008006:	4619      	mov	r1, r3
 8008008:	4610      	mov	r0, r2
 800800a:	f7fe f8fc 	bl	8006206 <vListInsert>
}
 800800e:	e010      	b.n	8008032 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008010:	4b0f      	ldr	r3, [pc, #60]	; (8008050 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	4b0a      	ldr	r3, [pc, #40]	; (8008040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3304      	adds	r3, #4
 800801a:	4619      	mov	r1, r3
 800801c:	4610      	mov	r0, r2
 800801e:	f7fe f8f2 	bl	8006206 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008022:	4b0c      	ldr	r3, [pc, #48]	; (8008054 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	429a      	cmp	r2, r3
 800802a:	d202      	bcs.n	8008032 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800802c:	4a09      	ldr	r2, [pc, #36]	; (8008054 <prvAddCurrentTaskToDelayedList+0xc8>)
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	6013      	str	r3, [r2, #0]
}
 8008032:	bf00      	nop
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	2000038c 	.word	0x2000038c
 8008040:	20000288 	.word	0x20000288
 8008044:	20000390 	.word	0x20000390
 8008048:	20000374 	.word	0x20000374
 800804c:	20000344 	.word	0x20000344
 8008050:	20000340 	.word	0x20000340
 8008054:	200003a8 	.word	0x200003a8

08008058 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	3b04      	subs	r3, #4
 8008068:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	3b04      	subs	r3, #4
 8008076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f023 0201 	bic.w	r2, r3, #1
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3b04      	subs	r3, #4
 8008086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008088:	4a0c      	ldr	r2, [pc, #48]	; (80080bc <pxPortInitialiseStack+0x64>)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	3b14      	subs	r3, #20
 8008092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	3b04      	subs	r3, #4
 800809e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f06f 0202 	mvn.w	r2, #2
 80080a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	3b20      	subs	r3, #32
 80080ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080ae:	68fb      	ldr	r3, [r7, #12]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	080080c1 	.word	0x080080c1

080080c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80080c6:	2300      	movs	r3, #0
 80080c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80080ca:	4b11      	ldr	r3, [pc, #68]	; (8008110 <prvTaskExitError+0x50>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d2:	d009      	beq.n	80080e8 <prvTaskExitError+0x28>
 80080d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	60fb      	str	r3, [r7, #12]
 80080e6:	e7fe      	b.n	80080e6 <prvTaskExitError+0x26>
 80080e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ec:	f383 8811 	msr	BASEPRI, r3
 80080f0:	f3bf 8f6f 	isb	sy
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80080fa:	bf00      	nop
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d0fc      	beq.n	80080fc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008102:	bf00      	nop
 8008104:	3714      	adds	r7, #20
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	2000000c 	.word	0x2000000c
	...

08008120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008120:	4b07      	ldr	r3, [pc, #28]	; (8008140 <pxCurrentTCBConst2>)
 8008122:	6819      	ldr	r1, [r3, #0]
 8008124:	6808      	ldr	r0, [r1, #0]
 8008126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812a:	f380 8809 	msr	PSP, r0
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f04f 0000 	mov.w	r0, #0
 8008136:	f380 8811 	msr	BASEPRI, r0
 800813a:	4770      	bx	lr
 800813c:	f3af 8000 	nop.w

08008140 <pxCurrentTCBConst2>:
 8008140:	20000288 	.word	0x20000288
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008144:	bf00      	nop
 8008146:	bf00      	nop

08008148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008148:	4808      	ldr	r0, [pc, #32]	; (800816c <prvPortStartFirstTask+0x24>)
 800814a:	6800      	ldr	r0, [r0, #0]
 800814c:	6800      	ldr	r0, [r0, #0]
 800814e:	f380 8808 	msr	MSP, r0
 8008152:	f04f 0000 	mov.w	r0, #0
 8008156:	f380 8814 	msr	CONTROL, r0
 800815a:	b662      	cpsie	i
 800815c:	b661      	cpsie	f
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	f3bf 8f6f 	isb	sy
 8008166:	df00      	svc	0
 8008168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800816a:	bf00      	nop
 800816c:	e000ed08 	.word	0xe000ed08

08008170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008176:	4b44      	ldr	r3, [pc, #272]	; (8008288 <xPortStartScheduler+0x118>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a44      	ldr	r2, [pc, #272]	; (800828c <xPortStartScheduler+0x11c>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d109      	bne.n	8008194 <xPortStartScheduler+0x24>
 8008180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	613b      	str	r3, [r7, #16]
 8008192:	e7fe      	b.n	8008192 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008194:	4b3c      	ldr	r3, [pc, #240]	; (8008288 <xPortStartScheduler+0x118>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a3d      	ldr	r2, [pc, #244]	; (8008290 <xPortStartScheduler+0x120>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d109      	bne.n	80081b2 <xPortStartScheduler+0x42>
 800819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	60fb      	str	r3, [r7, #12]
 80081b0:	e7fe      	b.n	80081b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80081b2:	4b38      	ldr	r3, [pc, #224]	; (8008294 <xPortStartScheduler+0x124>)
 80081b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	22ff      	movs	r2, #255	; 0xff
 80081c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80081cc:	78fb      	ldrb	r3, [r7, #3]
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80081d4:	b2da      	uxtb	r2, r3
 80081d6:	4b30      	ldr	r3, [pc, #192]	; (8008298 <xPortStartScheduler+0x128>)
 80081d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80081da:	4b30      	ldr	r3, [pc, #192]	; (800829c <xPortStartScheduler+0x12c>)
 80081dc:	2207      	movs	r2, #7
 80081de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081e0:	e009      	b.n	80081f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80081e2:	4b2e      	ldr	r3, [pc, #184]	; (800829c <xPortStartScheduler+0x12c>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	4a2c      	ldr	r2, [pc, #176]	; (800829c <xPortStartScheduler+0x12c>)
 80081ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80081ec:	78fb      	ldrb	r3, [r7, #3]
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	005b      	lsls	r3, r3, #1
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081f6:	78fb      	ldrb	r3, [r7, #3]
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081fe:	2b80      	cmp	r3, #128	; 0x80
 8008200:	d0ef      	beq.n	80081e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008202:	4b26      	ldr	r3, [pc, #152]	; (800829c <xPortStartScheduler+0x12c>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f1c3 0307 	rsb	r3, r3, #7
 800820a:	2b04      	cmp	r3, #4
 800820c:	d009      	beq.n	8008222 <xPortStartScheduler+0xb2>
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	60bb      	str	r3, [r7, #8]
 8008220:	e7fe      	b.n	8008220 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008222:	4b1e      	ldr	r3, [pc, #120]	; (800829c <xPortStartScheduler+0x12c>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	021b      	lsls	r3, r3, #8
 8008228:	4a1c      	ldr	r2, [pc, #112]	; (800829c <xPortStartScheduler+0x12c>)
 800822a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800822c:	4b1b      	ldr	r3, [pc, #108]	; (800829c <xPortStartScheduler+0x12c>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008234:	4a19      	ldr	r2, [pc, #100]	; (800829c <xPortStartScheduler+0x12c>)
 8008236:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	b2da      	uxtb	r2, r3
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008240:	4b17      	ldr	r3, [pc, #92]	; (80082a0 <xPortStartScheduler+0x130>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a16      	ldr	r2, [pc, #88]	; (80082a0 <xPortStartScheduler+0x130>)
 8008246:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800824a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800824c:	4b14      	ldr	r3, [pc, #80]	; (80082a0 <xPortStartScheduler+0x130>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a13      	ldr	r2, [pc, #76]	; (80082a0 <xPortStartScheduler+0x130>)
 8008252:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008256:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008258:	f000 f8d6 	bl	8008408 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800825c:	4b11      	ldr	r3, [pc, #68]	; (80082a4 <xPortStartScheduler+0x134>)
 800825e:	2200      	movs	r2, #0
 8008260:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008262:	f000 f8f5 	bl	8008450 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008266:	4b10      	ldr	r3, [pc, #64]	; (80082a8 <xPortStartScheduler+0x138>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a0f      	ldr	r2, [pc, #60]	; (80082a8 <xPortStartScheduler+0x138>)
 800826c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008270:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008272:	f7ff ff69 	bl	8008148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008276:	f7ff fa87 	bl	8007788 <vTaskSwitchContext>
	prvTaskExitError();
 800827a:	f7ff ff21 	bl	80080c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3718      	adds	r7, #24
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	e000ed00 	.word	0xe000ed00
 800828c:	410fc271 	.word	0x410fc271
 8008290:	410fc270 	.word	0x410fc270
 8008294:	e000e400 	.word	0xe000e400
 8008298:	200003b4 	.word	0x200003b4
 800829c:	200003b8 	.word	0x200003b8
 80082a0:	e000ed20 	.word	0xe000ed20
 80082a4:	2000000c 	.word	0x2000000c
 80082a8:	e000ef34 	.word	0xe000ef34

080082ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80082c4:	4b0e      	ldr	r3, [pc, #56]	; (8008300 <vPortEnterCritical+0x54>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	3301      	adds	r3, #1
 80082ca:	4a0d      	ldr	r2, [pc, #52]	; (8008300 <vPortEnterCritical+0x54>)
 80082cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80082ce:	4b0c      	ldr	r3, [pc, #48]	; (8008300 <vPortEnterCritical+0x54>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d10e      	bne.n	80082f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082d6:	4b0b      	ldr	r3, [pc, #44]	; (8008304 <vPortEnterCritical+0x58>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d009      	beq.n	80082f4 <vPortEnterCritical+0x48>
 80082e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	603b      	str	r3, [r7, #0]
 80082f2:	e7fe      	b.n	80082f2 <vPortEnterCritical+0x46>
	}
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr
 8008300:	2000000c 	.word	0x2000000c
 8008304:	e000ed04 	.word	0xe000ed04

08008308 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800830e:	4b11      	ldr	r3, [pc, #68]	; (8008354 <vPortExitCritical+0x4c>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d109      	bne.n	800832a <vPortExitCritical+0x22>
 8008316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831a:	f383 8811 	msr	BASEPRI, r3
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	f3bf 8f4f 	dsb	sy
 8008326:	607b      	str	r3, [r7, #4]
 8008328:	e7fe      	b.n	8008328 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800832a:	4b0a      	ldr	r3, [pc, #40]	; (8008354 <vPortExitCritical+0x4c>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3b01      	subs	r3, #1
 8008330:	4a08      	ldr	r2, [pc, #32]	; (8008354 <vPortExitCritical+0x4c>)
 8008332:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008334:	4b07      	ldr	r3, [pc, #28]	; (8008354 <vPortExitCritical+0x4c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d104      	bne.n	8008346 <vPortExitCritical+0x3e>
 800833c:	2300      	movs	r3, #0
 800833e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008346:	bf00      	nop
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	2000000c 	.word	0x2000000c
	...

08008360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008360:	f3ef 8009 	mrs	r0, PSP
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	4b15      	ldr	r3, [pc, #84]	; (80083c0 <pxCurrentTCBConst>)
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	f01e 0f10 	tst.w	lr, #16
 8008370:	bf08      	it	eq
 8008372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837a:	6010      	str	r0, [r2, #0]
 800837c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008380:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008384:	f380 8811 	msr	BASEPRI, r0
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f7ff f9fa 	bl	8007788 <vTaskSwitchContext>
 8008394:	f04f 0000 	mov.w	r0, #0
 8008398:	f380 8811 	msr	BASEPRI, r0
 800839c:	bc09      	pop	{r0, r3}
 800839e:	6819      	ldr	r1, [r3, #0]
 80083a0:	6808      	ldr	r0, [r1, #0]
 80083a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a6:	f01e 0f10 	tst.w	lr, #16
 80083aa:	bf08      	it	eq
 80083ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80083b0:	f380 8809 	msr	PSP, r0
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	f3af 8000 	nop.w

080083c0 <pxCurrentTCBConst>:
 80083c0:	20000288 	.word	0x20000288
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop

080083c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083e0:	f7ff f91a 	bl	8007618 <xTaskIncrementTick>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083ea:	4b06      	ldr	r3, [pc, #24]	; (8008404 <SysTick_Handler+0x3c>)
 80083ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083f0:	601a      	str	r2, [r3, #0]
 80083f2:	2300      	movs	r3, #0
 80083f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80083fc:	bf00      	nop
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	e000ed04 	.word	0xe000ed04

08008408 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008408:	b480      	push	{r7}
 800840a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800840c:	4b0b      	ldr	r3, [pc, #44]	; (800843c <vPortSetupTimerInterrupt+0x34>)
 800840e:	2200      	movs	r2, #0
 8008410:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008412:	4b0b      	ldr	r3, [pc, #44]	; (8008440 <vPortSetupTimerInterrupt+0x38>)
 8008414:	2200      	movs	r2, #0
 8008416:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008418:	4b0a      	ldr	r3, [pc, #40]	; (8008444 <vPortSetupTimerInterrupt+0x3c>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a0a      	ldr	r2, [pc, #40]	; (8008448 <vPortSetupTimerInterrupt+0x40>)
 800841e:	fba2 2303 	umull	r2, r3, r2, r3
 8008422:	099b      	lsrs	r3, r3, #6
 8008424:	4a09      	ldr	r2, [pc, #36]	; (800844c <vPortSetupTimerInterrupt+0x44>)
 8008426:	3b01      	subs	r3, #1
 8008428:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800842a:	4b04      	ldr	r3, [pc, #16]	; (800843c <vPortSetupTimerInterrupt+0x34>)
 800842c:	2207      	movs	r2, #7
 800842e:	601a      	str	r2, [r3, #0]
}
 8008430:	bf00      	nop
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	e000e010 	.word	0xe000e010
 8008440:	e000e018 	.word	0xe000e018
 8008444:	20000000 	.word	0x20000000
 8008448:	10624dd3 	.word	0x10624dd3
 800844c:	e000e014 	.word	0xe000e014

08008450 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008450:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008460 <vPortEnableVFP+0x10>
 8008454:	6801      	ldr	r1, [r0, #0]
 8008456:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800845a:	6001      	str	r1, [r0, #0]
 800845c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800845e:	bf00      	nop
 8008460:	e000ed88 	.word	0xe000ed88

08008464 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008464:	b480      	push	{r7}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800846a:	f3ef 8305 	mrs	r3, IPSR
 800846e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2b0f      	cmp	r3, #15
 8008474:	d913      	bls.n	800849e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008476:	4a16      	ldr	r2, [pc, #88]	; (80084d0 <vPortValidateInterruptPriority+0x6c>)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	4413      	add	r3, r2
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008480:	4b14      	ldr	r3, [pc, #80]	; (80084d4 <vPortValidateInterruptPriority+0x70>)
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	7afa      	ldrb	r2, [r7, #11]
 8008486:	429a      	cmp	r2, r3
 8008488:	d209      	bcs.n	800849e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800848a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	607b      	str	r3, [r7, #4]
 800849c:	e7fe      	b.n	800849c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800849e:	4b0e      	ldr	r3, [pc, #56]	; (80084d8 <vPortValidateInterruptPriority+0x74>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80084a6:	4b0d      	ldr	r3, [pc, #52]	; (80084dc <vPortValidateInterruptPriority+0x78>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d909      	bls.n	80084c2 <vPortValidateInterruptPriority+0x5e>
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	603b      	str	r3, [r7, #0]
 80084c0:	e7fe      	b.n	80084c0 <vPortValidateInterruptPriority+0x5c>
	}
 80084c2:	bf00      	nop
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	e000e3f0 	.word	0xe000e3f0
 80084d4:	200003b4 	.word	0x200003b4
 80084d8:	e000ed0c 	.word	0xe000ed0c
 80084dc:	200003b8 	.word	0x200003b8

080084e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b08a      	sub	sp, #40	; 0x28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084e8:	2300      	movs	r3, #0
 80084ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084ec:	f7fe ffea 	bl	80074c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084f0:	4b57      	ldr	r3, [pc, #348]	; (8008650 <pvPortMalloc+0x170>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d101      	bne.n	80084fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084f8:	f000 f90c 	bl	8008714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084fc:	4b55      	ldr	r3, [pc, #340]	; (8008654 <pvPortMalloc+0x174>)
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4013      	ands	r3, r2
 8008504:	2b00      	cmp	r3, #0
 8008506:	f040 808c 	bne.w	8008622 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d01c      	beq.n	800854a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008510:	2208      	movs	r2, #8
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4413      	add	r3, r2
 8008516:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f003 0307 	and.w	r3, r3, #7
 800851e:	2b00      	cmp	r3, #0
 8008520:	d013      	beq.n	800854a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f023 0307 	bic.w	r3, r3, #7
 8008528:	3308      	adds	r3, #8
 800852a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f003 0307 	and.w	r3, r3, #7
 8008532:	2b00      	cmp	r3, #0
 8008534:	d009      	beq.n	800854a <pvPortMalloc+0x6a>
 8008536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	617b      	str	r3, [r7, #20]
 8008548:	e7fe      	b.n	8008548 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d068      	beq.n	8008622 <pvPortMalloc+0x142>
 8008550:	4b41      	ldr	r3, [pc, #260]	; (8008658 <pvPortMalloc+0x178>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	429a      	cmp	r2, r3
 8008558:	d863      	bhi.n	8008622 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800855a:	4b40      	ldr	r3, [pc, #256]	; (800865c <pvPortMalloc+0x17c>)
 800855c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800855e:	4b3f      	ldr	r3, [pc, #252]	; (800865c <pvPortMalloc+0x17c>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008564:	e004      	b.n	8008570 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008568:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	429a      	cmp	r2, r3
 8008578:	d903      	bls.n	8008582 <pvPortMalloc+0xa2>
 800857a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1f1      	bne.n	8008566 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008582:	4b33      	ldr	r3, [pc, #204]	; (8008650 <pvPortMalloc+0x170>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008588:	429a      	cmp	r2, r3
 800858a:	d04a      	beq.n	8008622 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800858c:	6a3b      	ldr	r3, [r7, #32]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2208      	movs	r2, #8
 8008592:	4413      	add	r3, r2
 8008594:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	6a3b      	ldr	r3, [r7, #32]
 800859c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800859e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a0:	685a      	ldr	r2, [r3, #4]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	1ad2      	subs	r2, r2, r3
 80085a6:	2308      	movs	r3, #8
 80085a8:	005b      	lsls	r3, r3, #1
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d91e      	bls.n	80085ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80085ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4413      	add	r3, r2
 80085b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	f003 0307 	and.w	r3, r3, #7
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d009      	beq.n	80085d4 <pvPortMalloc+0xf4>
 80085c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	613b      	str	r3, [r7, #16]
 80085d2:	e7fe      	b.n	80085d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	685a      	ldr	r2, [r3, #4]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	1ad2      	subs	r2, r2, r3
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085e6:	69b8      	ldr	r0, [r7, #24]
 80085e8:	f000 f8f6 	bl	80087d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085ec:	4b1a      	ldr	r3, [pc, #104]	; (8008658 <pvPortMalloc+0x178>)
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	4a18      	ldr	r2, [pc, #96]	; (8008658 <pvPortMalloc+0x178>)
 80085f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085fa:	4b17      	ldr	r3, [pc, #92]	; (8008658 <pvPortMalloc+0x178>)
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	4b18      	ldr	r3, [pc, #96]	; (8008660 <pvPortMalloc+0x180>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	429a      	cmp	r2, r3
 8008604:	d203      	bcs.n	800860e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008606:	4b14      	ldr	r3, [pc, #80]	; (8008658 <pvPortMalloc+0x178>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a15      	ldr	r2, [pc, #84]	; (8008660 <pvPortMalloc+0x180>)
 800860c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008610:	685a      	ldr	r2, [r3, #4]
 8008612:	4b10      	ldr	r3, [pc, #64]	; (8008654 <pvPortMalloc+0x174>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	431a      	orrs	r2, r3
 8008618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861e:	2200      	movs	r2, #0
 8008620:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008622:	f7fe ff5d 	bl	80074e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	f003 0307 	and.w	r3, r3, #7
 800862c:	2b00      	cmp	r3, #0
 800862e:	d009      	beq.n	8008644 <pvPortMalloc+0x164>
 8008630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008634:	f383 8811 	msr	BASEPRI, r3
 8008638:	f3bf 8f6f 	isb	sy
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	60fb      	str	r3, [r7, #12]
 8008642:	e7fe      	b.n	8008642 <pvPortMalloc+0x162>
	return pvReturn;
 8008644:	69fb      	ldr	r3, [r7, #28]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3728      	adds	r7, #40	; 0x28
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	20000f7c 	.word	0x20000f7c
 8008654:	20000f88 	.word	0x20000f88
 8008658:	20000f80 	.word	0x20000f80
 800865c:	20000f74 	.word	0x20000f74
 8008660:	20000f84 	.word	0x20000f84

08008664 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d046      	beq.n	8008704 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008676:	2308      	movs	r3, #8
 8008678:	425b      	negs	r3, r3
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	4413      	add	r3, r2
 800867e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	4b20      	ldr	r3, [pc, #128]	; (800870c <vPortFree+0xa8>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4013      	ands	r3, r2
 800868e:	2b00      	cmp	r3, #0
 8008690:	d109      	bne.n	80086a6 <vPortFree+0x42>
 8008692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008696:	f383 8811 	msr	BASEPRI, r3
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	60fb      	str	r3, [r7, #12]
 80086a4:	e7fe      	b.n	80086a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d009      	beq.n	80086c2 <vPortFree+0x5e>
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	60bb      	str	r3, [r7, #8]
 80086c0:	e7fe      	b.n	80086c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	685a      	ldr	r2, [r3, #4]
 80086c6:	4b11      	ldr	r3, [pc, #68]	; (800870c <vPortFree+0xa8>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4013      	ands	r3, r2
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d019      	beq.n	8008704 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d115      	bne.n	8008704 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	685a      	ldr	r2, [r3, #4]
 80086dc:	4b0b      	ldr	r3, [pc, #44]	; (800870c <vPortFree+0xa8>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	43db      	mvns	r3, r3
 80086e2:	401a      	ands	r2, r3
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086e8:	f7fe feec 	bl	80074c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	4b07      	ldr	r3, [pc, #28]	; (8008710 <vPortFree+0xac>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4413      	add	r3, r2
 80086f6:	4a06      	ldr	r2, [pc, #24]	; (8008710 <vPortFree+0xac>)
 80086f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086fa:	6938      	ldr	r0, [r7, #16]
 80086fc:	f000 f86c 	bl	80087d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008700:	f7fe feee 	bl	80074e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008704:	bf00      	nop
 8008706:	3718      	adds	r7, #24
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	20000f88 	.word	0x20000f88
 8008710:	20000f80 	.word	0x20000f80

08008714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800871a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800871e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008720:	4b27      	ldr	r3, [pc, #156]	; (80087c0 <prvHeapInit+0xac>)
 8008722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f003 0307 	and.w	r3, r3, #7
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00c      	beq.n	8008748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	3307      	adds	r3, #7
 8008732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f023 0307 	bic.w	r3, r3, #7
 800873a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	4a1f      	ldr	r2, [pc, #124]	; (80087c0 <prvHeapInit+0xac>)
 8008744:	4413      	add	r3, r2
 8008746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800874c:	4a1d      	ldr	r2, [pc, #116]	; (80087c4 <prvHeapInit+0xb0>)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008752:	4b1c      	ldr	r3, [pc, #112]	; (80087c4 <prvHeapInit+0xb0>)
 8008754:	2200      	movs	r2, #0
 8008756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	4413      	add	r3, r2
 800875e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008760:	2208      	movs	r2, #8
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	1a9b      	subs	r3, r3, r2
 8008766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f023 0307 	bic.w	r3, r3, #7
 800876e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	4a15      	ldr	r2, [pc, #84]	; (80087c8 <prvHeapInit+0xb4>)
 8008774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008776:	4b14      	ldr	r3, [pc, #80]	; (80087c8 <prvHeapInit+0xb4>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2200      	movs	r2, #0
 800877c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800877e:	4b12      	ldr	r3, [pc, #72]	; (80087c8 <prvHeapInit+0xb4>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2200      	movs	r2, #0
 8008784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	1ad2      	subs	r2, r2, r3
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008794:	4b0c      	ldr	r3, [pc, #48]	; (80087c8 <prvHeapInit+0xb4>)
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	4a0a      	ldr	r2, [pc, #40]	; (80087cc <prvHeapInit+0xb8>)
 80087a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	4a09      	ldr	r2, [pc, #36]	; (80087d0 <prvHeapInit+0xbc>)
 80087aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80087ac:	4b09      	ldr	r3, [pc, #36]	; (80087d4 <prvHeapInit+0xc0>)
 80087ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80087b2:	601a      	str	r2, [r3, #0]
}
 80087b4:	bf00      	nop
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr
 80087c0:	200003bc 	.word	0x200003bc
 80087c4:	20000f74 	.word	0x20000f74
 80087c8:	20000f7c 	.word	0x20000f7c
 80087cc:	20000f84 	.word	0x20000f84
 80087d0:	20000f80 	.word	0x20000f80
 80087d4:	20000f88 	.word	0x20000f88

080087d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087e0:	4b28      	ldr	r3, [pc, #160]	; (8008884 <prvInsertBlockIntoFreeList+0xac>)
 80087e2:	60fb      	str	r3, [r7, #12]
 80087e4:	e002      	b.n	80087ec <prvInsertBlockIntoFreeList+0x14>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	60fb      	str	r3, [r7, #12]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d8f7      	bhi.n	80087e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	4413      	add	r3, r2
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	429a      	cmp	r2, r3
 8008806:	d108      	bne.n	800881a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	441a      	add	r2, r3
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	441a      	add	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	429a      	cmp	r2, r3
 800882c:	d118      	bne.n	8008860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	4b15      	ldr	r3, [pc, #84]	; (8008888 <prvInsertBlockIntoFreeList+0xb0>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	429a      	cmp	r2, r3
 8008838:	d00d      	beq.n	8008856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	441a      	add	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	e008      	b.n	8008868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008856:	4b0c      	ldr	r3, [pc, #48]	; (8008888 <prvInsertBlockIntoFreeList+0xb0>)
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	601a      	str	r2, [r3, #0]
 800885e:	e003      	b.n	8008868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	429a      	cmp	r2, r3
 800886e:	d002      	beq.n	8008876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008876:	bf00      	nop
 8008878:	3714      	adds	r7, #20
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	20000f74 	.word	0x20000f74
 8008888:	20000f7c 	.word	0x20000f7c

0800888c <__libc_init_array>:
 800888c:	b570      	push	{r4, r5, r6, lr}
 800888e:	4e0d      	ldr	r6, [pc, #52]	; (80088c4 <__libc_init_array+0x38>)
 8008890:	4c0d      	ldr	r4, [pc, #52]	; (80088c8 <__libc_init_array+0x3c>)
 8008892:	1ba4      	subs	r4, r4, r6
 8008894:	10a4      	asrs	r4, r4, #2
 8008896:	2500      	movs	r5, #0
 8008898:	42a5      	cmp	r5, r4
 800889a:	d109      	bne.n	80088b0 <__libc_init_array+0x24>
 800889c:	4e0b      	ldr	r6, [pc, #44]	; (80088cc <__libc_init_array+0x40>)
 800889e:	4c0c      	ldr	r4, [pc, #48]	; (80088d0 <__libc_init_array+0x44>)
 80088a0:	f000 f82c 	bl	80088fc <_init>
 80088a4:	1ba4      	subs	r4, r4, r6
 80088a6:	10a4      	asrs	r4, r4, #2
 80088a8:	2500      	movs	r5, #0
 80088aa:	42a5      	cmp	r5, r4
 80088ac:	d105      	bne.n	80088ba <__libc_init_array+0x2e>
 80088ae:	bd70      	pop	{r4, r5, r6, pc}
 80088b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80088b4:	4798      	blx	r3
 80088b6:	3501      	adds	r5, #1
 80088b8:	e7ee      	b.n	8008898 <__libc_init_array+0xc>
 80088ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80088be:	4798      	blx	r3
 80088c0:	3501      	adds	r5, #1
 80088c2:	e7f2      	b.n	80088aa <__libc_init_array+0x1e>
 80088c4:	08008a10 	.word	0x08008a10
 80088c8:	08008a10 	.word	0x08008a10
 80088cc:	08008a10 	.word	0x08008a10
 80088d0:	08008a14 	.word	0x08008a14

080088d4 <memcpy>:
 80088d4:	b510      	push	{r4, lr}
 80088d6:	1e43      	subs	r3, r0, #1
 80088d8:	440a      	add	r2, r1
 80088da:	4291      	cmp	r1, r2
 80088dc:	d100      	bne.n	80088e0 <memcpy+0xc>
 80088de:	bd10      	pop	{r4, pc}
 80088e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088e8:	e7f7      	b.n	80088da <memcpy+0x6>

080088ea <memset>:
 80088ea:	4402      	add	r2, r0
 80088ec:	4603      	mov	r3, r0
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d100      	bne.n	80088f4 <memset+0xa>
 80088f2:	4770      	bx	lr
 80088f4:	f803 1b01 	strb.w	r1, [r3], #1
 80088f8:	e7f9      	b.n	80088ee <memset+0x4>
	...

080088fc <_init>:
 80088fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fe:	bf00      	nop
 8008900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008902:	bc08      	pop	{r3}
 8008904:	469e      	mov	lr, r3
 8008906:	4770      	bx	lr

08008908 <_fini>:
 8008908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890a:	bf00      	nop
 800890c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800890e:	bc08      	pop	{r3}
 8008910:	469e      	mov	lr, r3
 8008912:	4770      	bx	lr
