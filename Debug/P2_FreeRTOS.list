
P2_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008294  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08008454  08008454  00018454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008538  08008538  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008538  08008538  00018538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008540  08008540  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008540  08008540  00018540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008544  08008544  00018544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000124c  20000010  08008558  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000125c  08008558  0002125c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002380e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e27  00000000  00000000  0004384e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001cc0  00000000  00000000  00047678  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001af8  00000000  00000000  00049338  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000338cd  00000000  00000000  0004ae30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000174fa  00000000  00000000  0007e6fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00138566  00000000  00000000  00095bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ce15d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079f0  00000000  00000000  001ce1d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800843c 	.word	0x0800843c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	0800843c 	.word	0x0800843c

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b972 	b.w	80004fc <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	4688      	mov	r8, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14b      	bne.n	80002d6 <__udivmoddi4+0xa6>
 800023e:	428a      	cmp	r2, r1
 8000240:	4615      	mov	r5, r2
 8000242:	d967      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0720 	rsb	r7, r2, #32
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	fa20 f707 	lsr.w	r7, r0, r7
 8000256:	4095      	lsls	r5, r2
 8000258:	ea47 0803 	orr.w	r8, r7, r3
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbb8 f7fe 	udiv	r7, r8, lr
 8000268:	fa1f fc85 	uxth.w	ip, r5
 800026c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000270:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000274:	fb07 f10c 	mul.w	r1, r7, ip
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18eb      	adds	r3, r5, r3
 800027e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000282:	f080 811b 	bcs.w	80004bc <__udivmoddi4+0x28c>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8118 	bls.w	80004bc <__udivmoddi4+0x28c>
 800028c:	3f02      	subs	r7, #2
 800028e:	442b      	add	r3, r5
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0fe 	udiv	r0, r3, lr
 8000298:	fb0e 3310 	mls	r3, lr, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a4:	45a4      	cmp	ip, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	192c      	adds	r4, r5, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x290>
 80002b2:	45a4      	cmp	ip, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x290>
 80002b8:	3802      	subs	r0, #2
 80002ba:	442c      	add	r4, r5
 80002bc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c0:	eba4 040c 	sub.w	r4, r4, ip
 80002c4:	2700      	movs	r7, #0
 80002c6:	b11e      	cbz	r6, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c6 4300 	strd	r4, r3, [r6]
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xbe>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80eb 	beq.w	80004b6 <__udivmoddi4+0x286>
 80002e0:	2700      	movs	r7, #0
 80002e2:	e9c6 0100 	strd	r0, r1, [r6]
 80002e6:	4638      	mov	r0, r7
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f783 	clz	r7, r3
 80002f2:	2f00      	cmp	r7, #0
 80002f4:	d147      	bne.n	8000386 <__udivmoddi4+0x156>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd0>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80fa 	bhi.w	80004f4 <__udivmoddi4+0x2c4>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	4698      	mov	r8, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800030e:	e9c6 4800 	strd	r4, r8, [r6]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xe8>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 808f 	bne.w	8000440 <__udivmoddi4+0x210>
 8000322:	1b49      	subs	r1, r1, r5
 8000324:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000328:	fa1f f885 	uxth.w	r8, r5
 800032c:	2701      	movs	r7, #1
 800032e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fb0e 111c 	mls	r1, lr, ip, r1
 8000338:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800033c:	fb08 f10c 	mul.w	r1, r8, ip
 8000340:	4299      	cmp	r1, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x124>
 8000344:	18eb      	adds	r3, r5, r3
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4299      	cmp	r1, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 8000352:	4684      	mov	ip, r0
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000360:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x14c>
 800036c:	192c      	adds	r4, r5, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x14a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80b6 	bhi.w	80004e6 <__udivmoddi4+0x2b6>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e79f      	b.n	80002c6 <__udivmoddi4+0x96>
 8000386:	f1c7 0c20 	rsb	ip, r7, #32
 800038a:	40bb      	lsls	r3, r7
 800038c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000390:	ea4e 0e03 	orr.w	lr, lr, r3
 8000394:	fa01 f407 	lsl.w	r4, r1, r7
 8000398:	fa20 f50c 	lsr.w	r5, r0, ip
 800039c:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a4:	4325      	orrs	r5, r4
 80003a6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003aa:	0c2c      	lsrs	r4, r5, #16
 80003ac:	fb08 3319 	mls	r3, r8, r9, r3
 80003b0:	fa1f fa8e 	uxth.w	sl, lr
 80003b4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b8:	fb09 f40a 	mul.w	r4, r9, sl
 80003bc:	429c      	cmp	r4, r3
 80003be:	fa02 f207 	lsl.w	r2, r2, r7
 80003c2:	fa00 f107 	lsl.w	r1, r0, r7
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1e 0303 	adds.w	r3, lr, r3
 80003cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d0:	f080 8087 	bcs.w	80004e2 <__udivmoddi4+0x2b2>
 80003d4:	429c      	cmp	r4, r3
 80003d6:	f240 8084 	bls.w	80004e2 <__udivmoddi4+0x2b2>
 80003da:	f1a9 0902 	sub.w	r9, r9, #2
 80003de:	4473      	add	r3, lr
 80003e0:	1b1b      	subs	r3, r3, r4
 80003e2:	b2ad      	uxth	r5, r5
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1e 0404 	adds.w	r4, lr, r4
 80003fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000400:	d26b      	bcs.n	80004da <__udivmoddi4+0x2aa>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d969      	bls.n	80004da <__udivmoddi4+0x2aa>
 8000406:	3802      	subs	r0, #2
 8000408:	4474      	add	r4, lr
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c2      	mov	sl, r8
 800041a:	464b      	mov	r3, r9
 800041c:	d354      	bcc.n	80004c8 <__udivmoddi4+0x298>
 800041e:	d051      	beq.n	80004c4 <__udivmoddi4+0x294>
 8000420:	2e00      	cmp	r6, #0
 8000422:	d069      	beq.n	80004f8 <__udivmoddi4+0x2c8>
 8000424:	ebb1 050a 	subs.w	r5, r1, sl
 8000428:	eb64 0403 	sbc.w	r4, r4, r3
 800042c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000430:	40fd      	lsrs	r5, r7
 8000432:	40fc      	lsrs	r4, r7
 8000434:	ea4c 0505 	orr.w	r5, ip, r5
 8000438:	e9c6 5400 	strd	r5, r4, [r6]
 800043c:	2700      	movs	r7, #0
 800043e:	e747      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000440:	f1c2 0320 	rsb	r3, r2, #32
 8000444:	fa20 f703 	lsr.w	r7, r0, r3
 8000448:	4095      	lsls	r5, r2
 800044a:	fa01 f002 	lsl.w	r0, r1, r2
 800044e:	fa21 f303 	lsr.w	r3, r1, r3
 8000452:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000456:	4338      	orrs	r0, r7
 8000458:	0c01      	lsrs	r1, r0, #16
 800045a:	fbb3 f7fe 	udiv	r7, r3, lr
 800045e:	fa1f f885 	uxth.w	r8, r5
 8000462:	fb0e 3317 	mls	r3, lr, r7, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb07 f308 	mul.w	r3, r7, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	fa04 f402 	lsl.w	r4, r4, r2
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x256>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f107 3cff 	add.w	ip, r7, #4294967295
 800047c:	d22f      	bcs.n	80004de <__udivmoddi4+0x2ae>
 800047e:	428b      	cmp	r3, r1
 8000480:	d92d      	bls.n	80004de <__udivmoddi4+0x2ae>
 8000482:	3f02      	subs	r7, #2
 8000484:	4429      	add	r1, r5
 8000486:	1acb      	subs	r3, r1, r3
 8000488:	b281      	uxth	r1, r0
 800048a:	fbb3 f0fe 	udiv	r0, r3, lr
 800048e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb00 f308 	mul.w	r3, r0, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x27e>
 800049e:	1869      	adds	r1, r5, r1
 80004a0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a4:	d217      	bcs.n	80004d6 <__udivmoddi4+0x2a6>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d915      	bls.n	80004d6 <__udivmoddi4+0x2a6>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4429      	add	r1, r5
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b4:	e73b      	b.n	800032e <__udivmoddi4+0xfe>
 80004b6:	4637      	mov	r7, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e709      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004bc:	4607      	mov	r7, r0
 80004be:	e6e7      	b.n	8000290 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c4:	4541      	cmp	r1, r8
 80004c6:	d2ab      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004c8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004cc:	eb69 020e 	sbc.w	r2, r9, lr
 80004d0:	3801      	subs	r0, #1
 80004d2:	4613      	mov	r3, r2
 80004d4:	e7a4      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d6:	4660      	mov	r0, ip
 80004d8:	e7e9      	b.n	80004ae <__udivmoddi4+0x27e>
 80004da:	4618      	mov	r0, r3
 80004dc:	e795      	b.n	800040a <__udivmoddi4+0x1da>
 80004de:	4667      	mov	r7, ip
 80004e0:	e7d1      	b.n	8000486 <__udivmoddi4+0x256>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e77c      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	442c      	add	r4, r5
 80004ea:	e747      	b.n	800037c <__udivmoddi4+0x14c>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	442b      	add	r3, r5
 80004f2:	e72f      	b.n	8000354 <__udivmoddi4+0x124>
 80004f4:	4638      	mov	r0, r7
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xda>
 80004f8:	4637      	mov	r7, r6
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0xa0>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	4a07      	ldr	r2, [pc, #28]	; (800052c <vApplicationGetIdleTaskMemory+0x2c>)
 8000510:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	4a06      	ldr	r2, [pc, #24]	; (8000530 <vApplicationGetIdleTaskMemory+0x30>)
 8000516:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	2000002c 	.word	0x2000002c
 8000530:	20000080 	.word	0x20000080

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b09a      	sub	sp, #104	; 0x68
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f001 fb71 	bl	8001c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f86f 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000542:	f000 f993 	bl	800086c <MX_GPIO_Init>
  MX_TIM16_Init();
 8000546:	f000 f91f 	bl	8000788 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800054a:	f000 f943 	bl	80007d4 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 800054e:	f000 f8dd 	bl	800070c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  InicializaSensores();
 8000552:	f000 fc6b 	bl	8000e2c <InicializaSensores>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of SemaforoLED */
  osSemaphoreDef(SemaforoLED);
 8000556:	2300      	movs	r3, #0
 8000558:	663b      	str	r3, [r7, #96]	; 0x60
 800055a:	2300      	movs	r3, #0
 800055c:	667b      	str	r3, [r7, #100]	; 0x64
  SemaforoLEDHandle = osSemaphoreCreate(osSemaphore(SemaforoLED), 1);
 800055e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000562:	2101      	movs	r1, #1
 8000564:	4618      	mov	r0, r3
 8000566:	f005 fc5c 	bl	8005e22 <osSemaphoreCreate>
 800056a:	4602      	mov	r2, r0
 800056c:	4b24      	ldr	r3, [pc, #144]	; (8000600 <main+0xcc>)
 800056e:	601a      	str	r2, [r3, #0]

  /* definition and creation of SemaforoUART */
  osSemaphoreDef(SemaforoUART);
 8000570:	2300      	movs	r3, #0
 8000572:	65bb      	str	r3, [r7, #88]	; 0x58
 8000574:	2300      	movs	r3, #0
 8000576:	65fb      	str	r3, [r7, #92]	; 0x5c
  SemaforoUARTHandle = osSemaphoreCreate(osSemaphore(SemaforoUART), 1);
 8000578:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800057c:	2101      	movs	r1, #1
 800057e:	4618      	mov	r0, r3
 8000580:	f005 fc4f 	bl	8005e22 <osSemaphoreCreate>
 8000584:	4602      	mov	r2, r0
 8000586:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <main+0xd0>)
 8000588:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, LED_blink, osPriorityNormal, 0, 128);
 800058a:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <main+0xd4>)
 800058c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000590:	461d      	mov	r5, r3
 8000592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000596:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800059a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 800059e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f005 fbdc 	bl	8005d62 <osThreadCreate>
 80005aa:	4602      	mov	r2, r0
 80005ac:	4b17      	ldr	r3, [pc, #92]	; (800060c <main+0xd8>)
 80005ae:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, MuestreaAcc, osPriorityLow, 0, 128);
 80005b0:	4b17      	ldr	r3, [pc, #92]	; (8000610 <main+0xdc>)
 80005b2:	f107 0420 	add.w	r4, r7, #32
 80005b6:	461d      	mov	r5, r3
 80005b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80005c4:	f107 0320 	add.w	r3, r7, #32
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f005 fbc9 	bl	8005d62 <osThreadCreate>
 80005d0:	4602      	mov	r2, r0
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <main+0xe0>)
 80005d4:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task3 */
  osThreadDef(Task3, MandaDatos, osPriorityLow, 0, 128);
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <main+0xe4>)
 80005d8:	1d3c      	adds	r4, r7, #4
 80005da:	461d      	mov	r5, r3
 80005dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f005 fbb8 	bl	8005d62 <osThreadCreate>
 80005f2:	4602      	mov	r2, r0
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <main+0xe8>)
 80005f6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f8:	f005 fbac 	bl	8005d54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0xc8>
 80005fe:	bf00      	nop
 8000600:	200010d8 	.word	0x200010d8
 8000604:	20001010 	.word	0x20001010
 8000608:	0800845c 	.word	0x0800845c
 800060c:	20001014 	.word	0x20001014
 8000610:	08008480 	.word	0x08008480
 8000614:	200010b8 	.word	0x200010b8
 8000618:	080084a4 	.word	0x080084a4
 800061c:	200010b4 	.word	0x200010b4

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b0be      	sub	sp, #248	; 0xf8
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800062a:	2244      	movs	r2, #68	; 0x44
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f007 fefb 	bl	800842a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	229c      	movs	r2, #156	; 0x9c
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f007 feed 	bl	800842a <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000650:	2000      	movs	r0, #0
 8000652:	f002 fc89 	bl	8002f68 <HAL_PWREx_ControlVoltageScaling>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x40>
  {
    Error_Handler();
 800065c:	f000 fcc6 	bl	8000fec <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000666:	f44f 7380 	mov.w	r3, #256	; 0x100
 800066a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066e:	2340      	movs	r3, #64	; 0x40
 8000670:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067a:	2302      	movs	r3, #2
 800067c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000680:	2302      	movs	r3, #2
 8000682:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000686:	231e      	movs	r3, #30
 8000688:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 fd14 	bl	80030d0 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006ae:	f000 fc9d 	bl	8000fec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2303      	movs	r3, #3
 80006ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006d4:	2105      	movs	r1, #5
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 f920 	bl	800391c <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006e2:	f000 fc83 	bl	8000fec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C2;
 80006e6:	2382      	movs	r3, #130	; 0x82
 80006e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	4618      	mov	r0, r3
 80006f6:	f003 fbef 	bl	8003ed8 <HAL_RCCEx_PeriphCLKConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000700:	f000 fc74 	bl	8000fec <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	37f8      	adds	r7, #248	; 0xf8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_SPI3_Init+0x74>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	; (8000784 <MX_SPI3_Init+0x78>)
 8000714:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_SPI3_Init+0x74>)
 8000718:	f44f 7282 	mov.w	r2, #260	; 0x104
 800071c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_SPI3_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_SPI3_Init+0x74>)
 8000726:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800072a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_SPI3_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_SPI3_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_SPI3_Init+0x74>)
 800073a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800073e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_SPI3_Init+0x74>)
 8000742:	2218      	movs	r2, #24
 8000744:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_SPI3_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_SPI3_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_SPI3_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_SPI3_Init+0x74>)
 800075a:	2207      	movs	r2, #7
 800075c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_SPI3_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_SPI3_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_SPI3_Init+0x74>)
 800076c:	f004 f91c 	bl	80049a8 <HAL_SPI_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000776:	f000 fc39 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000fa8 	.word	0x20000fa8
 8000784:	40003c00 	.word	0x40003c00

08000788 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_TIM16_Init+0x44>)
 800078e:	4a10      	ldr	r2, [pc, #64]	; (80007d0 <MX_TIM16_Init+0x48>)
 8000790:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 180;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_TIM16_Init+0x44>)
 8000794:	22b4      	movs	r2, #180	; 0xb4
 8000796:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_TIM16_Init+0x44>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_TIM16_Init+0x44>)
 80007a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007a4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_TIM16_Init+0x44>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_TIM16_Init+0x44>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_TIM16_Init+0x44>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_TIM16_Init+0x44>)
 80007ba:	f004 f998 	bl	8004aee <HAL_TIM_Base_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80007c4:	f000 fc12 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20001168 	.word	0x20001168
 80007d0:	40014400 	.word	0x40014400

080007d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d8:	4b22      	ldr	r3, [pc, #136]	; (8000864 <MX_USART2_UART_Init+0x90>)
 80007da:	4a23      	ldr	r2, [pc, #140]	; (8000868 <MX_USART2_UART_Init+0x94>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <MX_USART2_UART_Init+0x90>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <MX_USART2_UART_Init+0x90>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_USART2_UART_Init+0x90>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_USART2_UART_Init+0x90>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_USART2_UART_Init+0x90>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <MX_USART2_UART_Init+0x90>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_USART2_UART_Init+0x90>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_USART2_UART_Init+0x90>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_USART2_UART_Init+0x90>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_USART2_UART_Init+0x90>)
 8000818:	2200      	movs	r2, #0
 800081a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081c:	4811      	ldr	r0, [pc, #68]	; (8000864 <MX_USART2_UART_Init+0x90>)
 800081e:	f004 fc2d 	bl	800507c <HAL_UART_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000828:	f000 fbe0 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800082c:	2100      	movs	r1, #0
 800082e:	480d      	ldr	r0, [pc, #52]	; (8000864 <MX_USART2_UART_Init+0x90>)
 8000830:	f005 f981 	bl	8005b36 <HAL_UARTEx_SetTxFifoThreshold>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800083a:	f000 fbd7 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800083e:	2100      	movs	r1, #0
 8000840:	4808      	ldr	r0, [pc, #32]	; (8000864 <MX_USART2_UART_Init+0x90>)
 8000842:	f005 f9b6 	bl	8005bb2 <HAL_UARTEx_SetRxFifoThreshold>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800084c:	f000 fbce 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_USART2_UART_Init+0x90>)
 8000852:	f005 f937 	bl	8005ac4 <HAL_UARTEx_DisableFifoMode>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800085c:	f000 fbc6 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	200010dc 	.word	0x200010dc
 8000868:	40004400 	.word	0x40004400

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08e      	sub	sp, #56	; 0x38
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000882:	4bb5      	ldr	r3, [pc, #724]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4ab4      	ldr	r2, [pc, #720]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 8000888:	f043 0310 	orr.w	r3, r3, #16
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4bb2      	ldr	r3, [pc, #712]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0310 	and.w	r3, r3, #16
 8000896:	623b      	str	r3, [r7, #32]
 8000898:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	4baf      	ldr	r3, [pc, #700]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	4aae      	ldr	r2, [pc, #696]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a6:	4bac      	ldr	r3, [pc, #688]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	61fb      	str	r3, [r7, #28]
 80008b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b2:	4ba9      	ldr	r3, [pc, #676]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4aa8      	ldr	r2, [pc, #672]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4ba6      	ldr	r3, [pc, #664]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c6:	61bb      	str	r3, [r7, #24]
 80008c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	4ba3      	ldr	r3, [pc, #652]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4aa2      	ldr	r2, [pc, #648]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4ba0      	ldr	r3, [pc, #640]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b9d      	ldr	r3, [pc, #628]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a9c      	ldr	r2, [pc, #624]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b9a      	ldr	r3, [pc, #616]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fa:	4b97      	ldr	r3, [pc, #604]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	4a96      	ldr	r2, [pc, #600]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000906:	4b94      	ldr	r3, [pc, #592]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	f003 0308 	and.w	r3, r3, #8
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000912:	4b91      	ldr	r3, [pc, #580]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a90      	ldr	r2, [pc, #576]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 8000918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b8e      	ldr	r3, [pc, #568]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800092a:	f002 fbc1 	bl	80030b0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800092e:	4b8a      	ldr	r3, [pc, #552]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4a89      	ldr	r2, [pc, #548]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 8000934:	f043 0320 	orr.w	r3, r3, #32
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4b87      	ldr	r3, [pc, #540]	; (8000b58 <MX_GPIO_Init+0x2ec>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0320 	and.w	r3, r3, #32
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|DCDC_2_EN_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f242 0102 	movw	r1, #8194	; 0x2002
 800094c:	4883      	ldr	r0, [pc, #524]	; (8000b5c <MX_GPIO_Init+0x2f0>)
 800094e:	f001 fd05 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f648 0181 	movw	r1, #34945	; 0x8881
 8000958:	4881      	ldr	r0, [pc, #516]	; (8000b60 <MX_GPIO_Init+0x2f4>)
 800095a:	f001 fcff 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RST_GPIO_Port, BLE_RST_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000968:	f001 fcf8 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	2140      	movs	r1, #64	; 0x40
 8000970:	487c      	ldr	r0, [pc, #496]	; (8000b64 <MX_GPIO_Init+0x2f8>)
 8000972:	f001 fcf3 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 8000976:	2200      	movs	r2, #0
 8000978:	f247 5128 	movw	r1, #29992	; 0x7528
 800097c:	487a      	ldr	r0, [pc, #488]	; (8000b68 <MX_GPIO_Init+0x2fc>)
 800097e:	f001 fced 	bl	800235c <HAL_GPIO_WritePin>
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BLE_SPI_CS_Pin|SEL1_2_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2121      	movs	r1, #33	; 0x21
 8000986:	4879      	ldr	r0, [pc, #484]	; (8000b6c <MX_GPIO_Init+0x300>)
 8000988:	f001 fce8 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_MOSI_p2_Pin|PB11_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8000992:	4877      	ldr	r0, [pc, #476]	; (8000b70 <MX_GPIO_Init+0x304>)
 8000994:	f001 fce2 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOOT0_PE0_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0_Pin|BLE_TEST8_Pin;
 8000998:	f240 4301 	movw	r3, #1025	; 0x401
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009aa:	4619      	mov	r1, r3
 80009ac:	486b      	ldr	r0, [pc, #428]	; (8000b5c <MX_GPIO_Init+0x2f0>)
 80009ae:	f001 fa51 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9_Pin PB8_Pin PB14_Pin CHRGB0_Pin */
  GPIO_InitStruct.Pin = PB9_Pin|PB8_Pin|PB14_Pin|CHRGB0_Pin;
 80009b2:	f244 3301 	movw	r3, #17153	; 0x4301
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b8:	2303      	movs	r3, #3
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	486a      	ldr	r0, [pc, #424]	; (8000b70 <MX_GPIO_Init+0x304>)
 80009c8:	f001 fa44 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_PE0H3_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0H3_Pin;
 80009cc:	2308      	movs	r3, #8
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT0_PE0H3_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009dc:	4619      	mov	r1, r3
 80009de:	4865      	ldr	r0, [pc, #404]	; (8000b74 <MX_GPIO_Init+0x308>)
 80009e0:	f001 fa38 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_D3_Pin SDMMC_D2_Pin SDMMC_D1_Pin SDMMC_CK_Pin
                           SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D3_Pin|SDMMC_D2_Pin|SDMMC_D1_Pin|SDMMC_CK_Pin
 80009e4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDMMC_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80009f6:	230c      	movs	r3, #12
 80009f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fe:	4619      	mov	r1, r3
 8000a00:	4858      	ldr	r0, [pc, #352]	; (8000b64 <MX_GPIO_Init+0x2f8>)
 8000a02:	f001 fa27 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_TEST9_Pin WIFI_DRDY_Pin INT1_DHC_Pin INT_STT_Pin
                           INT1_ADWB_Pin */
  GPIO_InitStruct.Pin = BLE_TEST9_Pin|WIFI_DRDY_Pin|INT1_DHC_Pin|INT_STT_Pin
 8000a06:	f64c 1308 	movw	r3, #51464	; 0xc908
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
                          |INT1_ADWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a0c:	4b5a      	ldr	r3, [pc, #360]	; (8000b78 <MX_GPIO_Init+0x30c>)
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4850      	ldr	r0, [pc, #320]	; (8000b5c <MX_GPIO_Init+0x2f0>)
 8000a1c:	f001 fa1a 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI2_CLK_Pin;
 8000a20:	2302      	movs	r3, #2
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a30:	2305      	movs	r3, #5
 8000a32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4849      	ldr	r0, [pc, #292]	; (8000b60 <MX_GPIO_Init+0x2f4>)
 8000a3c:	f001 fa0a 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : EX_PWM_Pin */
  GPIO_InitStruct.Pin = EX_PWM_Pin;
 8000a40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a52:	2301      	movs	r3, #1
 8000a54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(EX_PWM_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a60:	f001 f9f8 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DP_Pin OTG_FS_DM_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DP_Pin|OTG_FS_DM_Pin;
 8000a64:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a76:	230a      	movs	r3, #10
 8000a78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	4619      	mov	r1, r3
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a84:	f001 f9e6 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SCK_A_Pin SAI1_MCLK_A_Pin SAI1_FS_A_DFSDM_D3_Pin SAI1_SD_A_Pin
                           SAI1_SD_B_Pin */
  GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_MCLK_A_Pin|SAI1_FS_A_DFSDM_D3_Pin|SAI1_SD_A_Pin
 8000a88:	23f4      	movs	r3, #244	; 0xf4
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SAI1_SD_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000a98:	230d      	movs	r3, #13
 8000a9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	482e      	ldr	r0, [pc, #184]	; (8000b5c <MX_GPIO_Init+0x2f0>)
 8000aa4:	f001 f9d6 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin DCDC_2_EN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|DCDC_2_EN_Pin;
 8000aa8:	f242 0302 	movw	r3, #8194	; 0x2002
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4826      	ldr	r0, [pc, #152]	; (8000b5c <MX_GPIO_Init+0x2f0>)
 8000ac2:	f001 f9c7 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin WIFI_WAKEUP_Pin CS_DH_Pin EX_RESET_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin;
 8000ac6:	f648 0381 	movw	r3, #34945	; 0x8881
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000adc:	4619      	mov	r1, r3
 8000ade:	4820      	ldr	r0, [pc, #128]	; (8000b60 <MX_GPIO_Init+0x2f4>)
 8000ae0:	f001 f9b8 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10_Pin PA9_Pin PA0_Pin DAC1_OUT1_Pin
                           PA1_Pin */
  GPIO_InitStruct.Pin = PA10_Pin|PA9_Pin|PA0_Pin|DAC1_OUT1_Pin
 8000ae4:	f240 6313 	movw	r3, #1555	; 0x613
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
                          |PA1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aea:	2303      	movs	r3, #3
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af6:	4619      	mov	r1, r3
 8000af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afc:	f001 f9aa 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN5_Pin DFSDM1_D7_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN5_Pin|DFSDM1_D7_Pin;
 8000b00:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000b12:	2306      	movs	r3, #6
 8000b14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4814      	ldr	r0, [pc, #80]	; (8000b70 <MX_GPIO_Init+0x304>)
 8000b1e:	f001 f999 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12_Pin PG10_Pin PG9_Pin */
  GPIO_InitStruct.Pin = PG12_Pin|PG10_Pin|PG9_Pin;
 8000b22:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	4619      	mov	r1, r3
 8000b36:	480d      	ldr	r0, [pc, #52]	; (8000b6c <MX_GPIO_Init+0x300>)
 8000b38:	f001 f98c 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b4c:	230c      	movs	r3, #12
 8000b4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	e011      	b.n	8000b7c <MX_GPIO_Init+0x310>
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	48001000 	.word	0x48001000
 8000b60:	48000c00 	.word	0x48000c00
 8000b64:	48000800 	.word	0x48000800
 8000b68:	48001400 	.word	0x48001400
 8000b6c:	48001800 	.word	0x48001800
 8000b70:	48000400 	.word	0x48000400
 8000b74:	48001c00 	.word	0x48001c00
 8000b78:	10110000 	.word	0x10110000
 8000b7c:	48a4      	ldr	r0, [pc, #656]	; (8000e10 <MX_GPIO_Init+0x5a4>)
 8000b7e:	f001 f969 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_RST_Pin */
  GPIO_InitStruct.Pin = BLE_RST_Pin;
 8000b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BLE_RST_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9e:	f001 f959 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 8000ba2:	2340      	movs	r3, #64	; 0x40
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4896      	ldr	r0, [pc, #600]	; (8000e14 <MX_GPIO_Init+0x5a8>)
 8000bba:	f001 f94b 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_WIFI_Pin C_EN_Pin CS_ADWB_Pin STSAFE_RESET_Pin
                           WIFI_BOOT0_Pin CS_DHC_Pin SEL3_4_Pin */
  GPIO_InitStruct.Pin = CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 8000bbe:	f247 5328 	movw	r3, #29992	; 0x7528
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4890      	ldr	r0, [pc, #576]	; (8000e18 <MX_GPIO_Init+0x5ac>)
 8000bd8:	f001 f93c 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C3_SDA_Pin I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 8000bdc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be2:	2312      	movs	r3, #18
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bee:	2304      	movs	r3, #4
 8000bf0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4888      	ldr	r0, [pc, #544]	; (8000e1c <MX_GPIO_Init+0x5b0>)
 8000bfa:	f001 f92b 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_SEL_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin;
 8000bfe:	2340      	movs	r3, #64	; 0x40
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SW_SEL_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	4619      	mov	r1, r3
 8000c18:	487f      	ldr	r0, [pc, #508]	; (8000e18 <MX_GPIO_Init+0x5ac>)
 8000c1a:	f001 f91b 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_DHC_Pin PGOOD_Pin INT_M_Pin */
  GPIO_InitStruct.Pin = INT2_DHC_Pin|PGOOD_Pin|INT_M_Pin;
 8000c1e:	f44f 7324 	mov.w	r3, #656	; 0x290
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c24:	4b7e      	ldr	r3, [pc, #504]	; (8000e20 <MX_GPIO_Init+0x5b4>)
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c30:	4619      	mov	r1, r3
 8000c32:	4879      	ldr	r0, [pc, #484]	; (8000e18 <MX_GPIO_Init+0x5ac>)
 8000c34:	f001 f90e 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin SPI1_CLK_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin|SPI1_CLK_Pin;
 8000c38:	231c      	movs	r3, #28
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c48:	2305      	movs	r3, #5
 8000c4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c50:	4619      	mov	r1, r3
 8000c52:	4872      	ldr	r0, [pc, #456]	; (8000e1c <MX_GPIO_Init+0x5b0>)
 8000c54:	f001 f8fe 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_SPI_CS_Pin SEL1_2_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin|SEL1_2_Pin;
 8000c58:	2321      	movs	r3, #33	; 0x21
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	486b      	ldr	r0, [pc, #428]	; (8000e1c <MX_GPIO_Init+0x5b0>)
 8000c70:	f001 f8f0 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_HTS_Pin BLE_INT_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin|BLE_INT_Pin;
 8000c74:	2342      	movs	r3, #66	; 0x42
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c78:	4b69      	ldr	r3, [pc, #420]	; (8000e20 <MX_GPIO_Init+0x5b4>)
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c84:	4619      	mov	r1, r3
 8000c86:	4865      	ldr	r0, [pc, #404]	; (8000e1c <MX_GPIO_Init+0x5b0>)
 8000c88:	f001 f8e4 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C4_SCL_Pin I2C4_SDA_Pin */
  GPIO_InitStruct.Pin = I2C4_SCL_Pin|I2C4_SDA_Pin;
 8000c8c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c92:	2312      	movs	r3, #18
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4859      	ldr	r0, [pc, #356]	; (8000e10 <MX_GPIO_Init+0x5a4>)
 8000caa:	f001 f8d3 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC1_IN1_Pin ADC1_IN2_Pin uC_ADC_BATT_Pin */
  GPIO_InitStruct.Pin = ADC1_IN1_Pin|ADC1_IN2_Pin|uC_ADC_BATT_Pin;
 8000cae:	2313      	movs	r3, #19
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cb2:	230b      	movs	r3, #11
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4854      	ldr	r0, [pc, #336]	; (8000e14 <MX_GPIO_Init+0x5a8>)
 8000cc2:	f001 f8c7 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000cc6:	230c      	movs	r3, #12
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cd6:	2305      	movs	r3, #5
 8000cd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cde:	4619      	mov	r1, r3
 8000ce0:	484c      	ldr	r0, [pc, #304]	; (8000e14 <MX_GPIO_Init+0x5a8>)
 8000ce2:	f001 f8b7 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_ADWB_Pin SD_DETECT_Pin */
  GPIO_InitStruct.Pin = INT2_ADWB_Pin|SD_DETECT_Pin;
 8000ce6:	f241 0304 	movw	r3, #4100	; 0x1004
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	484a      	ldr	r0, [pc, #296]	; (8000e24 <MX_GPIO_Init+0x5b8>)
 8000cfc:	f001 f8aa 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHRG_Pin */
  GPIO_InitStruct.Pin = CHRG_Pin;
 8000d00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHRG_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d12:	4619      	mov	r1, r3
 8000d14:	4840      	ldr	r0, [pc, #256]	; (8000e18 <MX_GPIO_Init+0x5ac>)
 8000d16:	f001 f89d 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8000d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d20:	4b3f      	ldr	r3, [pc, #252]	; (8000e20 <MX_GPIO_Init+0x5b4>)
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4838      	ldr	r0, [pc, #224]	; (8000e10 <MX_GPIO_Init+0x5a4>)
 8000d30:	f001 f890 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8000d34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d46:	2307      	movs	r3, #7
 8000d48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	482f      	ldr	r0, [pc, #188]	; (8000e10 <MX_GPIO_Init+0x5a4>)
 8000d52:	f001 f87f 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RTS_Pin USART3_CTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 8000d56:	f242 0302 	movw	r3, #8194	; 0x2002
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d68:	2307      	movs	r3, #7
 8000d6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d70:	4619      	mov	r1, r3
 8000d72:	482c      	ldr	r0, [pc, #176]	; (8000e24 <MX_GPIO_Init+0x5b8>)
 8000d74:	f001 f86e 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8000d78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d82:	2302      	movs	r3, #2
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d8a:	2306      	movs	r3, #6
 8000d8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d92:	4619      	mov	r1, r3
 8000d94:	4824      	ldr	r0, [pc, #144]	; (8000e28 <MX_GPIO_Init+0x5bc>)
 8000d96:	f001 f85d 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin PB11_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|PB11_Pin;
 8000d9a:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db0:	4619      	mov	r1, r3
 8000db2:	481c      	ldr	r0, [pc, #112]	; (8000e24 <MX_GPIO_Init+0x5b8>)
 8000db4:	f001 f84e 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT2_DH_Pin */
  GPIO_InitStruct.Pin = INT2_DH_Pin;
 8000db8:	2304      	movs	r3, #4
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dbc:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <MX_GPIO_Init+0x5b4>)
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT2_DH_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dce:	f001 f841 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : EX_ADC_Pin */
  GPIO_InitStruct.Pin = EX_ADC_Pin;
 8000dd2:	2320      	movs	r3, #32
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dd6:	230b      	movs	r3, #11
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EX_ADC_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de2:	4619      	mov	r1, r3
 8000de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de8:	f001 f834 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12_Pin */
  GPIO_InitStruct.Pin = PE12_Pin;
 8000dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df2:	2303      	movs	r3, #3
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PE12_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4809      	ldr	r0, [pc, #36]	; (8000e28 <MX_GPIO_Init+0x5bc>)
 8000e02:	f001 f827 	bl	8001e54 <HAL_GPIO_Init>

}
 8000e06:	bf00      	nop
 8000e08:	3738      	adds	r7, #56	; 0x38
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	48000c00 	.word	0x48000c00
 8000e14:	48000800 	.word	0x48000800
 8000e18:	48001400 	.word	0x48001400
 8000e1c:	48001800 	.word	0x48001800
 8000e20:	10110000 	.word	0x10110000
 8000e24:	48000400 	.word	0x48000400
 8000e28:	48001000 	.word	0x48001000

08000e2c <InicializaSensores>:

/* USER CODE BEGIN 4 */

//INICIALIZA LOS SENSORES INDICADOS
void InicializaSensores(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	//INICIALIZA EL MAGNETOMETRO

	magneto_IO.Address 	= 0x3c;		//0011110b b=0 leer, b=1 escribir
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <InicializaSensores+0x50>)
 8000e32:	223c      	movs	r2, #60	; 0x3c
 8000e34:	731a      	strb	r2, [r3, #12]
	magneto_IO.BusType 	= 0; 		//0 si I2C
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <InicializaSensores+0x50>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
	magneto_IO.DeInit 	= BSP_I2C2_DeInit;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <InicializaSensores+0x50>)
 8000e3e:	4a10      	ldr	r2, [pc, #64]	; (8000e80 <InicializaSensores+0x54>)
 8000e40:	605a      	str	r2, [r3, #4]
	magneto_IO.GetTick 	= BSP_GetTick;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <InicializaSensores+0x50>)
 8000e44:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <InicializaSensores+0x58>)
 8000e46:	619a      	str	r2, [r3, #24]
	magneto_IO.Init 	= BSP_I2C2_Init;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <InicializaSensores+0x50>)
 8000e4a:	4a0f      	ldr	r2, [pc, #60]	; (8000e88 <InicializaSensores+0x5c>)
 8000e4c:	601a      	str	r2, [r3, #0]
	magneto_IO.ReadReg 	= BSP_I2C2_ReadReg;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <InicializaSensores+0x50>)
 8000e50:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <InicializaSensores+0x60>)
 8000e52:	615a      	str	r2, [r3, #20]
	magneto_IO.WriteReg = BSP_I2C2_WriteReg;
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <InicializaSensores+0x50>)
 8000e56:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <InicializaSensores+0x64>)
 8000e58:	611a      	str	r2, [r3, #16]

	IIS2MDC_RegisterBusIO(&magneto_sensor, &magneto_IO);
 8000e5a:	4908      	ldr	r1, [pc, #32]	; (8000e7c <InicializaSensores+0x50>)
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <InicializaSensores+0x68>)
 8000e5e:	f000 fa6f 	bl	8001340 <IIS2MDC_RegisterBusIO>
	IIS2MDC_Init(&magneto_sensor);
 8000e62:	480c      	ldr	r0, [pc, #48]	; (8000e94 <InicializaSensores+0x68>)
 8000e64:	f000 fae2 	bl	800142c <IIS2MDC_Init>
	IIS2MDC_MAG_Enable(&magneto_sensor);
 8000e68:	480a      	ldr	r0, [pc, #40]	; (8000e94 <InicializaSensores+0x68>)
 8000e6a:	f000 fb1c 	bl	80014a6 <IIS2MDC_MAG_Enable>
	IIS2MDC_MAG_GetAxes(&magneto_sensor, &magneto_axes);
 8000e6e:	490a      	ldr	r1, [pc, #40]	; (8000e98 <InicializaSensores+0x6c>)
 8000e70:	4808      	ldr	r0, [pc, #32]	; (8000e94 <InicializaSensores+0x68>)
 8000e72:	f000 fb48 	bl	8001506 <IIS2MDC_MAG_GetAxes>
	//
	//	IIS2DH_ACC_Enable(&acc_Obj);
	//
	//	IIS2DH_ACC_SetOutputDataRate(&acc_Obj, 400.0f);

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200010bc 	.word	0x200010bc
 8000e80:	0800198d 	.word	0x0800198d
 8000e84:	08001aa5 	.word	0x08001aa5
 8000e88:	08001911 	.word	0x08001911
 8000e8c:	08001a41 	.word	0x08001a41
 8000e90:	080019dd 	.word	0x080019dd
 8000e94:	2000105c 	.word	0x2000105c
 8000e98:	200011b4 	.word	0x200011b4

08000e9c <LED_blink>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_LED_blink */
void LED_blink(void const * argument)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{

		osSemaphoreWait(SemaforoLEDHandle,  osWaitForever);
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <LED_blink+0x38>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eac:	4618      	mov	r0, r3
 8000eae:	f004 ffeb 	bl	8005e88 <osSemaphoreWait>
		HAL_GPIO_WritePin(GPIOE, LED1_Pin, GPIO_PIN_SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4808      	ldr	r0, [pc, #32]	; (8000ed8 <LED_blink+0x3c>)
 8000eb8:	f001 fa50 	bl	800235c <HAL_GPIO_WritePin>
		osDelay(200);
 8000ebc:	20c8      	movs	r0, #200	; 0xc8
 8000ebe:	f004 ff9c 	bl	8005dfa <osDelay>
		HAL_GPIO_WritePin(GPIOE, LED1_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <LED_blink+0x3c>)
 8000ec8:	f001 fa48 	bl	800235c <HAL_GPIO_WritePin>
		osDelay(1);
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f004 ff94 	bl	8005dfa <osDelay>
		osSemaphoreWait(SemaforoLEDHandle,  osWaitForever);
 8000ed2:	e7e7      	b.n	8000ea4 <LED_blink+0x8>
 8000ed4:	200010d8 	.word	0x200010d8
 8000ed8:	48001000 	.word	0x48001000

08000edc <MuestreaAcc>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MuestreaAcc */
void MuestreaAcc(void const * argument)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MuestreaAcc */
	/* Infinite loop */
	for(;;)
	{
		IIS2MDC_MAG_GetAxes(&magneto_sensor, &magneto_axes);
 8000ee4:	4921      	ldr	r1, [pc, #132]	; (8000f6c <MuestreaAcc+0x90>)
 8000ee6:	4822      	ldr	r0, [pc, #136]	; (8000f70 <MuestreaAcc+0x94>)
 8000ee8:	f000 fb0d 	bl	8001506 <IIS2MDC_MAG_GetAxes>
		buffer[Inicio] = ((magneto_axes.x));
 8000eec:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <MuestreaAcc+0x90>)
 8000eee:	6819      	ldr	r1, [r3, #0]
 8000ef0:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <MuestreaAcc+0x98>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	b209      	sxth	r1, r1
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <MuestreaAcc+0x9c>)
 8000efa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		Inicio++;
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <MuestreaAcc+0x98>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <MuestreaAcc+0x98>)
 8000f08:	701a      	strb	r2, [r3, #0]
		buffer[Inicio] = ((magneto_axes.y));
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <MuestreaAcc+0x90>)
 8000f0c:	6859      	ldr	r1, [r3, #4]
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <MuestreaAcc+0x98>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	b209      	sxth	r1, r1
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <MuestreaAcc+0x9c>)
 8000f18:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		Inicio++;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MuestreaAcc+0x98>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	3301      	adds	r3, #1
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <MuestreaAcc+0x98>)
 8000f26:	701a      	strb	r2, [r3, #0]
		buffer[Inicio] = ((magneto_axes.z));
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <MuestreaAcc+0x90>)
 8000f2a:	6899      	ldr	r1, [r3, #8]
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MuestreaAcc+0x98>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	b209      	sxth	r1, r1
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <MuestreaAcc+0x9c>)
 8000f36:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		Inicio++;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <MuestreaAcc+0x98>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <MuestreaAcc+0x98>)
 8000f44:	701a      	strb	r2, [r3, #0]
		if (Inicio/3 == 10)
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <MuestreaAcc+0x98>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	3b1e      	subs	r3, #30
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d807      	bhi.n	8000f62 <MuestreaAcc+0x86>
		{
			osSemaphoreRelease(SemaforoUARTHandle);
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <MuestreaAcc+0xa0>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f004 ffe4 	bl	8005f24 <osSemaphoreRelease>

			Inicio = 0;
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <MuestreaAcc+0x98>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
		}

		osDelay(100);
 8000f62:	2064      	movs	r0, #100	; 0x64
 8000f64:	f004 ff49 	bl	8005dfa <osDelay>
		IIS2MDC_MAG_GetAxes(&magneto_sensor, &magneto_axes);
 8000f68:	e7bc      	b.n	8000ee4 <MuestreaAcc+0x8>
 8000f6a:	bf00      	nop
 8000f6c:	200011b4 	.word	0x200011b4
 8000f70:	2000105c 	.word	0x2000105c
 8000f74:	20000280 	.word	0x20000280
 8000f78:	20001018 	.word	0x20001018
 8000f7c:	20001010 	.word	0x20001010

08000f80 <MandaDatos>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MandaDatos */
void MandaDatos(void const * argument)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MandaDatos */
	osEvent evt;
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreWait(SemaforoUARTHandle,  osWaitForever);
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <MandaDatos+0x38>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	4618      	mov	r0, r3
 8000f92:	f004 ff79 	bl	8005e88 <osSemaphoreWait>
		HAL_UART_Transmit(&huart2, &buffer, sizeof(buffer), HAL_MAX_DELAY);
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	223c      	movs	r2, #60	; 0x3c
 8000f9c:	4907      	ldr	r1, [pc, #28]	; (8000fbc <MandaDatos+0x3c>)
 8000f9e:	4808      	ldr	r0, [pc, #32]	; (8000fc0 <MandaDatos+0x40>)
 8000fa0:	f004 f8bc 	bl	800511c <HAL_UART_Transmit>
		osSemaphoreRelease(SemaforoLEDHandle);
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <MandaDatos+0x44>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f004 ffbb 	bl	8005f24 <osSemaphoreRelease>
		osDelay(1);
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f004 ff23 	bl	8005dfa <osDelay>
		osSemaphoreWait(SemaforoUARTHandle,  osWaitForever);
 8000fb4:	e7e8      	b.n	8000f88 <MandaDatos+0x8>
 8000fb6:	bf00      	nop
 8000fb8:	20001010 	.word	0x20001010
 8000fbc:	20001018 	.word	0x20001018
 8000fc0:	200010dc 	.word	0x200010dc
 8000fc4:	200010d8 	.word	0x200010d8

08000fc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fda:	f000 fe39 	bl	8001c50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40001000 	.word	0x40001000

08000fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <Error_Handler+0x6>

08000ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_MspInit+0x4c>)
 8000ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffe:	4a10      	ldr	r2, [pc, #64]	; (8001040 <HAL_MspInit+0x4c>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6613      	str	r3, [r2, #96]	; 0x60
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <HAL_MspInit+0x4c>)
 8001008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <HAL_MspInit+0x4c>)
 8001014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <HAL_MspInit+0x4c>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101c:	6593      	str	r3, [r2, #88]	; 0x58
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <HAL_MspInit+0x4c>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	210f      	movs	r1, #15
 800102e:	f06f 0001 	mvn.w	r0, #1
 8001032:	f000 fee5 	bl	8001e00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000

08001044 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <HAL_SPI_MspInit+0x7c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d127      	bne.n	80010b6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <HAL_SPI_MspInit+0x80>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106a:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <HAL_SPI_MspInit+0x80>)
 800106c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001070:	6593      	str	r3, [r2, #88]	; 0x58
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_SPI_MspInit+0x80>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <HAL_SPI_MspInit+0x80>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	4a10      	ldr	r2, [pc, #64]	; (80010c4 <HAL_SPI_MspInit+0x80>)
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_SPI_MspInit+0x80>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin|SPI3_CLK_Pin;
 8001096:	2338      	movs	r3, #56	; 0x38
 8001098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010a6:	2306      	movs	r3, #6
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <HAL_SPI_MspInit+0x84>)
 80010b2:	f000 fecf 	bl	8001e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010b6:	bf00      	nop
 80010b8:	3728      	adds	r7, #40	; 0x28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40003c00 	.word	0x40003c00
 80010c4:	40021000 	.word	0x40021000
 80010c8:	48000400 	.word	0x48000400

080010cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <HAL_TIM_Base_MspInit+0x38>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d10b      	bne.n	80010f6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_TIM_Base_MspInit+0x3c>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e2:	4a09      	ldr	r2, [pc, #36]	; (8001108 <HAL_TIM_Base_MspInit+0x3c>)
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e8:	6613      	str	r3, [r2, #96]	; 0x60
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <HAL_TIM_Base_MspInit+0x3c>)
 80010ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40014400 	.word	0x40014400
 8001108:	40021000 	.word	0x40021000

0800110c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	; 0x28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a17      	ldr	r2, [pc, #92]	; (8001188 <HAL_UART_MspInit+0x7c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d127      	bne.n	800117e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_UART_MspInit+0x80>)
 8001130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001132:	4a16      	ldr	r2, [pc, #88]	; (800118c <HAL_UART_MspInit+0x80>)
 8001134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001138:	6593      	str	r3, [r2, #88]	; 0x58
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_UART_MspInit+0x80>)
 800113c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_UART_MspInit+0x80>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	4a10      	ldr	r2, [pc, #64]	; (800118c <HAL_UART_MspInit+0x80>)
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <HAL_UART_MspInit+0x80>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 800115e:	2370      	movs	r3, #112	; 0x70
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800116e:	2307      	movs	r3, #7
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <HAL_UART_MspInit+0x84>)
 800117a:	f000 fe6b 	bl	8001e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800117e:	bf00      	nop
 8001180:	3728      	adds	r7, #40	; 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40004400 	.word	0x40004400
 800118c:	40021000 	.word	0x40021000
 8001190:	48000c00 	.word	0x48000c00

08001194 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	; 0x30
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	2036      	movs	r0, #54	; 0x36
 80011aa:	f000 fe29 	bl	8001e00 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011ae:	2036      	movs	r0, #54	; 0x36
 80011b0:	f000 fe42 	bl	8001e38 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011b4:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <HAL_InitTick+0x9c>)
 80011b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b8:	4a1d      	ldr	r2, [pc, #116]	; (8001230 <HAL_InitTick+0x9c>)
 80011ba:	f043 0310 	orr.w	r3, r3, #16
 80011be:	6593      	str	r3, [r2, #88]	; 0x58
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <HAL_InitTick+0x9c>)
 80011c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c4:	f003 0310 	and.w	r3, r3, #16
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011cc:	f107 0210 	add.w	r2, r7, #16
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 fd8c 	bl	8003cf4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011dc:	f002 fd5e 	bl	8003c9c <HAL_RCC_GetPCLK1Freq>
 80011e0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e4:	4a13      	ldr	r2, [pc, #76]	; (8001234 <HAL_InitTick+0xa0>)
 80011e6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ea:	0c9b      	lsrs	r3, r3, #18
 80011ec:	3b01      	subs	r3, #1
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <HAL_InitTick+0xa4>)
 80011f2:	4a12      	ldr	r2, [pc, #72]	; (800123c <HAL_InitTick+0xa8>)
 80011f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <HAL_InitTick+0xa4>)
 80011f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011fc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011fe:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <HAL_InitTick+0xa4>)
 8001200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001202:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <HAL_InitTick+0xa4>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <HAL_InitTick+0xa4>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001210:	4809      	ldr	r0, [pc, #36]	; (8001238 <HAL_InitTick+0xa4>)
 8001212:	f003 fc6c 	bl	8004aee <HAL_TIM_Base_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d104      	bne.n	8001226 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800121c:	4806      	ldr	r0, [pc, #24]	; (8001238 <HAL_InitTick+0xa4>)
 800121e:	f003 fcbd 	bl	8004b9c <HAL_TIM_Base_Start_IT>
 8001222:	4603      	mov	r3, r0
 8001224:	e000      	b.n	8001228 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
}
 8001228:	4618      	mov	r0, r3
 800122a:	3730      	adds	r7, #48	; 0x30
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40021000 	.word	0x40021000
 8001234:	431bde83 	.word	0x431bde83
 8001238:	200011c0 	.word	0x200011c0
 800123c:	40001000 	.word	0x40001000

08001240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <NMI_Handler+0x4>

08001246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <HardFault_Handler+0x4>

0800124c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <MemManage_Handler+0x4>

08001252 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <BusFault_Handler+0x4>

08001258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <UsageFault_Handler+0x4>

0800125e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <TIM6_DAC_IRQHandler+0x10>)
 8001272:	f003 fd03 	bl	8004c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200011c0 	.word	0x200011c0

08001280 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <SystemInit+0x64>)
 8001286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800128a:	4a16      	ldr	r2, [pc, #88]	; (80012e4 <SystemInit+0x64>)
 800128c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001294:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <SystemInit+0x68>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a13      	ldr	r2, [pc, #76]	; (80012e8 <SystemInit+0x68>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <SystemInit+0x68>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <SystemInit+0x68>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <SystemInit+0x68>)
 80012ac:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80012b0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80012b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <SystemInit+0x68>)
 80012b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012bc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <SystemInit+0x68>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <SystemInit+0x68>)
 80012c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80012ca:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <SystemInit+0x68>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <SystemInit+0x64>)
 80012d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012d6:	609a      	str	r2, [r3, #8]
#endif
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00
 80012e8:	40021000 	.word	0x40021000

080012ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001324 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012f0:	f7ff ffc6 	bl	8001280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012f6:	e003      	b.n	8001300 <LoopCopyDataInit>

080012f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012fe:	3104      	adds	r1, #4

08001300 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001300:	480a      	ldr	r0, [pc, #40]	; (800132c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001304:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001306:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001308:	d3f6      	bcc.n	80012f8 <CopyDataInit>
	ldr	r2, =_sbss
 800130a:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <LoopForever+0x12>)
	b	LoopFillZerobss
 800130c:	e002      	b.n	8001314 <LoopFillZerobss>

0800130e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800130e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001310:	f842 3b04 	str.w	r3, [r2], #4

08001314 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <LoopForever+0x16>)
	cmp	r2, r3
 8001316:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001318:	d3f9      	bcc.n	800130e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800131a:	f007 f857 	bl	80083cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800131e:	f7ff f909 	bl	8000534 <main>

08001322 <LoopForever>:

LoopForever:
    b LoopForever
 8001322:	e7fe      	b.n	8001322 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001324:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001328:	08008548 	.word	0x08008548
	ldr	r0, =_sdata
 800132c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001330:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001334:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001338:	2000125c 	.word	0x2000125c

0800133c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800133c:	e7fe      	b.n	800133c <ADC1_IRQHandler>
	...

08001340 <IIS2MDC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_RegisterBusIO(IIS2MDC_Object_t *pObj, IIS2MDC_IO_t *pIO)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d103      	bne.n	800135c <IIS2MDC_RegisterBusIO+0x1c>
  {
    ret = IIS2MDC_ERROR;
 8001354:	f04f 33ff 	mov.w	r3, #4294967295
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	e05e      	b.n	800141a <IIS2MDC_RegisterBusIO+0xda>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	7b1a      	ldrb	r2, [r3, #12]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	691a      	ldr	r2, [r3, #16]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	695a      	ldr	r2, [r3, #20]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	699a      	ldr	r2, [r3, #24]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a23      	ldr	r2, [pc, #140]	; (8001424 <IIS2MDC_RegisterBusIO+0xe4>)
 8001398:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a22      	ldr	r2, [pc, #136]	; (8001428 <IIS2MDC_RegisterBusIO+0xe8>)
 800139e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d103      	bne.n	80013b6 <IIS2MDC_RegisterBusIO+0x76>
    {
      ret = IIS2MDC_ERROR;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	e031      	b.n	800141a <IIS2MDC_RegisterBusIO+0xda>
    }
    else if (pObj->IO.Init() != IIS2MDC_OK)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4798      	blx	r3
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <IIS2MDC_RegisterBusIO+0x8a>
    {
      ret = IIS2MDC_ERROR;
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	e027      	b.n	800141a <IIS2MDC_RegisterBusIO+0xda>
    }
    else
    {
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d023      	beq.n	800141a <IIS2MDC_RegisterBusIO+0xda>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d11e      	bne.n	800141a <IIS2MDC_RegisterBusIO+0xda>
        {
          if (pObj->IO.BusType == IIS2MDC_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d10e      	bne.n	8001402 <IIS2MDC_RegisterBusIO+0xc2>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80013e4:	2334      	movs	r3, #52	; 0x34
 80013e6:	72fb      	strb	r3, [r7, #11]

            if (IIS2MDC_Write_Reg(pObj, IIS2MDC_CFG_REG_C, data) != IIS2MDC_OK)
 80013e8:	7afb      	ldrb	r3, [r7, #11]
 80013ea:	461a      	mov	r2, r3
 80013ec:	2162      	movs	r1, #98	; 0x62
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 f8d7 	bl	80015a2 <IIS2MDC_Write_Reg>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00f      	beq.n	800141a <IIS2MDC_RegisterBusIO+0xda>
            {
              ret = IIS2MDC_ERROR;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	e00b      	b.n	800141a <IIS2MDC_RegisterBusIO+0xda>
            }
          }
          else
          {
            /* Disable I2C interface on the component */
            if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	331c      	adds	r3, #28
 8001406:	2101      	movs	r1, #1
 8001408:	4618      	mov	r0, r3
 800140a:	f000 fa5a 	bl	80018c2 <iis2mdc_i2c_interface_set>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d002      	beq.n	800141a <IIS2MDC_RegisterBusIO+0xda>
            {
              ret = IIS2MDC_ERROR;
 8001414:	f04f 33ff 	mov.w	r3, #4294967295
 8001418:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800141a:	68fb      	ldr	r3, [r7, #12]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	080015d9 	.word	0x080015d9
 8001428:	0800163b 	.word	0x0800163b

0800142c <IIS2MDC_Init>:
 * @brief  Initialize the IIS2MDC sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_Init(IIS2MDC_Object_t *pObj)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	331c      	adds	r3, #28
 8001438:	2101      	movs	r1, #1
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f9aa 	bl	8001794 <iis2mdc_block_data_update_set>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d002      	beq.n	800144c <IIS2MDC_Init+0x20>
  {
    return IIS2MDC_ERROR;
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	e028      	b.n	800149e <IIS2MDC_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	331c      	adds	r3, #28
 8001450:	2102      	movs	r1, #2
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f952 	bl	80016fc <iis2mdc_operating_mode_set>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <IIS2MDC_Init+0x38>
  {
    return IIS2MDC_ERROR;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	e01c      	b.n	800149e <IIS2MDC_Init+0x72>
  }

  /* Output data rate selection */
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	331c      	adds	r3, #28
 8001468:	2103      	movs	r1, #3
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f96c 	bl	8001748 <iis2mdc_data_rate_set>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d002      	beq.n	800147c <IIS2MDC_Init+0x50>
  {
    return IIS2MDC_ERROR;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	e010      	b.n	800149e <IIS2MDC_Init+0x72>
  }

  /* Self Test disabled. */
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	331c      	adds	r3, #28
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f9f7 	bl	8001876 <iis2mdc_self_test_set>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d002      	beq.n	8001494 <IIS2MDC_Init+0x68>
  {
    return IIS2MDC_ERROR;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	e004      	b.n	800149e <IIS2MDC_Init+0x72>
  }

  pObj->is_initialized = 1;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2MDC_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <IIS2MDC_MAG_Enable>:
 * @brief Enable the IIS2MDC magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_Enable(IIS2MDC_Object_t *pObj)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d101      	bne.n	80014bc <IIS2MDC_MAG_Enable+0x16>
  {
    return IIS2MDC_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	e010      	b.n	80014de <IIS2MDC_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	331c      	adds	r3, #28
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f91a 	bl	80016fc <iis2mdc_operating_mode_set>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d002      	beq.n	80014d4 <IIS2MDC_MAG_Enable+0x2e>
  {
    return IIS2MDC_ERROR;
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295
 80014d2:	e004      	b.n	80014de <IIS2MDC_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2MDC_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <IIS2MDC_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80014f6:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <IIS2MDC_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	331c      	adds	r3, #28
 8001514:	f107 0210 	add.w	r2, r7, #16
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f960 	bl	80017e0 <iis2mdc_magnetic_raw_get>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <IIS2MDC_MAG_GetAxes+0x26>
  {
    return IIS2MDC_ERROR;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	e036      	b.n	800159a <IIS2MDC_MAG_GetAxes+0x94>
  }

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	4619      	mov	r1, r3
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ffd7 	bl	80014e6 <IIS2MDC_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8001538:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800153c:	ee07 3a90 	vmov	s15, r3
 8001540:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001544:	edd7 7a03 	vldr	s15, [r7, #12]
 8001548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800154c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001550:	ee17 2a90 	vmov	r2, s15
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001558:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800155c:	ee07 3a90 	vmov	s15, r3
 8001560:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001564:	edd7 7a03 	vldr	s15, [r7, #12]
 8001568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800156c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001570:	ee17 2a90 	vmov	r2, s15
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001578:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800157c:	ee07 3a90 	vmov	s15, r3
 8001580:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001584:	edd7 7a03 	vldr	s15, [r7, #12]
 8001588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800158c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001590:	ee17 2a90 	vmov	r2, s15
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	609a      	str	r2, [r3, #8]

  return IIS2MDC_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <IIS2MDC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_Write_Reg(IIS2MDC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	460b      	mov	r3, r1
 80015ac:	70fb      	strb	r3, [r7, #3]
 80015ae:	4613      	mov	r3, r2
 80015b0:	70bb      	strb	r3, [r7, #2]
  if (iis2mdc_write_reg(&(pObj->Ctx), Reg, &Data, 1) != IIS2MDC_OK)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f103 001c 	add.w	r0, r3, #28
 80015b8:	1cba      	adds	r2, r7, #2
 80015ba:	78f9      	ldrb	r1, [r7, #3]
 80015bc:	2301      	movs	r3, #1
 80015be:	f000 f885 	bl	80016cc <iis2mdc_write_reg>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <IIS2MDC_Write_Reg+0x2c>
  {
    return IIS2MDC_ERROR;
 80015c8:	f04f 33ff 	mov.w	r3, #4294967295
 80015cc:	e000      	b.n	80015d0 <IIS2MDC_Write_Reg+0x2e>
  }

  return IIS2MDC_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	461a      	mov	r2, r3
 80015e4:	460b      	mov	r3, r1
 80015e6:	72fb      	strb	r3, [r7, #11]
 80015e8:	4613      	mov	r3, r2
 80015ea:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d10e      	bne.n	8001616 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	695c      	ldr	r4, [r3, #20]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	7b1b      	ldrb	r3, [r3, #12]
 8001600:	b298      	uxth	r0, r3
 8001602:	7afb      	ldrb	r3, [r7, #11]
 8001604:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001608:	b2db      	uxtb	r3, r3
 800160a:	b299      	uxth	r1, r3
 800160c:	893b      	ldrh	r3, [r7, #8]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	47a0      	blx	r4
 8001612:	4603      	mov	r3, r0
 8001614:	e00d      	b.n	8001632 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	695c      	ldr	r4, [r3, #20]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	7b1b      	ldrb	r3, [r3, #12]
 800161e:	b298      	uxth	r0, r3
 8001620:	7afb      	ldrb	r3, [r7, #11]
 8001622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001626:	b2db      	uxtb	r3, r3
 8001628:	b299      	uxth	r1, r3
 800162a:	893b      	ldrh	r3, [r7, #8]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	47a0      	blx	r4
 8001630:	4603      	mov	r3, r0
  }
}
 8001632:	4618      	mov	r0, r3
 8001634:	371c      	adds	r7, #28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd90      	pop	{r4, r7, pc}

0800163a <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800163a:	b590      	push	{r4, r7, lr}
 800163c:	b087      	sub	sp, #28
 800163e:	af00      	add	r7, sp, #0
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	607a      	str	r2, [r7, #4]
 8001644:	461a      	mov	r2, r3
 8001646:	460b      	mov	r3, r1
 8001648:	72fb      	strb	r3, [r7, #11]
 800164a:	4613      	mov	r3, r2
 800164c:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10e      	bne.n	8001678 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	691c      	ldr	r4, [r3, #16]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	7b1b      	ldrb	r3, [r3, #12]
 8001662:	b298      	uxth	r0, r3
 8001664:	7afb      	ldrb	r3, [r7, #11]
 8001666:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800166a:	b2db      	uxtb	r3, r3
 800166c:	b299      	uxth	r1, r3
 800166e:	893b      	ldrh	r3, [r7, #8]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	47a0      	blx	r4
 8001674:	4603      	mov	r3, r0
 8001676:	e00d      	b.n	8001694 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	691c      	ldr	r4, [r3, #16]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	7b1b      	ldrb	r3, [r3, #12]
 8001680:	b298      	uxth	r0, r3
 8001682:	7afb      	ldrb	r3, [r7, #11]
 8001684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001688:	b2db      	uxtb	r3, r3
 800168a:	b299      	uxth	r1, r3
 800168c:	893b      	ldrh	r3, [r7, #8]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	47a0      	blx	r4
 8001692:	4603      	mov	r3, r0
  }
}
 8001694:	4618      	mov	r0, r3
 8001696:	371c      	adds	r7, #28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd90      	pop	{r4, r7, pc}

0800169c <iis2mdc_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	461a      	mov	r2, r3
 80016a8:	460b      	mov	r3, r1
 80016aa:	72fb      	strb	r3, [r7, #11]
 80016ac:	4613      	mov	r3, r2
 80016ae:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	685c      	ldr	r4, [r3, #4]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6898      	ldr	r0, [r3, #8]
 80016b8:	893b      	ldrh	r3, [r7, #8]
 80016ba:	7af9      	ldrb	r1, [r7, #11]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	47a0      	blx	r4
 80016c0:	6178      	str	r0, [r7, #20]
  return ret;
 80016c2:	697b      	ldr	r3, [r7, #20]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	371c      	adds	r7, #28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd90      	pop	{r4, r7, pc}

080016cc <iis2mdc_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b087      	sub	sp, #28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	461a      	mov	r2, r3
 80016d8:	460b      	mov	r3, r1
 80016da:	72fb      	strb	r3, [r7, #11]
 80016dc:	4613      	mov	r3, r2
 80016de:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681c      	ldr	r4, [r3, #0]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6898      	ldr	r0, [r3, #8]
 80016e8:	893b      	ldrh	r3, [r7, #8]
 80016ea:	7af9      	ldrb	r1, [r7, #11]
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	47a0      	blx	r4
 80016f0:	6178      	str	r0, [r7, #20]
  return ret;
 80016f2:	697b      	ldr	r3, [r7, #20]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	371c      	adds	r7, #28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd90      	pop	{r4, r7, pc}

080016fc <iis2mdc_operating_mode_set>:
  * @param  val      change the values of md in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx, iis2mdc_md_t val)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t*) &reg, 1);
 8001708:	f107 0208 	add.w	r2, r7, #8
 800170c:	2301      	movs	r3, #1
 800170e:	2160      	movs	r1, #96	; 0x60
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ffc3 	bl	800169c <iis2mdc_read_reg>
 8001716:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10f      	bne.n	800173e <iis2mdc_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	b2da      	uxtb	r2, r3
 8001726:	7a3b      	ldrb	r3, [r7, #8]
 8001728:	f362 0301 	bfi	r3, r2, #0, #2
 800172c:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t*) &reg, 1);
 800172e:	f107 0208 	add.w	r2, r7, #8
 8001732:	2301      	movs	r3, #1
 8001734:	2160      	movs	r1, #96	; 0x60
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffc8 	bl	80016cc <iis2mdc_write_reg>
 800173c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800173e:	68fb      	ldr	r3, [r7, #12]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t*) &reg, 1);
 8001754:	f107 0208 	add.w	r2, r7, #8
 8001758:	2301      	movs	r3, #1
 800175a:	2160      	movs	r1, #96	; 0x60
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff9d 	bl	800169c <iis2mdc_read_reg>
 8001762:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10f      	bne.n	800178a <iis2mdc_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	b2da      	uxtb	r2, r3
 8001772:	7a3b      	ldrb	r3, [r7, #8]
 8001774:	f362 0383 	bfi	r3, r2, #2, #2
 8001778:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t*) &reg, 1);
 800177a:	f107 0208 	add.w	r2, r7, #8
 800177e:	2301      	movs	r3, #1
 8001780:	2160      	movs	r1, #96	; 0x60
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff ffa2 	bl	80016cc <iis2mdc_write_reg>
 8001788:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t*) &reg, 1);
 80017a0:	f107 0208 	add.w	r2, r7, #8
 80017a4:	2301      	movs	r3, #1
 80017a6:	2162      	movs	r1, #98	; 0x62
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff77 	bl	800169c <iis2mdc_read_reg>
 80017ae:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10f      	bne.n	80017d6 <iis2mdc_block_data_update_set+0x42>
    reg.bdu = val;
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	7a3b      	ldrb	r3, [r7, #8]
 80017c0:	f362 1304 	bfi	r3, r2, #4, #1
 80017c4:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t*) &reg, 1);
 80017c6:	f107 0208 	add.w	r2, r7, #8
 80017ca:	2301      	movs	r3, #1
 80017cc:	2162      	movs	r1, #98	; 0x62
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ff7c 	bl	80016cc <iis2mdc_write_reg>
 80017d4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80017d6:	68fb      	ldr	r3, [r7, #12]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 80017ea:	f107 020c 	add.w	r2, r7, #12
 80017ee:	2306      	movs	r3, #6
 80017f0:	2168      	movs	r1, #104	; 0x68
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ff52 	bl	800169c <iis2mdc_read_reg>
 80017f8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80017fa:	7b7b      	ldrb	r3, [r7, #13]
 80017fc:	b21a      	sxth	r2, r3
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001808:	b29b      	uxth	r3, r3
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	b29a      	uxth	r2, r3
 800180e:	7b3b      	ldrb	r3, [r7, #12]
 8001810:	b29b      	uxth	r3, r3
 8001812:	4413      	add	r3, r2
 8001814:	b29b      	uxth	r3, r3
 8001816:	b21a      	sxth	r2, r3
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800181c:	7bfa      	ldrb	r2, [r7, #15]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	3302      	adds	r3, #2
 8001822:	b212      	sxth	r2, r2
 8001824:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	3302      	adds	r3, #2
 800182a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800182e:	b29b      	uxth	r3, r3
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	b29a      	uxth	r2, r3
 8001834:	7bbb      	ldrb	r3, [r7, #14]
 8001836:	b29b      	uxth	r3, r3
 8001838:	4413      	add	r3, r2
 800183a:	b29a      	uxth	r2, r3
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	3302      	adds	r3, #2
 8001840:	b212      	sxth	r2, r2
 8001842:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001844:	7c7a      	ldrb	r2, [r7, #17]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	3304      	adds	r3, #4
 800184a:	b212      	sxth	r2, r2
 800184c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	3304      	adds	r3, #4
 8001852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001856:	b29b      	uxth	r3, r3
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	b29a      	uxth	r2, r3
 800185c:	7c3b      	ldrb	r3, [r7, #16]
 800185e:	b29b      	uxth	r3, r3
 8001860:	4413      	add	r3, r2
 8001862:	b29a      	uxth	r2, r3
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	3304      	adds	r3, #4
 8001868:	b212      	sxth	r2, r2
 800186a:	801a      	strh	r2, [r3, #0]

  return ret;
 800186c:	697b      	ldr	r3, [r7, #20]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b084      	sub	sp, #16
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t*) &reg, 1);
 8001882:	f107 0208 	add.w	r2, r7, #8
 8001886:	2301      	movs	r3, #1
 8001888:	2162      	movs	r1, #98	; 0x62
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff ff06 	bl	800169c <iis2mdc_read_reg>
 8001890:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10f      	bne.n	80018b8 <iis2mdc_self_test_set+0x42>
    reg.self_test = val;
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	7a3b      	ldrb	r3, [r7, #8]
 80018a2:	f362 0341 	bfi	r3, r2, #1, #1
 80018a6:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t*) &reg, 1);
 80018a8:	f107 0208 	add.w	r2, r7, #8
 80018ac:	2301      	movs	r3, #1
 80018ae:	2162      	movs	r1, #98	; 0x62
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ff0b 	bl	80016cc <iis2mdc_write_reg>
 80018b6:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80018b8:	68fb      	ldr	r3, [r7, #12]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <iis2mdc_i2c_interface_set>:
  * @param  val      change the values of i2c_dis in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx, iis2mdc_i2c_dis_t val)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	460b      	mov	r3, r1
 80018cc:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t*) &reg, 1);
 80018ce:	f107 0208 	add.w	r2, r7, #8
 80018d2:	2301      	movs	r3, #1
 80018d4:	2162      	movs	r1, #98	; 0x62
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fee0 	bl	800169c <iis2mdc_read_reg>
 80018dc:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10f      	bne.n	8001904 <iis2mdc_i2c_interface_set+0x42>
    reg.i2c_dis = (uint8_t)val;
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	7a3b      	ldrb	r3, [r7, #8]
 80018ee:	f362 1345 	bfi	r3, r2, #5, #1
 80018f2:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t*) &reg, 1);
 80018f4:	f107 0208 	add.w	r2, r7, #8
 80018f8:	2301      	movs	r3, #1
 80018fa:	2162      	movs	r1, #98	; 0x62
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff fee5 	bl	80016cc <iis2mdc_write_reg>
 8001902:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001904:	68fb      	ldr	r3, [r7, #12]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 800191a:	4b19      	ldr	r3, [pc, #100]	; (8001980 <BSP_I2C2_Init+0x70>)
 800191c:	4a19      	ldr	r2, [pc, #100]	; (8001984 <BSP_I2C2_Init+0x74>)
 800191e:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <BSP_I2C2_Init+0x78>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	4918      	ldr	r1, [pc, #96]	; (8001988 <BSP_I2C2_Init+0x78>)
 8001928:	600a      	str	r2, [r1, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d122      	bne.n	8001974 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 800192e:	4814      	ldr	r0, [pc, #80]	; (8001980 <BSP_I2C2_Init+0x70>)
 8001930:	f001 f82c 	bl	800298c <HAL_I2C_GetState>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d11c      	bne.n	8001974 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 800193a:	4811      	ldr	r0, [pc, #68]	; (8001980 <BSP_I2C2_Init+0x70>)
 800193c:	f000 f8fe 	bl	8001b3c <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d116      	bne.n	8001974 <BSP_I2C2_Init+0x64>
	  {
    	/* Init the I2C */
    	if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8001946:	480e      	ldr	r0, [pc, #56]	; (8001980 <BSP_I2C2_Init+0x70>)
 8001948:	f000 f8b4 	bl	8001ab4 <MX_I2C2_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <BSP_I2C2_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8001952:	f06f 0307 	mvn.w	r3, #7
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	e00c      	b.n	8001974 <BSP_I2C2_Init+0x64>
    	}
    	else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800195a:	2100      	movs	r1, #0
 800195c:	4808      	ldr	r0, [pc, #32]	; (8001980 <BSP_I2C2_Init+0x70>)
 800195e:	f001 fa4b 	bl	8002df8 <HAL_I2CEx_ConfigAnalogFilter>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <BSP_I2C2_Init+0x60>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8001968:	f06f 0307 	mvn.w	r3, #7
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	e001      	b.n	8001974 <BSP_I2C2_Init+0x64>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 8001970:	2300      	movs	r3, #0
 8001972:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001974:	687b      	ldr	r3, [r7, #4]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	2000120c 	.word	0x2000120c
 8001984:	40005800 	.word	0x40005800
 8001988:	20000284 	.word	0x20000284

0800198c <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <BSP_I2C2_DeInit+0x48>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d014      	beq.n	80019c8 <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <BSP_I2C2_DeInit+0x48>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <BSP_I2C2_DeInit+0x48>)
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <BSP_I2C2_DeInit+0x48>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10b      	bne.n	80019c8 <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 80019b0:	4809      	ldr	r0, [pc, #36]	; (80019d8 <BSP_I2C2_DeInit+0x4c>)
 80019b2:	f000 f917 	bl	8001be4 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 80019b6:	4808      	ldr	r0, [pc, #32]	; (80019d8 <BSP_I2C2_DeInit+0x4c>)
 80019b8:	f000 fd77 	bl	80024aa <HAL_I2C_DeInit>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80019c2:	f06f 0307 	mvn.w	r3, #7
 80019c6:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80019c8:	687b      	ldr	r3, [r7, #4]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000284 	.word	0x20000284
 80019d8:	2000120c 	.word	0x2000120c

080019dc <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af04      	add	r7, sp, #16
 80019e2:	60ba      	str	r2, [r7, #8]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4603      	mov	r3, r0
 80019e8:	81fb      	strh	r3, [r7, #14]
 80019ea:	460b      	mov	r3, r1
 80019ec:	81bb      	strh	r3, [r7, #12]
 80019ee:	4613      	mov	r3, r2
 80019f0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 80019f6:	89ba      	ldrh	r2, [r7, #12]
 80019f8:	89f9      	ldrh	r1, [r7, #14]
 80019fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fe:	9302      	str	r3, [sp, #8]
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2301      	movs	r3, #1
 8001a0a:	480c      	ldr	r0, [pc, #48]	; (8001a3c <BSP_I2C2_WriteReg+0x60>)
 8001a0c:	f000 fd90 	bl	8002530 <HAL_I2C_Mem_Write>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00c      	beq.n	8001a30 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001a16:	4809      	ldr	r0, [pc, #36]	; (8001a3c <BSP_I2C2_WriteReg+0x60>)
 8001a18:	f000 ffc6 	bl	80029a8 <HAL_I2C_GetError>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d103      	bne.n	8001a2a <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001a22:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	e002      	b.n	8001a30 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001a2a:	f06f 0303 	mvn.w	r3, #3
 8001a2e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001a30:	697b      	ldr	r3, [r7, #20]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	2000120c 	.word	0x2000120c

08001a40 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af04      	add	r7, sp, #16
 8001a46:	60ba      	str	r2, [r7, #8]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	81fb      	strh	r3, [r7, #14]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	81bb      	strh	r3, [r7, #12]
 8001a52:	4613      	mov	r3, r2
 8001a54:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001a5a:	89ba      	ldrh	r2, [r7, #12]
 8001a5c:	89f9      	ldrh	r1, [r7, #14]
 8001a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a62:	9302      	str	r3, [sp, #8]
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	9301      	str	r3, [sp, #4]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <BSP_I2C2_ReadReg+0x60>)
 8001a70:	f000 fe72 	bl	8002758 <HAL_I2C_Mem_Read>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00c      	beq.n	8001a94 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001a7a:	4809      	ldr	r0, [pc, #36]	; (8001aa0 <BSP_I2C2_ReadReg+0x60>)
 8001a7c:	f000 ff94 	bl	80029a8 <HAL_I2C_GetError>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d103      	bne.n	8001a8e <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001a86:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	e002      	b.n	8001a94 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001a8e:	f06f 0303 	mvn.w	r3, #3
 8001a92:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001a94:	697b      	ldr	r3, [r7, #20]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	2000120c 	.word	0x2000120c

08001aa4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001aa8:	f000 f8e6 	bl	8001c78 <HAL_GetTick>
 8001aac:	4603      	mov	r3, r0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C2;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a1c      	ldr	r2, [pc, #112]	; (8001b34 <MX_I2C2_Init+0x80>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x307075B1;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a1b      	ldr	r2, [pc, #108]	; (8001b38 <MX_I2C2_Init+0x84>)
 8001aca:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 fc48 	bl	800238c <HAL_I2C_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b06:	2100      	movs	r1, #0
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f001 f975 	bl	8002df8 <HAL_I2CEx_ConfigAnalogFilter>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001b18:	2100      	movs	r1, #0
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f001 f9b7 	bl	8002e8e <HAL_I2CEx_ConfigDigitalFilter>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40005800 	.word	0x40005800
 8001b38:	307075b1 	.word	0x307075b1

08001b3c <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	; 0x28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b44:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <I2C2_MspInit+0xa0>)
 8001b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b48:	4a24      	ldr	r2, [pc, #144]	; (8001bdc <I2C2_MspInit+0xa0>)
 8001b4a:	f043 0320 	orr.w	r3, r3, #32
 8001b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b50:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <I2C2_MspInit+0xa0>)
 8001b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b54:	f003 0320 	and.w	r3, r3, #32
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF2     ------> I2C2_SMBA
    PF1     ------> I2C2_SCL
    PF0     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SMBA_GPIO_PIN;
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b60:	2312      	movs	r3, #18
 8001b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b64:	2301      	movs	r3, #1
 8001b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SMBA_GPIO_AF;
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SMBA_GPIO_PORT, &GPIO_InitStruct);
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4619      	mov	r1, r3
 8001b76:	481a      	ldr	r0, [pc, #104]	; (8001be0 <I2C2_MspInit+0xa4>)
 8001b78:	f000 f96c 	bl	8001e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b80:	2312      	movs	r3, #18
 8001b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b84:	2301      	movs	r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	4812      	ldr	r0, [pc, #72]	; (8001be0 <I2C2_MspInit+0xa4>)
 8001b98:	f000 f95c 	bl	8001e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba0:	2312      	movs	r3, #18
 8001ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001bac:	2304      	movs	r3, #4
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	480a      	ldr	r0, [pc, #40]	; (8001be0 <I2C2_MspInit+0xa4>)
 8001bb8:	f000 f94c 	bl	8001e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <I2C2_MspInit+0xa0>)
 8001bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc0:	4a06      	ldr	r2, [pc, #24]	; (8001bdc <I2C2_MspInit+0xa0>)
 8001bc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <I2C2_MspInit+0xa0>)
 8001bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001bd4:	bf00      	nop
 8001bd6:	3728      	adds	r7, #40	; 0x28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	48001400 	.word	0x48001400

08001be4 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <I2C2_MspDeInit+0x34>)
 8001bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf0:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <I2C2_MspDeInit+0x34>)
 8001bf2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001bf6:	6593      	str	r3, [r2, #88]	; 0x58
    /**I2C2 GPIO Configuration
    PF2     ------> I2C2_SMBA
    PF1     ------> I2C2_SCL
    PF0     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SMBA_GPIO_PORT, BUS_I2C2_SMBA_GPIO_PIN);
 8001bf8:	2104      	movs	r1, #4
 8001bfa:	4808      	ldr	r0, [pc, #32]	; (8001c1c <I2C2_MspDeInit+0x38>)
 8001bfc:	f000 fabc 	bl	8002178 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8001c00:	2102      	movs	r1, #2
 8001c02:	4806      	ldr	r0, [pc, #24]	; (8001c1c <I2C2_MspDeInit+0x38>)
 8001c04:	f000 fab8 	bl	8002178 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8001c08:	2101      	movs	r1, #1
 8001c0a:	4804      	ldr	r0, [pc, #16]	; (8001c1c <I2C2_MspDeInit+0x38>)
 8001c0c:	f000 fab4 	bl	8002178 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	48001400 	.word	0x48001400

08001c20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c2a:	2003      	movs	r0, #3
 8001c2c:	f000 f8dd 	bl	8001dea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c30:	2000      	movs	r0, #0
 8001c32:	f7ff faaf 	bl	8001194 <HAL_InitTick>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	71fb      	strb	r3, [r7, #7]
 8001c40:	e001      	b.n	8001c46 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c42:	f7ff f9d7 	bl	8000ff4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c46:	79fb      	ldrb	r3, [r7, #7]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_IncTick+0x20>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_IncTick+0x24>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <HAL_IncTick+0x24>)
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000008 	.word	0x20000008
 8001c74:	20001258 	.word	0x20001258

08001c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_GetTick+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20001258 	.word	0x20001258

08001c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cac:	4013      	ands	r3, r2
 8001cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc2:	4a04      	ldr	r2, [pc, #16]	; (8001cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	60d3      	str	r3, [r2, #12]
}
 8001cc8:	bf00      	nop
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cdc:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	f003 0307 	and.w	r3, r3, #7
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	db0b      	blt.n	8001d1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	f003 021f 	and.w	r2, r3, #31
 8001d0c:	4907      	ldr	r1, [pc, #28]	; (8001d2c <__NVIC_EnableIRQ+0x38>)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	2001      	movs	r0, #1
 8001d16:	fa00 f202 	lsl.w	r2, r0, r2
 8001d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000e100 	.word	0xe000e100

08001d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	6039      	str	r1, [r7, #0]
 8001d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	db0a      	blt.n	8001d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	490c      	ldr	r1, [pc, #48]	; (8001d7c <__NVIC_SetPriority+0x4c>)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	0112      	lsls	r2, r2, #4
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	440b      	add	r3, r1
 8001d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d58:	e00a      	b.n	8001d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4908      	ldr	r1, [pc, #32]	; (8001d80 <__NVIC_SetPriority+0x50>)
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	3b04      	subs	r3, #4
 8001d68:	0112      	lsls	r2, r2, #4
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	761a      	strb	r2, [r3, #24]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000e100 	.word	0xe000e100
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b089      	sub	sp, #36	; 0x24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f1c3 0307 	rsb	r3, r3, #7
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	bf28      	it	cs
 8001da2:	2304      	movcs	r3, #4
 8001da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3304      	adds	r3, #4
 8001daa:	2b06      	cmp	r3, #6
 8001dac:	d902      	bls.n	8001db4 <NVIC_EncodePriority+0x30>
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3b03      	subs	r3, #3
 8001db2:	e000      	b.n	8001db6 <NVIC_EncodePriority+0x32>
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd6:	43d9      	mvns	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ddc:	4313      	orrs	r3, r2
         );
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3724      	adds	r7, #36	; 0x24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff ff4c 	bl	8001c90 <__NVIC_SetPriorityGrouping>
}
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
 8001e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e12:	f7ff ff61 	bl	8001cd8 <__NVIC_GetPriorityGrouping>
 8001e16:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	68b9      	ldr	r1, [r7, #8]
 8001e1c:	6978      	ldr	r0, [r7, #20]
 8001e1e:	f7ff ffb1 	bl	8001d84 <NVIC_EncodePriority>
 8001e22:	4602      	mov	r2, r0
 8001e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e28:	4611      	mov	r1, r2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff ff80 	bl	8001d30 <__NVIC_SetPriority>
}
 8001e30:	bf00      	nop
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ff54 	bl	8001cf4 <__NVIC_EnableIRQ>
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b087      	sub	sp, #28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e62:	e166      	b.n	8002132 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2101      	movs	r1, #1
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	4013      	ands	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 8158 	beq.w	800212c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d00b      	beq.n	8001e9c <HAL_GPIO_Init+0x48>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d007      	beq.n	8001e9c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e90:	2b11      	cmp	r3, #17
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b12      	cmp	r3, #18
 8001e9a:	d130      	bne.n	8001efe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	f003 0201 	and.w	r2, r3, #1
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	2203      	movs	r2, #3
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_Init+0xea>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b12      	cmp	r3, #18
 8001f3c:	d123      	bne.n	8001f86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	08da      	lsrs	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3208      	adds	r2, #8
 8001f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	220f      	movs	r2, #15
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	08da      	lsrs	r2, r3, #3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3208      	adds	r2, #8
 8001f80:	6939      	ldr	r1, [r7, #16]
 8001f82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	2203      	movs	r2, #3
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 0203 	and.w	r2, r3, #3
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80b2 	beq.w	800212c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc8:	4b61      	ldr	r3, [pc, #388]	; (8002150 <HAL_GPIO_Init+0x2fc>)
 8001fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fcc:	4a60      	ldr	r2, [pc, #384]	; (8002150 <HAL_GPIO_Init+0x2fc>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6613      	str	r3, [r2, #96]	; 0x60
 8001fd4:	4b5e      	ldr	r3, [pc, #376]	; (8002150 <HAL_GPIO_Init+0x2fc>)
 8001fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fe0:	4a5c      	ldr	r2, [pc, #368]	; (8002154 <HAL_GPIO_Init+0x300>)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	089b      	lsrs	r3, r3, #2
 8001fe6:	3302      	adds	r3, #2
 8001fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800200a:	d02b      	beq.n	8002064 <HAL_GPIO_Init+0x210>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a52      	ldr	r2, [pc, #328]	; (8002158 <HAL_GPIO_Init+0x304>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d025      	beq.n	8002060 <HAL_GPIO_Init+0x20c>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a51      	ldr	r2, [pc, #324]	; (800215c <HAL_GPIO_Init+0x308>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d01f      	beq.n	800205c <HAL_GPIO_Init+0x208>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a50      	ldr	r2, [pc, #320]	; (8002160 <HAL_GPIO_Init+0x30c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d019      	beq.n	8002058 <HAL_GPIO_Init+0x204>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a4f      	ldr	r2, [pc, #316]	; (8002164 <HAL_GPIO_Init+0x310>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d013      	beq.n	8002054 <HAL_GPIO_Init+0x200>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a4e      	ldr	r2, [pc, #312]	; (8002168 <HAL_GPIO_Init+0x314>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d00d      	beq.n	8002050 <HAL_GPIO_Init+0x1fc>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a4d      	ldr	r2, [pc, #308]	; (800216c <HAL_GPIO_Init+0x318>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d007      	beq.n	800204c <HAL_GPIO_Init+0x1f8>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a4c      	ldr	r2, [pc, #304]	; (8002170 <HAL_GPIO_Init+0x31c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d101      	bne.n	8002048 <HAL_GPIO_Init+0x1f4>
 8002044:	2307      	movs	r3, #7
 8002046:	e00e      	b.n	8002066 <HAL_GPIO_Init+0x212>
 8002048:	2308      	movs	r3, #8
 800204a:	e00c      	b.n	8002066 <HAL_GPIO_Init+0x212>
 800204c:	2306      	movs	r3, #6
 800204e:	e00a      	b.n	8002066 <HAL_GPIO_Init+0x212>
 8002050:	2305      	movs	r3, #5
 8002052:	e008      	b.n	8002066 <HAL_GPIO_Init+0x212>
 8002054:	2304      	movs	r3, #4
 8002056:	e006      	b.n	8002066 <HAL_GPIO_Init+0x212>
 8002058:	2303      	movs	r3, #3
 800205a:	e004      	b.n	8002066 <HAL_GPIO_Init+0x212>
 800205c:	2302      	movs	r3, #2
 800205e:	e002      	b.n	8002066 <HAL_GPIO_Init+0x212>
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <HAL_GPIO_Init+0x212>
 8002064:	2300      	movs	r3, #0
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	f002 0203 	and.w	r2, r2, #3
 800206c:	0092      	lsls	r2, r2, #2
 800206e:	4093      	lsls	r3, r2
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002076:	4937      	ldr	r1, [pc, #220]	; (8002154 <HAL_GPIO_Init+0x300>)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	3302      	adds	r3, #2
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002084:	4b3b      	ldr	r3, [pc, #236]	; (8002174 <HAL_GPIO_Init+0x320>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	43db      	mvns	r3, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020a8:	4a32      	ldr	r2, [pc, #200]	; (8002174 <HAL_GPIO_Init+0x320>)
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80020ae:	4b31      	ldr	r3, [pc, #196]	; (8002174 <HAL_GPIO_Init+0x320>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020d2:	4a28      	ldr	r2, [pc, #160]	; (8002174 <HAL_GPIO_Init+0x320>)
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020d8:	4b26      	ldr	r3, [pc, #152]	; (8002174 <HAL_GPIO_Init+0x320>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020fc:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <HAL_GPIO_Init+0x320>)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002102:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <HAL_GPIO_Init+0x320>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	43db      	mvns	r3, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4013      	ands	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4313      	orrs	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002126:	4a13      	ldr	r2, [pc, #76]	; (8002174 <HAL_GPIO_Init+0x320>)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	3301      	adds	r3, #1
 8002130:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	f47f ae91 	bne.w	8001e64 <HAL_GPIO_Init+0x10>
  }
}
 8002142:	bf00      	nop
 8002144:	371c      	adds	r7, #28
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000
 8002154:	40010000 	.word	0x40010000
 8002158:	48000400 	.word	0x48000400
 800215c:	48000800 	.word	0x48000800
 8002160:	48000c00 	.word	0x48000c00
 8002164:	48001000 	.word	0x48001000
 8002168:	48001400 	.word	0x48001400
 800216c:	48001800 	.word	0x48001800
 8002170:	48001c00 	.word	0x48001c00
 8002174:	40010400 	.word	0x40010400

08002178 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002178:	b480      	push	{r7}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002186:	e0c9      	b.n	800231c <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002188:	2201      	movs	r2, #1
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	4013      	ands	r3, r2
 8002194:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80bc 	beq.w	8002316 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800219e:	4a66      	ldr	r2, [pc, #408]	; (8002338 <HAL_GPIO_DeInit+0x1c0>)
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	089b      	lsrs	r3, r3, #2
 80021a4:	3302      	adds	r3, #2
 80021a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021aa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	220f      	movs	r2, #15
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4013      	ands	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021c6:	d02b      	beq.n	8002220 <HAL_GPIO_DeInit+0xa8>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a5c      	ldr	r2, [pc, #368]	; (800233c <HAL_GPIO_DeInit+0x1c4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d025      	beq.n	800221c <HAL_GPIO_DeInit+0xa4>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a5b      	ldr	r2, [pc, #364]	; (8002340 <HAL_GPIO_DeInit+0x1c8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d01f      	beq.n	8002218 <HAL_GPIO_DeInit+0xa0>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a5a      	ldr	r2, [pc, #360]	; (8002344 <HAL_GPIO_DeInit+0x1cc>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d019      	beq.n	8002214 <HAL_GPIO_DeInit+0x9c>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a59      	ldr	r2, [pc, #356]	; (8002348 <HAL_GPIO_DeInit+0x1d0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d013      	beq.n	8002210 <HAL_GPIO_DeInit+0x98>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a58      	ldr	r2, [pc, #352]	; (800234c <HAL_GPIO_DeInit+0x1d4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d00d      	beq.n	800220c <HAL_GPIO_DeInit+0x94>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a57      	ldr	r2, [pc, #348]	; (8002350 <HAL_GPIO_DeInit+0x1d8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d007      	beq.n	8002208 <HAL_GPIO_DeInit+0x90>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a56      	ldr	r2, [pc, #344]	; (8002354 <HAL_GPIO_DeInit+0x1dc>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d101      	bne.n	8002204 <HAL_GPIO_DeInit+0x8c>
 8002200:	2307      	movs	r3, #7
 8002202:	e00e      	b.n	8002222 <HAL_GPIO_DeInit+0xaa>
 8002204:	2308      	movs	r3, #8
 8002206:	e00c      	b.n	8002222 <HAL_GPIO_DeInit+0xaa>
 8002208:	2306      	movs	r3, #6
 800220a:	e00a      	b.n	8002222 <HAL_GPIO_DeInit+0xaa>
 800220c:	2305      	movs	r3, #5
 800220e:	e008      	b.n	8002222 <HAL_GPIO_DeInit+0xaa>
 8002210:	2304      	movs	r3, #4
 8002212:	e006      	b.n	8002222 <HAL_GPIO_DeInit+0xaa>
 8002214:	2303      	movs	r3, #3
 8002216:	e004      	b.n	8002222 <HAL_GPIO_DeInit+0xaa>
 8002218:	2302      	movs	r3, #2
 800221a:	e002      	b.n	8002222 <HAL_GPIO_DeInit+0xaa>
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <HAL_GPIO_DeInit+0xaa>
 8002220:	2300      	movs	r3, #0
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	f002 0203 	and.w	r2, r2, #3
 8002228:	0092      	lsls	r2, r2, #2
 800222a:	4093      	lsls	r3, r2
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	429a      	cmp	r2, r3
 8002230:	d132      	bne.n	8002298 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002232:	4b49      	ldr	r3, [pc, #292]	; (8002358 <HAL_GPIO_DeInit+0x1e0>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	43db      	mvns	r3, r3
 800223a:	4947      	ldr	r1, [pc, #284]	; (8002358 <HAL_GPIO_DeInit+0x1e0>)
 800223c:	4013      	ands	r3, r2
 800223e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002240:	4b45      	ldr	r3, [pc, #276]	; (8002358 <HAL_GPIO_DeInit+0x1e0>)
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	4943      	ldr	r1, [pc, #268]	; (8002358 <HAL_GPIO_DeInit+0x1e0>)
 800224a:	4013      	ands	r3, r2
 800224c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800224e:	4b42      	ldr	r3, [pc, #264]	; (8002358 <HAL_GPIO_DeInit+0x1e0>)
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	43db      	mvns	r3, r3
 8002256:	4940      	ldr	r1, [pc, #256]	; (8002358 <HAL_GPIO_DeInit+0x1e0>)
 8002258:	4013      	ands	r3, r2
 800225a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800225c:	4b3e      	ldr	r3, [pc, #248]	; (8002358 <HAL_GPIO_DeInit+0x1e0>)
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	43db      	mvns	r3, r3
 8002264:	493c      	ldr	r1, [pc, #240]	; (8002358 <HAL_GPIO_DeInit+0x1e0>)
 8002266:	4013      	ands	r3, r2
 8002268:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	220f      	movs	r2, #15
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800227a:	4a2f      	ldr	r2, [pc, #188]	; (8002338 <HAL_GPIO_DeInit+0x1c0>)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	089b      	lsrs	r3, r3, #2
 8002280:	3302      	adds	r3, #2
 8002282:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	43da      	mvns	r2, r3
 800228a:	482b      	ldr	r0, [pc, #172]	; (8002338 <HAL_GPIO_DeInit+0x1c0>)
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	089b      	lsrs	r3, r3, #2
 8002290:	400a      	ands	r2, r1
 8002292:	3302      	adds	r3, #2
 8002294:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	2103      	movs	r1, #3
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	08da      	lsrs	r2, r3, #3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3208      	adds	r2, #8
 80022b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	220f      	movs	r2, #15
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	08d2      	lsrs	r2, r2, #3
 80022cc:	4019      	ands	r1, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3208      	adds	r2, #8
 80022d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2103      	movs	r1, #3
 80022e0:	fa01 f303 	lsl.w	r3, r1, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	401a      	ands	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	2101      	movs	r1, #1
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	401a      	ands	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	2103      	movs	r1, #3
 800230a:	fa01 f303 	lsl.w	r3, r1, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	401a      	ands	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	3301      	adds	r3, #1
 800231a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	fa22 f303 	lsr.w	r3, r2, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	f47f af2f 	bne.w	8002188 <HAL_GPIO_DeInit+0x10>
  }
}
 800232a:	bf00      	nop
 800232c:	371c      	adds	r7, #28
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40010000 	.word	0x40010000
 800233c:	48000400 	.word	0x48000400
 8002340:	48000800 	.word	0x48000800
 8002344:	48000c00 	.word	0x48000c00
 8002348:	48001000 	.word	0x48001000
 800234c:	48001400 	.word	0x48001400
 8002350:	48001800 	.word	0x48001800
 8002354:	48001c00 	.word	0x48001c00
 8002358:	40010400 	.word	0x40010400

0800235c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	807b      	strh	r3, [r7, #2]
 8002368:	4613      	mov	r3, r2
 800236a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800236c:	787b      	ldrb	r3, [r7, #1]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002372:	887a      	ldrh	r2, [r7, #2]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002378:	e002      	b.n	8002380 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800237a:	887a      	ldrh	r2, [r7, #2]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e081      	b.n	80024a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d106      	bne.n	80023b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f8a8 	bl	8002508 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2224      	movs	r2, #36	; 0x24
 80023bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0201 	bic.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d107      	bne.n	8002406 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	e006      	b.n	8002414 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002412:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d104      	bne.n	8002426 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002424:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002438:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002448:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	ea42 0103 	orr.w	r1, r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	021a      	lsls	r2, r3, #8
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69d9      	ldr	r1, [r3, #28]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1a      	ldr	r2, [r3, #32]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0201 	orr.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2220      	movs	r2, #32
 800248e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e021      	b.n	8002500 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2224      	movs	r2, #36	; 0x24
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f821 	bl	800251c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af02      	add	r7, sp, #8
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	4608      	mov	r0, r1
 800253a:	4611      	mov	r1, r2
 800253c:	461a      	mov	r2, r3
 800253e:	4603      	mov	r3, r0
 8002540:	817b      	strh	r3, [r7, #10]
 8002542:	460b      	mov	r3, r1
 8002544:	813b      	strh	r3, [r7, #8]
 8002546:	4613      	mov	r3, r2
 8002548:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b20      	cmp	r3, #32
 8002554:	f040 80f9 	bne.w	800274a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <HAL_I2C_Mem_Write+0x34>
 800255e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002560:	2b00      	cmp	r3, #0
 8002562:	d105      	bne.n	8002570 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800256a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0ed      	b.n	800274c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_I2C_Mem_Write+0x4e>
 800257a:	2302      	movs	r3, #2
 800257c:	e0e6      	b.n	800274c <HAL_I2C_Mem_Write+0x21c>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002586:	f7ff fb77 	bl	8001c78 <HAL_GetTick>
 800258a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	2319      	movs	r3, #25
 8002592:	2201      	movs	r2, #1
 8002594:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 fadd 	bl	8002b58 <I2C_WaitOnFlagUntilTimeout>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0d1      	b.n	800274c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2221      	movs	r2, #33	; 0x21
 80025ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2240      	movs	r2, #64	; 0x40
 80025b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a3a      	ldr	r2, [r7, #32]
 80025c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025d0:	88f8      	ldrh	r0, [r7, #6]
 80025d2:	893a      	ldrh	r2, [r7, #8]
 80025d4:	8979      	ldrh	r1, [r7, #10]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	9301      	str	r3, [sp, #4]
 80025da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	4603      	mov	r3, r0
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f9ed 	bl	80029c0 <I2C_RequestMemoryWrite>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0a9      	b.n	800274c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2bff      	cmp	r3, #255	; 0xff
 8002600:	d90e      	bls.n	8002620 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	22ff      	movs	r2, #255	; 0xff
 8002606:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260c:	b2da      	uxtb	r2, r3
 800260e:	8979      	ldrh	r1, [r7, #10]
 8002610:	2300      	movs	r3, #0
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 fbbf 	bl	8002d9c <I2C_TransferConfig>
 800261e:	e00f      	b.n	8002640 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262e:	b2da      	uxtb	r2, r3
 8002630:	8979      	ldrh	r1, [r7, #10]
 8002632:	2300      	movs	r3, #0
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 fbae 	bl	8002d9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fac7 	bl	8002bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e07b      	b.n	800274c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	781a      	ldrb	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266e:	b29b      	uxth	r3, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d034      	beq.n	80026f8 <HAL_I2C_Mem_Write+0x1c8>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002692:	2b00      	cmp	r3, #0
 8002694:	d130      	bne.n	80026f8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269c:	2200      	movs	r2, #0
 800269e:	2180      	movs	r1, #128	; 0x80
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 fa59 	bl	8002b58 <I2C_WaitOnFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e04d      	b.n	800274c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2bff      	cmp	r3, #255	; 0xff
 80026b8:	d90e      	bls.n	80026d8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	22ff      	movs	r2, #255	; 0xff
 80026be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	8979      	ldrh	r1, [r7, #10]
 80026c8:	2300      	movs	r3, #0
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 fb63 	bl	8002d9c <I2C_TransferConfig>
 80026d6:	e00f      	b.n	80026f8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	8979      	ldrh	r1, [r7, #10]
 80026ea:	2300      	movs	r3, #0
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 fb52 	bl	8002d9c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d19e      	bne.n	8002640 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 faa6 	bl	8002c58 <I2C_WaitOnSTOPFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e01a      	b.n	800274c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2220      	movs	r2, #32
 800271c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6859      	ldr	r1, [r3, #4]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <HAL_I2C_Mem_Write+0x224>)
 800272a:	400b      	ands	r3, r1
 800272c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	e000      	b.n	800274c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800274a:	2302      	movs	r3, #2
  }
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	fe00e800 	.word	0xfe00e800

08002758 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af02      	add	r7, sp, #8
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	4608      	mov	r0, r1
 8002762:	4611      	mov	r1, r2
 8002764:	461a      	mov	r2, r3
 8002766:	4603      	mov	r3, r0
 8002768:	817b      	strh	r3, [r7, #10]
 800276a:	460b      	mov	r3, r1
 800276c:	813b      	strh	r3, [r7, #8]
 800276e:	4613      	mov	r3, r2
 8002770:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b20      	cmp	r3, #32
 800277c:	f040 80fd 	bne.w	800297a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <HAL_I2C_Mem_Read+0x34>
 8002786:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002788:	2b00      	cmp	r3, #0
 800278a:	d105      	bne.n	8002798 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002792:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0f1      	b.n	800297c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_I2C_Mem_Read+0x4e>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e0ea      	b.n	800297c <HAL_I2C_Mem_Read+0x224>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027ae:	f7ff fa63 	bl	8001c78 <HAL_GetTick>
 80027b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	2319      	movs	r3, #25
 80027ba:	2201      	movs	r2, #1
 80027bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 f9c9 	bl	8002b58 <I2C_WaitOnFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0d5      	b.n	800297c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2222      	movs	r2, #34	; 0x22
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2240      	movs	r2, #64	; 0x40
 80027dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a3a      	ldr	r2, [r7, #32]
 80027ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027f8:	88f8      	ldrh	r0, [r7, #6]
 80027fa:	893a      	ldrh	r2, [r7, #8]
 80027fc:	8979      	ldrh	r1, [r7, #10]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	4603      	mov	r3, r0
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 f92d 	bl	8002a68 <I2C_RequestMemoryRead>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0ad      	b.n	800297c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002824:	b29b      	uxth	r3, r3
 8002826:	2bff      	cmp	r3, #255	; 0xff
 8002828:	d90e      	bls.n	8002848 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	22ff      	movs	r2, #255	; 0xff
 800282e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002834:	b2da      	uxtb	r2, r3
 8002836:	8979      	ldrh	r1, [r7, #10]
 8002838:	4b52      	ldr	r3, [pc, #328]	; (8002984 <HAL_I2C_Mem_Read+0x22c>)
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 faab 	bl	8002d9c <I2C_TransferConfig>
 8002846:	e00f      	b.n	8002868 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002856:	b2da      	uxtb	r2, r3
 8002858:	8979      	ldrh	r1, [r7, #10]
 800285a:	4b4a      	ldr	r3, [pc, #296]	; (8002984 <HAL_I2C_Mem_Read+0x22c>)
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 fa9a 	bl	8002d9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286e:	2200      	movs	r2, #0
 8002870:	2104      	movs	r1, #4
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f970 	bl	8002b58 <I2C_WaitOnFlagUntilTimeout>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e07c      	b.n	800297c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d034      	beq.n	8002928 <HAL_I2C_Mem_Read+0x1d0>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d130      	bne.n	8002928 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028cc:	2200      	movs	r2, #0
 80028ce:	2180      	movs	r1, #128	; 0x80
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f941 	bl	8002b58 <I2C_WaitOnFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e04d      	b.n	800297c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2bff      	cmp	r3, #255	; 0xff
 80028e8:	d90e      	bls.n	8002908 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	22ff      	movs	r2, #255	; 0xff
 80028ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	8979      	ldrh	r1, [r7, #10]
 80028f8:	2300      	movs	r3, #0
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 fa4b 	bl	8002d9c <I2C_TransferConfig>
 8002906:	e00f      	b.n	8002928 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002916:	b2da      	uxtb	r2, r3
 8002918:	8979      	ldrh	r1, [r7, #10]
 800291a:	2300      	movs	r3, #0
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 fa3a 	bl	8002d9c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d19a      	bne.n	8002868 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f98e 	bl	8002c58 <I2C_WaitOnSTOPFlagUntilTimeout>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e01a      	b.n	800297c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2220      	movs	r2, #32
 800294c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6859      	ldr	r1, [r3, #4]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <HAL_I2C_Mem_Read+0x230>)
 800295a:	400b      	ands	r3, r1
 800295c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2220      	movs	r2, #32
 8002962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	e000      	b.n	800297c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800297a:	2302      	movs	r3, #2
  }
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	80002400 	.word	0x80002400
 8002988:	fe00e800 	.word	0xfe00e800

0800298c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800299a:	b2db      	uxtb	r3, r3
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	4608      	mov	r0, r1
 80029ca:	4611      	mov	r1, r2
 80029cc:	461a      	mov	r2, r3
 80029ce:	4603      	mov	r3, r0
 80029d0:	817b      	strh	r3, [r7, #10]
 80029d2:	460b      	mov	r3, r1
 80029d4:	813b      	strh	r3, [r7, #8]
 80029d6:	4613      	mov	r3, r2
 80029d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	8979      	ldrh	r1, [r7, #10]
 80029e0:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <I2C_RequestMemoryWrite+0xa4>)
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 f9d7 	bl	8002d9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	69b9      	ldr	r1, [r7, #24]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f8f0 	bl	8002bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e02c      	b.n	8002a5c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a08:	893b      	ldrh	r3, [r7, #8]
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	629a      	str	r2, [r3, #40]	; 0x28
 8002a12:	e015      	b.n	8002a40 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a14:	893b      	ldrh	r3, [r7, #8]
 8002a16:	0a1b      	lsrs	r3, r3, #8
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a22:	69fa      	ldr	r2, [r7, #28]
 8002a24:	69b9      	ldr	r1, [r7, #24]
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 f8d6 	bl	8002bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e012      	b.n	8002a5c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a36:	893b      	ldrh	r3, [r7, #8]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2200      	movs	r2, #0
 8002a48:	2180      	movs	r1, #128	; 0x80
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f884 	bl	8002b58 <I2C_WaitOnFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	80002000 	.word	0x80002000

08002a68 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	4608      	mov	r0, r1
 8002a72:	4611      	mov	r1, r2
 8002a74:	461a      	mov	r2, r3
 8002a76:	4603      	mov	r3, r0
 8002a78:	817b      	strh	r3, [r7, #10]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	813b      	strh	r3, [r7, #8]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	8979      	ldrh	r1, [r7, #10]
 8002a88:	4b20      	ldr	r3, [pc, #128]	; (8002b0c <I2C_RequestMemoryRead+0xa4>)
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f984 	bl	8002d9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a94:	69fa      	ldr	r2, [r7, #28]
 8002a96:	69b9      	ldr	r1, [r7, #24]
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 f89d 	bl	8002bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e02c      	b.n	8002b02 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d105      	bne.n	8002aba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002aae:	893b      	ldrh	r3, [r7, #8]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ab8:	e015      	b.n	8002ae6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002aba:	893b      	ldrh	r3, [r7, #8]
 8002abc:	0a1b      	lsrs	r3, r3, #8
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac8:	69fa      	ldr	r2, [r7, #28]
 8002aca:	69b9      	ldr	r1, [r7, #24]
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f883 	bl	8002bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e012      	b.n	8002b02 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002adc:	893b      	ldrh	r3, [r7, #8]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	2200      	movs	r2, #0
 8002aee:	2140      	movs	r1, #64	; 0x40
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 f831 	bl	8002b58 <I2C_WaitOnFlagUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	80002000 	.word	0x80002000

08002b10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d103      	bne.n	8002b2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d007      	beq.n	8002b4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699a      	ldr	r2, [r3, #24]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	619a      	str	r2, [r3, #24]
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	4613      	mov	r3, r2
 8002b66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b68:	e022      	b.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b70:	d01e      	beq.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b72:	f7ff f881 	bl	8001c78 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d302      	bcc.n	8002b88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d113      	bne.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8c:	f043 0220 	orr.w	r2, r3, #32
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e00f      	b.n	8002bd0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d0cd      	beq.n	8002b6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002be4:	e02c      	b.n	8002c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f870 	bl	8002cd0 <I2C_IsAcknowledgeFailed>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e02a      	b.n	8002c50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c00:	d01e      	beq.n	8002c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c02:	f7ff f839 	bl	8001c78 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d302      	bcc.n	8002c18 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d113      	bne.n	8002c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	f043 0220 	orr.w	r2, r3, #32
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e007      	b.n	8002c50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d1cb      	bne.n	8002be6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c64:	e028      	b.n	8002cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f830 	bl	8002cd0 <I2C_IsAcknowledgeFailed>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e026      	b.n	8002cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7a:	f7fe fffd 	bl	8001c78 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d302      	bcc.n	8002c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d113      	bne.n	8002cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c94:	f043 0220 	orr.w	r2, r3, #32
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e007      	b.n	8002cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f003 0320 	and.w	r3, r3, #32
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d1cf      	bne.n	8002c66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	2b10      	cmp	r3, #16
 8002ce8:	d151      	bne.n	8002d8e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cea:	e022      	b.n	8002d32 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf2:	d01e      	beq.n	8002d32 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf4:	f7fe ffc0 	bl	8001c78 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d302      	bcc.n	8002d0a <I2C_IsAcknowledgeFailed+0x3a>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d113      	bne.n	8002d32 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	f043 0220 	orr.w	r2, r3, #32
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e02e      	b.n	8002d90 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f003 0320 	and.w	r3, r3, #32
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d1d5      	bne.n	8002cec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2210      	movs	r2, #16
 8002d46:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f7ff fedd 	bl	8002b10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6859      	ldr	r1, [r3, #4]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4b0d      	ldr	r3, [pc, #52]	; (8002d98 <I2C_IsAcknowledgeFailed+0xc8>)
 8002d62:	400b      	ands	r3, r1
 8002d64:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	f043 0204 	orr.w	r2, r3, #4
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	fe00e800 	.word	0xfe00e800

08002d9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	607b      	str	r3, [r7, #4]
 8002da6:	460b      	mov	r3, r1
 8002da8:	817b      	strh	r3, [r7, #10]
 8002daa:	4613      	mov	r3, r2
 8002dac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	0d5b      	lsrs	r3, r3, #21
 8002db8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002dbc:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <I2C_TransferConfig+0x58>)
 8002dbe:	430b      	orrs	r3, r1
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	ea02 0103 	and.w	r1, r2, r3
 8002dc6:	897b      	ldrh	r3, [r7, #10]
 8002dc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dcc:	7a7b      	ldrb	r3, [r7, #9]
 8002dce:	041b      	lsls	r3, r3, #16
 8002dd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	03ff63ff 	.word	0x03ff63ff

08002df8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	d138      	bne.n	8002e80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e032      	b.n	8002e82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2224      	movs	r2, #36	; 0x24
 8002e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0201 	bic.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6819      	ldr	r1, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e000      	b.n	8002e82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e80:	2302      	movs	r3, #2
  }
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b085      	sub	sp, #20
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d139      	bne.n	8002f18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e033      	b.n	8002f1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2224      	movs	r2, #36	; 0x24
 8002ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0201 	bic.w	r2, r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ee0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	021b      	lsls	r3, r3, #8
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	e000      	b.n	8002f1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f18:	2302      	movs	r3, #2
  }
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f2c:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f38:	d102      	bne.n	8002f40 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f3e:	e00b      	b.n	8002f58 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002f40:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f4e:	d102      	bne.n	8002f56 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f54:	e000      	b.n	8002f58 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002f56:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40007000 	.word	0x40007000

08002f68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d141      	bne.n	8002ffa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f76:	4b4b      	ldr	r3, [pc, #300]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f82:	d131      	bne.n	8002fe8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f84:	4b47      	ldr	r3, [pc, #284]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f8a:	4a46      	ldr	r2, [pc, #280]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f94:	4b43      	ldr	r3, [pc, #268]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f9c:	4a41      	ldr	r2, [pc, #260]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fa2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002fa4:	4b40      	ldr	r3, [pc, #256]	; (80030a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2232      	movs	r2, #50	; 0x32
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
 8002fae:	4a3f      	ldr	r2, [pc, #252]	; (80030ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	0c9b      	lsrs	r3, r3, #18
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fba:	e002      	b.n	8002fc2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fc2:	4b38      	ldr	r3, [pc, #224]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fce:	d102      	bne.n	8002fd6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f2      	bne.n	8002fbc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fd6:	4b33      	ldr	r3, [pc, #204]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe2:	d158      	bne.n	8003096 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e057      	b.n	8003098 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fe8:	4b2e      	ldr	r3, [pc, #184]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fee:	4a2d      	ldr	r2, [pc, #180]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ff4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ff8:	e04d      	b.n	8003096 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003000:	d141      	bne.n	8003086 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003002:	4b28      	ldr	r3, [pc, #160]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800300a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800300e:	d131      	bne.n	8003074 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003010:	4b24      	ldr	r3, [pc, #144]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003016:	4a23      	ldr	r2, [pc, #140]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800301c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003020:	4b20      	ldr	r3, [pc, #128]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003028:	4a1e      	ldr	r2, [pc, #120]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800302e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003030:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2232      	movs	r2, #50	; 0x32
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	4a1c      	ldr	r2, [pc, #112]	; (80030ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800303c:	fba2 2303 	umull	r2, r3, r2, r3
 8003040:	0c9b      	lsrs	r3, r3, #18
 8003042:	3301      	adds	r3, #1
 8003044:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003046:	e002      	b.n	800304e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	3b01      	subs	r3, #1
 800304c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800304e:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800305a:	d102      	bne.n	8003062 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f2      	bne.n	8003048 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003062:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800306e:	d112      	bne.n	8003096 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e011      	b.n	8003098 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800307a:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800307c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003080:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003084:	e007      	b.n	8003096 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003086:	4b07      	ldr	r3, [pc, #28]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800308e:	4a05      	ldr	r2, [pc, #20]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003090:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003094:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	40007000 	.word	0x40007000
 80030a8:	20000000 	.word	0x20000000
 80030ac:	431bde83 	.word	0x431bde83

080030b0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	4a04      	ldr	r2, [pc, #16]	; (80030cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80030ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030be:	6053      	str	r3, [r2, #4]
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40007000 	.word	0x40007000

080030d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	f000 bc16 	b.w	8003910 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030e4:	4ba0      	ldr	r3, [pc, #640]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 030c 	and.w	r3, r3, #12
 80030ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030ee:	4b9e      	ldr	r3, [pc, #632]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0310 	and.w	r3, r3, #16
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80e4 	beq.w	80032ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <HAL_RCC_OscConfig+0x4c>
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2b0c      	cmp	r3, #12
 8003110:	f040 808b 	bne.w	800322a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2b01      	cmp	r3, #1
 8003118:	f040 8087 	bne.w	800322a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800311c:	4b92      	ldr	r3, [pc, #584]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_RCC_OscConfig+0x64>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e3ed      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1a      	ldr	r2, [r3, #32]
 8003138:	4b8b      	ldr	r3, [pc, #556]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d004      	beq.n	800314e <HAL_RCC_OscConfig+0x7e>
 8003144:	4b88      	ldr	r3, [pc, #544]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800314c:	e005      	b.n	800315a <HAL_RCC_OscConfig+0x8a>
 800314e:	4b86      	ldr	r3, [pc, #536]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 8003150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800315a:	4293      	cmp	r3, r2
 800315c:	d223      	bcs.n	80031a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fdf8 	bl	8003d58 <RCC_SetFlashLatencyFromMSIRange>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e3ce      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003172:	4b7d      	ldr	r3, [pc, #500]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a7c      	ldr	r2, [pc, #496]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 8003178:	f043 0308 	orr.w	r3, r3, #8
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	4b7a      	ldr	r3, [pc, #488]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	4977      	ldr	r1, [pc, #476]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 800318c:	4313      	orrs	r3, r2
 800318e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003190:	4b75      	ldr	r3, [pc, #468]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	021b      	lsls	r3, r3, #8
 800319e:	4972      	ldr	r1, [pc, #456]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	604b      	str	r3, [r1, #4]
 80031a4:	e025      	b.n	80031f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031a6:	4b70      	ldr	r3, [pc, #448]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a6f      	ldr	r2, [pc, #444]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 80031ac:	f043 0308 	orr.w	r3, r3, #8
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	4b6d      	ldr	r3, [pc, #436]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	496a      	ldr	r1, [pc, #424]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031c4:	4b68      	ldr	r3, [pc, #416]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	4965      	ldr	r1, [pc, #404]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fdb8 	bl	8003d58 <RCC_SetFlashLatencyFromMSIRange>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e38e      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031f2:	f000 fcbf 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 80031f6:	4601      	mov	r1, r0
 80031f8:	4b5b      	ldr	r3, [pc, #364]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	4a5a      	ldr	r2, [pc, #360]	; (800336c <HAL_RCC_OscConfig+0x29c>)
 8003204:	5cd3      	ldrb	r3, [r2, r3]
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	fa21 f303 	lsr.w	r3, r1, r3
 800320e:	4a58      	ldr	r2, [pc, #352]	; (8003370 <HAL_RCC_OscConfig+0x2a0>)
 8003210:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003212:	4b58      	ldr	r3, [pc, #352]	; (8003374 <HAL_RCC_OscConfig+0x2a4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd ffbc 	bl	8001194 <HAL_InitTick>
 800321c:	4603      	mov	r3, r0
 800321e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d052      	beq.n	80032cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	e372      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d032      	beq.n	8003298 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003232:	4b4d      	ldr	r3, [pc, #308]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a4c      	ldr	r2, [pc, #304]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 8003238:	f043 0301 	orr.w	r3, r3, #1
 800323c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800323e:	f7fe fd1b 	bl	8001c78 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003246:	f7fe fd17 	bl	8001c78 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e35b      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003258:	4b43      	ldr	r3, [pc, #268]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003264:	4b40      	ldr	r3, [pc, #256]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a3f      	ldr	r2, [pc, #252]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 800326a:	f043 0308 	orr.w	r3, r3, #8
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	4b3d      	ldr	r3, [pc, #244]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	493a      	ldr	r1, [pc, #232]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 800327e:	4313      	orrs	r3, r2
 8003280:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003282:	4b39      	ldr	r3, [pc, #228]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	4935      	ldr	r1, [pc, #212]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 8003292:	4313      	orrs	r3, r2
 8003294:	604b      	str	r3, [r1, #4]
 8003296:	e01a      	b.n	80032ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003298:	4b33      	ldr	r3, [pc, #204]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a32      	ldr	r2, [pc, #200]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 800329e:	f023 0301 	bic.w	r3, r3, #1
 80032a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032a4:	f7fe fce8 	bl	8001c78 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032ac:	f7fe fce4 	bl	8001c78 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e328      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032be:	4b2a      	ldr	r3, [pc, #168]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x1dc>
 80032ca:	e000      	b.n	80032ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d073      	beq.n	80033c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d005      	beq.n	80032ec <HAL_RCC_OscConfig+0x21c>
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	2b0c      	cmp	r3, #12
 80032e4:	d10e      	bne.n	8003304 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	d10b      	bne.n	8003304 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ec:	4b1e      	ldr	r3, [pc, #120]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d063      	beq.n	80033c0 <HAL_RCC_OscConfig+0x2f0>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d15f      	bne.n	80033c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e305      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330c:	d106      	bne.n	800331c <HAL_RCC_OscConfig+0x24c>
 800330e:	4b16      	ldr	r3, [pc, #88]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a15      	ldr	r2, [pc, #84]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 8003314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e01d      	b.n	8003358 <HAL_RCC_OscConfig+0x288>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003324:	d10c      	bne.n	8003340 <HAL_RCC_OscConfig+0x270>
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a0f      	ldr	r2, [pc, #60]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 800332c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a0c      	ldr	r2, [pc, #48]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 8003338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	e00b      	b.n	8003358 <HAL_RCC_OscConfig+0x288>
 8003340:	4b09      	ldr	r3, [pc, #36]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a08      	ldr	r2, [pc, #32]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 8003346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a05      	ldr	r2, [pc, #20]	; (8003368 <HAL_RCC_OscConfig+0x298>)
 8003352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01b      	beq.n	8003398 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fe fc8a 	bl	8001c78 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003366:	e010      	b.n	800338a <HAL_RCC_OscConfig+0x2ba>
 8003368:	40021000 	.word	0x40021000
 800336c:	080084d8 	.word	0x080084d8
 8003370:	20000000 	.word	0x20000000
 8003374:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003378:	f7fe fc7e 	bl	8001c78 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	; 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e2c2      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800338a:	4baf      	ldr	r3, [pc, #700]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0x2a8>
 8003396:	e014      	b.n	80033c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fe fc6e 	bl	8001c78 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a0:	f7fe fc6a 	bl	8001c78 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	; 0x64
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e2ae      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033b2:	4ba5      	ldr	r3, [pc, #660]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x2d0>
 80033be:	e000      	b.n	80033c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d060      	beq.n	8003490 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d005      	beq.n	80033e0 <HAL_RCC_OscConfig+0x310>
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	2b0c      	cmp	r3, #12
 80033d8:	d119      	bne.n	800340e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d116      	bne.n	800340e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033e0:	4b99      	ldr	r3, [pc, #612]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_RCC_OscConfig+0x328>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e28b      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f8:	4b93      	ldr	r3, [pc, #588]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	061b      	lsls	r3, r3, #24
 8003406:	4990      	ldr	r1, [pc, #576]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 8003408:	4313      	orrs	r3, r2
 800340a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800340c:	e040      	b.n	8003490 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d023      	beq.n	800345e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003416:	4b8c      	ldr	r3, [pc, #560]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a8b      	ldr	r2, [pc, #556]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 800341c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003422:	f7fe fc29 	bl	8001c78 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800342a:	f7fe fc25 	bl	8001c78 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e269      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800343c:	4b82      	ldr	r3, [pc, #520]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003448:	4b7f      	ldr	r3, [pc, #508]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	061b      	lsls	r3, r3, #24
 8003456:	497c      	ldr	r1, [pc, #496]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 8003458:	4313      	orrs	r3, r2
 800345a:	604b      	str	r3, [r1, #4]
 800345c:	e018      	b.n	8003490 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345e:	4b7a      	ldr	r3, [pc, #488]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a79      	ldr	r2, [pc, #484]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 8003464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346a:	f7fe fc05 	bl	8001c78 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003472:	f7fe fc01 	bl	8001c78 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e245      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003484:	4b70      	ldr	r3, [pc, #448]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1f0      	bne.n	8003472 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0308 	and.w	r3, r3, #8
 8003498:	2b00      	cmp	r3, #0
 800349a:	d03c      	beq.n	8003516 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d01c      	beq.n	80034de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034a4:	4b68      	ldr	r3, [pc, #416]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 80034a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034aa:	4a67      	ldr	r2, [pc, #412]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b4:	f7fe fbe0 	bl	8001c78 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034bc:	f7fe fbdc 	bl	8001c78 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e220      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034ce:	4b5e      	ldr	r3, [pc, #376]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 80034d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0ef      	beq.n	80034bc <HAL_RCC_OscConfig+0x3ec>
 80034dc:	e01b      	b.n	8003516 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034de:	4b5a      	ldr	r3, [pc, #360]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 80034e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e4:	4a58      	ldr	r2, [pc, #352]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 80034e6:	f023 0301 	bic.w	r3, r3, #1
 80034ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ee:	f7fe fbc3 	bl	8001c78 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f6:	f7fe fbbf 	bl	8001c78 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e203      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003508:	4b4f      	ldr	r3, [pc, #316]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 800350a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1ef      	bne.n	80034f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 80a6 	beq.w	8003670 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003524:	2300      	movs	r3, #0
 8003526:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003528:	4b47      	ldr	r3, [pc, #284]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 800352a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10d      	bne.n	8003550 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003534:	4b44      	ldr	r3, [pc, #272]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 8003536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003538:	4a43      	ldr	r2, [pc, #268]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 800353a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353e:	6593      	str	r3, [r2, #88]	; 0x58
 8003540:	4b41      	ldr	r3, [pc, #260]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 8003542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800354c:	2301      	movs	r3, #1
 800354e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003550:	4b3e      	ldr	r3, [pc, #248]	; (800364c <HAL_RCC_OscConfig+0x57c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003558:	2b00      	cmp	r3, #0
 800355a:	d118      	bne.n	800358e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800355c:	4b3b      	ldr	r3, [pc, #236]	; (800364c <HAL_RCC_OscConfig+0x57c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a3a      	ldr	r2, [pc, #232]	; (800364c <HAL_RCC_OscConfig+0x57c>)
 8003562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003566:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003568:	f7fe fb86 	bl	8001c78 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003570:	f7fe fb82 	bl	8001c78 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e1c6      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003582:	4b32      	ldr	r3, [pc, #200]	; (800364c <HAL_RCC_OscConfig+0x57c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d108      	bne.n	80035a8 <HAL_RCC_OscConfig+0x4d8>
 8003596:	4b2c      	ldr	r3, [pc, #176]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 8003598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359c:	4a2a      	ldr	r2, [pc, #168]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035a6:	e024      	b.n	80035f2 <HAL_RCC_OscConfig+0x522>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b05      	cmp	r3, #5
 80035ae:	d110      	bne.n	80035d2 <HAL_RCC_OscConfig+0x502>
 80035b0:	4b25      	ldr	r3, [pc, #148]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 80035b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b6:	4a24      	ldr	r2, [pc, #144]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 80035b8:	f043 0304 	orr.w	r3, r3, #4
 80035bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035c0:	4b21      	ldr	r3, [pc, #132]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 80035c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c6:	4a20      	ldr	r2, [pc, #128]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035d0:	e00f      	b.n	80035f2 <HAL_RCC_OscConfig+0x522>
 80035d2:	4b1d      	ldr	r3, [pc, #116]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 80035d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d8:	4a1b      	ldr	r2, [pc, #108]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 80035da:	f023 0301 	bic.w	r3, r3, #1
 80035de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035e2:	4b19      	ldr	r3, [pc, #100]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 80035e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e8:	4a17      	ldr	r2, [pc, #92]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 80035ea:	f023 0304 	bic.w	r3, r3, #4
 80035ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d016      	beq.n	8003628 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fa:	f7fe fb3d 	bl	8001c78 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003600:	e00a      	b.n	8003618 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7fe fb39 	bl	8001c78 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e17b      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_RCC_OscConfig+0x578>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0ed      	beq.n	8003602 <HAL_RCC_OscConfig+0x532>
 8003626:	e01a      	b.n	800365e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7fe fb26 	bl	8001c78 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800362e:	e00f      	b.n	8003650 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003630:	f7fe fb22 	bl	8001c78 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f241 3288 	movw	r2, #5000	; 0x1388
 800363e:	4293      	cmp	r3, r2
 8003640:	d906      	bls.n	8003650 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e164      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
 8003646:	bf00      	nop
 8003648:	40021000 	.word	0x40021000
 800364c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003650:	4ba8      	ldr	r3, [pc, #672]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1e8      	bne.n	8003630 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800365e:	7ffb      	ldrb	r3, [r7, #31]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d105      	bne.n	8003670 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003664:	4ba3      	ldr	r3, [pc, #652]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 8003666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003668:	4aa2      	ldr	r2, [pc, #648]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 800366a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800366e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d03c      	beq.n	80036f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	2b00      	cmp	r3, #0
 8003682:	d01c      	beq.n	80036be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003684:	4b9b      	ldr	r3, [pc, #620]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 8003686:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800368a:	4a9a      	ldr	r2, [pc, #616]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003694:	f7fe faf0 	bl	8001c78 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800369c:	f7fe faec 	bl	8001c78 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e130      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036ae:	4b91      	ldr	r3, [pc, #580]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 80036b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0ef      	beq.n	800369c <HAL_RCC_OscConfig+0x5cc>
 80036bc:	e01b      	b.n	80036f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036be:	4b8d      	ldr	r3, [pc, #564]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 80036c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036c4:	4a8b      	ldr	r2, [pc, #556]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 80036c6:	f023 0301 	bic.w	r3, r3, #1
 80036ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ce:	f7fe fad3 	bl	8001c78 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036d6:	f7fe facf 	bl	8001c78 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e113      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036e8:	4b82      	ldr	r3, [pc, #520]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 80036ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1ef      	bne.n	80036d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 8107 	beq.w	800390e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	2b02      	cmp	r3, #2
 8003706:	f040 80cb 	bne.w	80038a0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800370a:	4b7a      	ldr	r3, [pc, #488]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f003 0203 	and.w	r2, r3, #3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	429a      	cmp	r2, r3
 800371c:	d12c      	bne.n	8003778 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	3b01      	subs	r3, #1
 800372a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800372c:	429a      	cmp	r2, r3
 800372e:	d123      	bne.n	8003778 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800373c:	429a      	cmp	r2, r3
 800373e:	d11b      	bne.n	8003778 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800374c:	429a      	cmp	r2, r3
 800374e:	d113      	bne.n	8003778 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375a:	085b      	lsrs	r3, r3, #1
 800375c:	3b01      	subs	r3, #1
 800375e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003760:	429a      	cmp	r2, r3
 8003762:	d109      	bne.n	8003778 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	3b01      	subs	r3, #1
 8003772:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d06d      	beq.n	8003854 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2b0c      	cmp	r3, #12
 800377c:	d068      	beq.n	8003850 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800377e:	4b5d      	ldr	r3, [pc, #372]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d105      	bne.n	8003796 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800378a:	4b5a      	ldr	r3, [pc, #360]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e0ba      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800379a:	4b56      	ldr	r3, [pc, #344]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a55      	ldr	r2, [pc, #340]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 80037a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037a6:	f7fe fa67 	bl	8001c78 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ae:	f7fe fa63 	bl	8001c78 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e0a7      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037c0:	4b4c      	ldr	r3, [pc, #304]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1f0      	bne.n	80037ae <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037cc:	4b49      	ldr	r3, [pc, #292]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	4b49      	ldr	r3, [pc, #292]	; (80038f8 <HAL_RCC_OscConfig+0x828>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037dc:	3a01      	subs	r2, #1
 80037de:	0112      	lsls	r2, r2, #4
 80037e0:	4311      	orrs	r1, r2
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037e6:	0212      	lsls	r2, r2, #8
 80037e8:	4311      	orrs	r1, r2
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037ee:	0852      	lsrs	r2, r2, #1
 80037f0:	3a01      	subs	r2, #1
 80037f2:	0552      	lsls	r2, r2, #21
 80037f4:	4311      	orrs	r1, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037fa:	0852      	lsrs	r2, r2, #1
 80037fc:	3a01      	subs	r2, #1
 80037fe:	0652      	lsls	r2, r2, #25
 8003800:	4311      	orrs	r1, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003806:	06d2      	lsls	r2, r2, #27
 8003808:	430a      	orrs	r2, r1
 800380a:	493a      	ldr	r1, [pc, #232]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 800380c:	4313      	orrs	r3, r2
 800380e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003810:	4b38      	ldr	r3, [pc, #224]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a37      	ldr	r2, [pc, #220]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 8003816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800381a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800381c:	4b35      	ldr	r3, [pc, #212]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	4a34      	ldr	r2, [pc, #208]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 8003822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003826:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003828:	f7fe fa26 	bl	8001c78 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003830:	f7fe fa22 	bl	8001c78 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e066      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003842:	4b2c      	ldr	r3, [pc, #176]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f0      	beq.n	8003830 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800384e:	e05e      	b.n	800390e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e05d      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003854:	4b27      	ldr	r3, [pc, #156]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d156      	bne.n	800390e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003860:	4b24      	ldr	r3, [pc, #144]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a23      	ldr	r2, [pc, #140]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 8003866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800386a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800386c:	4b21      	ldr	r3, [pc, #132]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	4a20      	ldr	r2, [pc, #128]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 8003872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003876:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003878:	f7fe f9fe 	bl	8001c78 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003880:	f7fe f9fa 	bl	8001c78 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e03e      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003892:	4b18      	ldr	r3, [pc, #96]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0f0      	beq.n	8003880 <HAL_RCC_OscConfig+0x7b0>
 800389e:	e036      	b.n	800390e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	2b0c      	cmp	r3, #12
 80038a4:	d031      	beq.n	800390a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a6:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a12      	ldr	r2, [pc, #72]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 80038ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038b0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80038b2:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d105      	bne.n	80038ca <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80038be:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	4a0c      	ldr	r2, [pc, #48]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 80038c4:	f023 0303 	bic.w	r3, r3, #3
 80038c8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80038ca:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	4a09      	ldr	r2, [pc, #36]	; (80038f4 <HAL_RCC_OscConfig+0x824>)
 80038d0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038da:	f7fe f9cd 	bl	8001c78 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e0:	e00c      	b.n	80038fc <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e2:	f7fe f9c9 	bl	8001c78 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d905      	bls.n	80038fc <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e00d      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
 80038f4:	40021000 	.word	0x40021000
 80038f8:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <HAL_RCC_OscConfig+0x848>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1ec      	bne.n	80038e2 <HAL_RCC_OscConfig+0x812>
 8003908:	e001      	b.n	800390e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3720      	adds	r7, #32
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40021000 	.word	0x40021000

0800391c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e10f      	b.n	8003b54 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003934:	4b89      	ldr	r3, [pc, #548]	; (8003b5c <HAL_RCC_ClockConfig+0x240>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d910      	bls.n	8003964 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003942:	4b86      	ldr	r3, [pc, #536]	; (8003b5c <HAL_RCC_ClockConfig+0x240>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f023 020f 	bic.w	r2, r3, #15
 800394a:	4984      	ldr	r1, [pc, #528]	; (8003b5c <HAL_RCC_ClockConfig+0x240>)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	4313      	orrs	r3, r2
 8003950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003952:	4b82      	ldr	r3, [pc, #520]	; (8003b5c <HAL_RCC_ClockConfig+0x240>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d001      	beq.n	8003964 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0f7      	b.n	8003b54 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8089 	beq.w	8003a84 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b03      	cmp	r3, #3
 8003978:	d133      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800397a:	4b79      	ldr	r3, [pc, #484]	; (8003b60 <HAL_RCC_ClockConfig+0x244>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e0e4      	b.n	8003b54 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800398a:	f000 fa3f 	bl	8003e0c <RCC_GetSysClockFreqFromPLLSource>
 800398e:	4602      	mov	r2, r0
 8003990:	4b74      	ldr	r3, [pc, #464]	; (8003b64 <HAL_RCC_ClockConfig+0x248>)
 8003992:	429a      	cmp	r2, r3
 8003994:	d955      	bls.n	8003a42 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003996:	4b72      	ldr	r3, [pc, #456]	; (8003b60 <HAL_RCC_ClockConfig+0x244>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10a      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039a2:	4b6f      	ldr	r3, [pc, #444]	; (8003b60 <HAL_RCC_ClockConfig+0x244>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039aa:	4a6d      	ldr	r2, [pc, #436]	; (8003b60 <HAL_RCC_ClockConfig+0x244>)
 80039ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039b2:	2380      	movs	r3, #128	; 0x80
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	e044      	b.n	8003a42 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d03e      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x126>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d13a      	bne.n	8003a42 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039cc:	4b64      	ldr	r3, [pc, #400]	; (8003b60 <HAL_RCC_ClockConfig+0x244>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039d4:	4a62      	ldr	r2, [pc, #392]	; (8003b60 <HAL_RCC_ClockConfig+0x244>)
 80039d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039da:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039dc:	2380      	movs	r3, #128	; 0x80
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	e02f      	b.n	8003a42 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d107      	bne.n	80039fa <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ea:	4b5d      	ldr	r3, [pc, #372]	; (8003b60 <HAL_RCC_ClockConfig+0x244>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d115      	bne.n	8003a22 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e0ac      	b.n	8003b54 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d107      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a02:	4b57      	ldr	r3, [pc, #348]	; (8003b60 <HAL_RCC_ClockConfig+0x244>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d109      	bne.n	8003a22 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e0a0      	b.n	8003b54 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a12:	4b53      	ldr	r3, [pc, #332]	; (8003b60 <HAL_RCC_ClockConfig+0x244>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e098      	b.n	8003b54 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003a22:	f000 f8a7 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 8003a26:	4602      	mov	r2, r0
 8003a28:	4b4e      	ldr	r3, [pc, #312]	; (8003b64 <HAL_RCC_ClockConfig+0x248>)
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d909      	bls.n	8003a42 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a2e:	4b4c      	ldr	r3, [pc, #304]	; (8003b60 <HAL_RCC_ClockConfig+0x244>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a36:	4a4a      	ldr	r2, [pc, #296]	; (8003b60 <HAL_RCC_ClockConfig+0x244>)
 8003a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a3c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a3e:	2380      	movs	r3, #128	; 0x80
 8003a40:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a42:	4b47      	ldr	r3, [pc, #284]	; (8003b60 <HAL_RCC_ClockConfig+0x244>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f023 0203 	bic.w	r2, r3, #3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	4944      	ldr	r1, [pc, #272]	; (8003b60 <HAL_RCC_ClockConfig+0x244>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a54:	f7fe f910 	bl	8001c78 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5a:	e00a      	b.n	8003a72 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a5c:	f7fe f90c 	bl	8001c78 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e070      	b.n	8003b54 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a72:	4b3b      	ldr	r3, [pc, #236]	; (8003b60 <HAL_RCC_ClockConfig+0x244>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 020c 	and.w	r2, r3, #12
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d1eb      	bne.n	8003a5c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d009      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a90:	4b33      	ldr	r3, [pc, #204]	; (8003b60 <HAL_RCC_ClockConfig+0x244>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	4930      	ldr	r1, [pc, #192]	; (8003b60 <HAL_RCC_ClockConfig+0x244>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	608b      	str	r3, [r1, #8]
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	2b80      	cmp	r3, #128	; 0x80
 8003aa8:	d105      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003aaa:	4b2d      	ldr	r3, [pc, #180]	; (8003b60 <HAL_RCC_ClockConfig+0x244>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	4a2c      	ldr	r2, [pc, #176]	; (8003b60 <HAL_RCC_ClockConfig+0x244>)
 8003ab0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ab4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab6:	4b29      	ldr	r3, [pc, #164]	; (8003b5c <HAL_RCC_ClockConfig+0x240>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d210      	bcs.n	8003ae6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac4:	4b25      	ldr	r3, [pc, #148]	; (8003b5c <HAL_RCC_ClockConfig+0x240>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f023 020f 	bic.w	r2, r3, #15
 8003acc:	4923      	ldr	r1, [pc, #140]	; (8003b5c <HAL_RCC_ClockConfig+0x240>)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad4:	4b21      	ldr	r3, [pc, #132]	; (8003b5c <HAL_RCC_ClockConfig+0x240>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d001      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e036      	b.n	8003b54 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003af2:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <HAL_RCC_ClockConfig+0x244>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	4918      	ldr	r1, [pc, #96]	; (8003b60 <HAL_RCC_ClockConfig+0x244>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d009      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b10:	4b13      	ldr	r3, [pc, #76]	; (8003b60 <HAL_RCC_ClockConfig+0x244>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4910      	ldr	r1, [pc, #64]	; (8003b60 <HAL_RCC_ClockConfig+0x244>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b24:	f000 f826 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 8003b28:	4601      	mov	r1, r0
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <HAL_RCC_ClockConfig+0x244>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	091b      	lsrs	r3, r3, #4
 8003b30:	f003 030f 	and.w	r3, r3, #15
 8003b34:	4a0c      	ldr	r2, [pc, #48]	; (8003b68 <HAL_RCC_ClockConfig+0x24c>)
 8003b36:	5cd3      	ldrb	r3, [r2, r3]
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	fa21 f303 	lsr.w	r3, r1, r3
 8003b40:	4a0a      	ldr	r2, [pc, #40]	; (8003b6c <HAL_RCC_ClockConfig+0x250>)
 8003b42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b44:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <HAL_RCC_ClockConfig+0x254>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fd fb23 	bl	8001194 <HAL_InitTick>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	73fb      	strb	r3, [r7, #15]

  return status;
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40022000 	.word	0x40022000
 8003b60:	40021000 	.word	0x40021000
 8003b64:	04c4b400 	.word	0x04c4b400
 8003b68:	080084d8 	.word	0x080084d8
 8003b6c:	20000000 	.word	0x20000000
 8003b70:	20000004 	.word	0x20000004

08003b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b089      	sub	sp, #36	; 0x24
 8003b78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b82:	4b3d      	ldr	r3, [pc, #244]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 030c 	and.w	r3, r3, #12
 8003b8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b8c:	4b3a      	ldr	r3, [pc, #232]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f003 0303 	and.w	r3, r3, #3
 8003b94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	2b0c      	cmp	r3, #12
 8003ba0:	d121      	bne.n	8003be6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d11e      	bne.n	8003be6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ba8:	4b33      	ldr	r3, [pc, #204]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x104>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d107      	bne.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bb4:	4b30      	ldr	r3, [pc, #192]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bba:	0a1b      	lsrs	r3, r3, #8
 8003bbc:	f003 030f 	and.w	r3, r3, #15
 8003bc0:	61fb      	str	r3, [r7, #28]
 8003bc2:	e005      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bc4:	4b2c      	ldr	r3, [pc, #176]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	091b      	lsrs	r3, r3, #4
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003bd0:	4a2a      	ldr	r2, [pc, #168]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10d      	bne.n	8003bfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003be4:	e00a      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d102      	bne.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bec:	4b24      	ldr	r3, [pc, #144]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	e004      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d101      	bne.n	8003bfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bf8:	4b21      	ldr	r3, [pc, #132]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003bfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	2b0c      	cmp	r3, #12
 8003c00:	d133      	bne.n	8003c6a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c02:	4b1d      	ldr	r3, [pc, #116]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d002      	beq.n	8003c18 <HAL_RCC_GetSysClockFreq+0xa4>
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d003      	beq.n	8003c1e <HAL_RCC_GetSysClockFreq+0xaa>
 8003c16:	e005      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c18:	4b19      	ldr	r3, [pc, #100]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c1a:	617b      	str	r3, [r7, #20]
      break;
 8003c1c:	e005      	b.n	8003c2a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c1e:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c20:	617b      	str	r3, [r7, #20]
      break;
 8003c22:	e002      	b.n	8003c2a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	617b      	str	r3, [r7, #20]
      break;
 8003c28:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c2a:	4b13      	ldr	r3, [pc, #76]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	091b      	lsrs	r3, r3, #4
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	3301      	adds	r3, #1
 8003c36:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c38:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	fb02 f203 	mul.w	r2, r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c50:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	0e5b      	lsrs	r3, r3, #25
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c68:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c6a:	69bb      	ldr	r3, [r7, #24]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3724      	adds	r7, #36	; 0x24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	080084f0 	.word	0x080084f0
 8003c80:	00f42400 	.word	0x00f42400

08003c84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c88:	4b03      	ldr	r3, [pc, #12]	; (8003c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	20000000 	.word	0x20000000

08003c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ca0:	f7ff fff0 	bl	8003c84 <HAL_RCC_GetHCLKFreq>
 8003ca4:	4601      	mov	r1, r0
 8003ca6:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	0a1b      	lsrs	r3, r3, #8
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	4a04      	ldr	r2, [pc, #16]	; (8003cc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cb2:	5cd3      	ldrb	r3, [r2, r3]
 8003cb4:	f003 031f 	and.w	r3, r3, #31
 8003cb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	080084e8 	.word	0x080084e8

08003cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ccc:	f7ff ffda 	bl	8003c84 <HAL_RCC_GetHCLKFreq>
 8003cd0:	4601      	mov	r1, r0
 8003cd2:	4b06      	ldr	r3, [pc, #24]	; (8003cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	0adb      	lsrs	r3, r3, #11
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	4a04      	ldr	r2, [pc, #16]	; (8003cf0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cde:	5cd3      	ldrb	r3, [r2, r3]
 8003ce0:	f003 031f 	and.w	r3, r3, #31
 8003ce4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	080084e8 	.word	0x080084e8

08003cf4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	220f      	movs	r2, #15
 8003d02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003d04:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <HAL_RCC_GetClockConfig+0x5c>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 0203 	and.w	r2, r3, #3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003d10:	4b0f      	ldr	r3, [pc, #60]	; (8003d50 <HAL_RCC_GetClockConfig+0x5c>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <HAL_RCC_GetClockConfig+0x5c>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003d28:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <HAL_RCC_GetClockConfig+0x5c>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	08db      	lsrs	r3, r3, #3
 8003d2e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003d36:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <HAL_RCC_GetClockConfig+0x60>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 020f 	and.w	r2, r3, #15
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	601a      	str	r2, [r3, #0]
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000
 8003d54:	40022000 	.word	0x40022000

08003d58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d60:	2300      	movs	r3, #0
 8003d62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d64:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d70:	f7ff f8da 	bl	8002f28 <HAL_PWREx_GetVoltageRange>
 8003d74:	6178      	str	r0, [r7, #20]
 8003d76:	e014      	b.n	8003da2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d78:	4b22      	ldr	r3, [pc, #136]	; (8003e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7c:	4a21      	ldr	r2, [pc, #132]	; (8003e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d82:	6593      	str	r3, [r2, #88]	; 0x58
 8003d84:	4b1f      	ldr	r3, [pc, #124]	; (8003e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d90:	f7ff f8ca 	bl	8002f28 <HAL_PWREx_GetVoltageRange>
 8003d94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d96:	4b1b      	ldr	r3, [pc, #108]	; (8003e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9a:	4a1a      	ldr	r2, [pc, #104]	; (8003e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da8:	d10b      	bne.n	8003dc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b80      	cmp	r3, #128	; 0x80
 8003dae:	d913      	bls.n	8003dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2ba0      	cmp	r3, #160	; 0xa0
 8003db4:	d902      	bls.n	8003dbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003db6:	2302      	movs	r3, #2
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	e00d      	b.n	8003dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	613b      	str	r3, [r7, #16]
 8003dc0:	e00a      	b.n	8003dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b7f      	cmp	r3, #127	; 0x7f
 8003dc6:	d902      	bls.n	8003dce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003dc8:	2302      	movs	r3, #2
 8003dca:	613b      	str	r3, [r7, #16]
 8003dcc:	e004      	b.n	8003dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b70      	cmp	r3, #112	; 0x70
 8003dd2:	d101      	bne.n	8003dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f023 020f 	bic.w	r2, r3, #15
 8003de0:	4909      	ldr	r1, [pc, #36]	; (8003e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003de8:	4b07      	ldr	r3, [pc, #28]	; (8003e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d001      	beq.n	8003dfa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40021000 	.word	0x40021000
 8003e08:	40022000 	.word	0x40022000

08003e0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003e16:	4b2d      	ldr	r3, [pc, #180]	; (8003ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d118      	bne.n	8003e54 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e22:	4b2a      	ldr	r3, [pc, #168]	; (8003ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d107      	bne.n	8003e3e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e2e:	4b27      	ldr	r3, [pc, #156]	; (8003ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e34:	0a1b      	lsrs	r3, r3, #8
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	e005      	b.n	8003e4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e3e:	4b23      	ldr	r3, [pc, #140]	; (8003ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e4a:	4a21      	ldr	r2, [pc, #132]	; (8003ed0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e52:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e54:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d002      	beq.n	8003e6a <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d003      	beq.n	8003e70 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003e68:	e005      	b.n	8003e76 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003e6a:	4b1a      	ldr	r3, [pc, #104]	; (8003ed4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003e6c:	613b      	str	r3, [r7, #16]
    break;
 8003e6e:	e005      	b.n	8003e7c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003e70:	4b18      	ldr	r3, [pc, #96]	; (8003ed4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003e72:	613b      	str	r3, [r7, #16]
    break;
 8003e74:	e002      	b.n	8003e7c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	613b      	str	r3, [r7, #16]
    break;
 8003e7a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e7c:	4b13      	ldr	r3, [pc, #76]	; (8003ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	3301      	adds	r3, #1
 8003e88:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e8a:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	0a1b      	lsrs	r3, r3, #8
 8003e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	fb02 f203 	mul.w	r2, r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ea2:	4b0a      	ldr	r3, [pc, #40]	; (8003ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	0e5b      	lsrs	r3, r3, #25
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	3301      	adds	r3, #1
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eba:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003ebc:	683b      	ldr	r3, [r7, #0]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	371c      	adds	r7, #28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	080084f0 	.word	0x080084f0
 8003ed4:	00f42400 	.word	0x00f42400

08003ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d03d      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ef8:	2b40      	cmp	r3, #64	; 0x40
 8003efa:	d00b      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003efc:	2b40      	cmp	r3, #64	; 0x40
 8003efe:	d804      	bhi.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00e      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003f04:	2b20      	cmp	r3, #32
 8003f06:	d015      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003f08:	e01d      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003f0a:	2b60      	cmp	r3, #96	; 0x60
 8003f0c:	d01e      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f0e:	2b80      	cmp	r3, #128	; 0x80
 8003f10:	d01c      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f12:	e018      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f14:	4b86      	ldr	r3, [pc, #536]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4a85      	ldr	r2, [pc, #532]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f20:	e015      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3304      	adds	r3, #4
 8003f26:	2100      	movs	r1, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fb5d 	bl	80045e8 <RCCEx_PLLSAI1_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f32:	e00c      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3320      	adds	r3, #32
 8003f38:	2100      	movs	r1, #0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fc44 	bl	80047c8 <RCCEx_PLLSAI2_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f44:	e003      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	74fb      	strb	r3, [r7, #19]
      break;
 8003f4a:	e000      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f4e:	7cfb      	ldrb	r3, [r7, #19]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10b      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f54:	4b76      	ldr	r3, [pc, #472]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f5a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f62:	4973      	ldr	r1, [pc, #460]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003f6a:	e001      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6c:	7cfb      	ldrb	r3, [r7, #19]
 8003f6e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d042      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f84:	d00f      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f8a:	d805      	bhi.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d011      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f94:	d017      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003f96:	e01f      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f9c:	d01f      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa2:	d01c      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fa4:	e018      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fa6:	4b62      	ldr	r3, [pc, #392]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	4a61      	ldr	r2, [pc, #388]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fb2:	e015      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fb14 	bl	80045e8 <RCCEx_PLLSAI1_Config>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fc4:	e00c      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3320      	adds	r3, #32
 8003fca:	2100      	movs	r1, #0
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fbfb 	bl	80047c8 <RCCEx_PLLSAI2_Config>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fd6:	e003      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	74fb      	strb	r3, [r7, #19]
      break;
 8003fdc:	e000      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003fde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fe0:	7cfb      	ldrb	r3, [r7, #19]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10b      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fe6:	4b52      	ldr	r3, [pc, #328]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fe8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff4:	494e      	ldr	r1, [pc, #312]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003ffc:	e001      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffe:	7cfb      	ldrb	r3, [r7, #19]
 8004000:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 809f 	beq.w	800414e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004010:	2300      	movs	r3, #0
 8004012:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004014:	4b46      	ldr	r3, [pc, #280]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004024:	2300      	movs	r3, #0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00d      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800402a:	4b41      	ldr	r3, [pc, #260]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800402c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402e:	4a40      	ldr	r2, [pc, #256]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004034:	6593      	str	r3, [r2, #88]	; 0x58
 8004036:	4b3e      	ldr	r3, [pc, #248]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403e:	60bb      	str	r3, [r7, #8]
 8004040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004042:	2301      	movs	r3, #1
 8004044:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004046:	4b3b      	ldr	r3, [pc, #236]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a3a      	ldr	r2, [pc, #232]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800404c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004050:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004052:	f7fd fe11 	bl	8001c78 <HAL_GetTick>
 8004056:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004058:	e009      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800405a:	f7fd fe0d 	bl	8001c78 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d902      	bls.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	74fb      	strb	r3, [r7, #19]
        break;
 800406c:	e005      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800406e:	4b31      	ldr	r3, [pc, #196]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0ef      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800407a:	7cfb      	ldrb	r3, [r7, #19]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d15b      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004080:	4b2b      	ldr	r3, [pc, #172]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d01f      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	429a      	cmp	r2, r3
 800409c:	d019      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800409e:	4b24      	ldr	r3, [pc, #144]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040aa:	4b21      	ldr	r3, [pc, #132]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b0:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040ba:	4b1d      	ldr	r3, [pc, #116]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c0:	4a1b      	ldr	r2, [pc, #108]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040ca:	4a19      	ldr	r2, [pc, #100]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d016      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040dc:	f7fd fdcc 	bl	8001c78 <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e2:	e00b      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e4:	f7fd fdc8 	bl	8001c78 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d902      	bls.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	74fb      	strb	r3, [r7, #19]
            break;
 80040fa:	e006      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040fc:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0ec      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800410a:	7cfb      	ldrb	r3, [r7, #19]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10c      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004110:	4b07      	ldr	r3, [pc, #28]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004116:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004120:	4903      	ldr	r1, [pc, #12]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004128:	e008      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800412a:	7cfb      	ldrb	r3, [r7, #19]
 800412c:	74bb      	strb	r3, [r7, #18]
 800412e:	e005      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004130:	40021000 	.word	0x40021000
 8004134:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004138:	7cfb      	ldrb	r3, [r7, #19]
 800413a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800413c:	7c7b      	ldrb	r3, [r7, #17]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d105      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004142:	4ba0      	ldr	r3, [pc, #640]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004146:	4a9f      	ldr	r2, [pc, #636]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800414c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800415a:	4b9a      	ldr	r3, [pc, #616]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004160:	f023 0203 	bic.w	r2, r3, #3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004168:	4996      	ldr	r1, [pc, #600]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800417c:	4b91      	ldr	r3, [pc, #580]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004182:	f023 020c 	bic.w	r2, r3, #12
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	498e      	ldr	r1, [pc, #568]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800419e:	4b89      	ldr	r3, [pc, #548]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ac:	4985      	ldr	r1, [pc, #532]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041c0:	4b80      	ldr	r3, [pc, #512]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ce:	497d      	ldr	r1, [pc, #500]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0310 	and.w	r3, r3, #16
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041e2:	4b78      	ldr	r3, [pc, #480]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f0:	4974      	ldr	r1, [pc, #464]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004204:	4b6f      	ldr	r3, [pc, #444]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004212:	496c      	ldr	r1, [pc, #432]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004226:	4b67      	ldr	r3, [pc, #412]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004234:	4963      	ldr	r1, [pc, #396]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004248:	4b5e      	ldr	r3, [pc, #376]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004256:	495b      	ldr	r1, [pc, #364]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800426a:	4b56      	ldr	r3, [pc, #344]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004270:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004278:	4952      	ldr	r1, [pc, #328]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800428c:	4b4d      	ldr	r3, [pc, #308]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004292:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429a:	494a      	ldr	r1, [pc, #296]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042ae:	4b45      	ldr	r3, [pc, #276]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042bc:	4941      	ldr	r1, [pc, #260]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042d0:	4b3c      	ldr	r3, [pc, #240]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042d6:	f023 0203 	bic.w	r2, r3, #3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042de:	4939      	ldr	r1, [pc, #228]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d028      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042f2:	4b34      	ldr	r3, [pc, #208]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004300:	4930      	ldr	r1, [pc, #192]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800430c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004310:	d106      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004312:	4b2c      	ldr	r3, [pc, #176]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	4a2b      	ldr	r2, [pc, #172]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004318:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800431c:	60d3      	str	r3, [r2, #12]
 800431e:	e011      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004324:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004328:	d10c      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3304      	adds	r3, #4
 800432e:	2101      	movs	r1, #1
 8004330:	4618      	mov	r0, r3
 8004332:	f000 f959 	bl	80045e8 <RCCEx_PLLSAI1_Config>
 8004336:	4603      	mov	r3, r0
 8004338:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800433a:	7cfb      	ldrb	r3, [r7, #19]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8004340:	7cfb      	ldrb	r3, [r7, #19]
 8004342:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d04d      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004354:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004358:	d108      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x494>
 800435a:	4b1a      	ldr	r3, [pc, #104]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800435c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004360:	4a18      	ldr	r2, [pc, #96]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004362:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004366:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800436a:	e012      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800436c:	4b15      	ldr	r3, [pc, #84]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004372:	4a14      	ldr	r2, [pc, #80]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004374:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004378:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800437c:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004382:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800438a:	490e      	ldr	r1, [pc, #56]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004396:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800439a:	d106      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800439c:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	4a08      	ldr	r2, [pc, #32]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043a6:	60d3      	str	r3, [r2, #12]
 80043a8:	e020      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043b2:	d109      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043b4:	4b03      	ldr	r3, [pc, #12]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4a02      	ldr	r2, [pc, #8]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043be:	60d3      	str	r3, [r2, #12]
 80043c0:	e014      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80043c2:	bf00      	nop
 80043c4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043d0:	d10c      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3304      	adds	r3, #4
 80043d6:	2101      	movs	r1, #1
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 f905 	bl	80045e8 <RCCEx_PLLSAI1_Config>
 80043de:	4603      	mov	r3, r0
 80043e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043e2:	7cfb      	ldrb	r3, [r7, #19]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80043e8:	7cfb      	ldrb	r3, [r7, #19]
 80043ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d028      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043f8:	4b7a      	ldr	r3, [pc, #488]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004406:	4977      	ldr	r1, [pc, #476]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004412:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004416:	d106      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004418:	4b72      	ldr	r3, [pc, #456]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	4a71      	ldr	r2, [pc, #452]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800441e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004422:	60d3      	str	r3, [r2, #12]
 8004424:	e011      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800442a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800442e:	d10c      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3304      	adds	r3, #4
 8004434:	2101      	movs	r1, #1
 8004436:	4618      	mov	r0, r3
 8004438:	f000 f8d6 	bl	80045e8 <RCCEx_PLLSAI1_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004440:	7cfb      	ldrb	r3, [r7, #19]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8004446:	7cfb      	ldrb	r3, [r7, #19]
 8004448:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d01e      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004456:	4b63      	ldr	r3, [pc, #396]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004466:	495f      	ldr	r1, [pc, #380]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004468:	4313      	orrs	r3, r2
 800446a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004474:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004478:	d10c      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3304      	adds	r3, #4
 800447e:	2102      	movs	r1, #2
 8004480:	4618      	mov	r0, r3
 8004482:	f000 f8b1 	bl	80045e8 <RCCEx_PLLSAI1_Config>
 8004486:	4603      	mov	r3, r0
 8004488:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800448a:	7cfb      	ldrb	r3, [r7, #19]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8004490:	7cfb      	ldrb	r3, [r7, #19]
 8004492:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00b      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044a0:	4b50      	ldr	r3, [pc, #320]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80044a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044a6:	f023 0204 	bic.w	r2, r3, #4
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044b0:	494c      	ldr	r1, [pc, #304]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00b      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80044c4:	4b47      	ldr	r3, [pc, #284]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80044c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044ca:	f023 0218 	bic.w	r2, r3, #24
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d4:	4943      	ldr	r1, [pc, #268]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d035      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044e8:	4b3e      	ldr	r3, [pc, #248]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a3d      	ldr	r2, [pc, #244]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80044ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f4:	f7fd fbc0 	bl	8001c78 <HAL_GetTick>
 80044f8:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044fa:	e009      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044fc:	f7fd fbbc 	bl	8001c78 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d902      	bls.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x638>
      {
        ret = HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	74fb      	strb	r3, [r7, #19]
        break;
 800450e:	e005      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x644>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004510:	4b34      	ldr	r3, [pc, #208]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1ef      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x624>
      }
    }

    if(ret == HAL_OK)
 800451c:	7cfb      	ldrb	r3, [r7, #19]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d113      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x672>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004522:	4b30      	ldr	r3, [pc, #192]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004524:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004528:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004532:	492c      	ldr	r1, [pc, #176]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3320      	adds	r3, #32
 800453e:	2102      	movs	r1, #2
 8004540:	4618      	mov	r0, r3
 8004542:	f000 f941 	bl	80047c8 <RCCEx_PLLSAI2_Config>
 8004546:	4603      	mov	r3, r0
 8004548:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800454a:	7cfb      	ldrb	r3, [r7, #19]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* set overall return value */
      status = ret;
 8004550:	7cfb      	ldrb	r3, [r7, #19]
 8004552:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d01e      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004560:	4b20      	ldr	r3, [pc, #128]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004562:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004566:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004570:	491c      	ldr	r1, [pc, #112]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004582:	d10c      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3320      	adds	r3, #32
 8004588:	2101      	movs	r1, #1
 800458a:	4618      	mov	r0, r3
 800458c:	f000 f91c 	bl	80047c8 <RCCEx_PLLSAI2_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004594:	7cfb      	ldrb	r3, [r7, #19]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      {
        /* set overall return value */
        status = ret;
 800459a:	7cfb      	ldrb	r3, [r7, #19]
 800459c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d017      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80045aa:	4b0e      	ldr	r3, [pc, #56]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80045ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ba:	490a      	ldr	r1, [pc, #40]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045cc:	d105      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x702>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045ce:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	4a04      	ldr	r2, [pc, #16]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80045d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045d8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045da:	7cbb      	ldrb	r3, [r7, #18]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40021000 	.word	0x40021000

080045e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045f6:	4b70      	ldr	r3, [pc, #448]	; (80047b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00e      	beq.n	8004620 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004602:	4b6d      	ldr	r3, [pc, #436]	; (80047b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f003 0203 	and.w	r2, r3, #3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d103      	bne.n	800461a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
       ||
 8004616:	2b00      	cmp	r3, #0
 8004618:	d13f      	bne.n	800469a <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	73fb      	strb	r3, [r7, #15]
 800461e:	e03c      	b.n	800469a <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b02      	cmp	r3, #2
 8004626:	d00c      	beq.n	8004642 <RCCEx_PLLSAI1_Config+0x5a>
 8004628:	2b03      	cmp	r3, #3
 800462a:	d013      	beq.n	8004654 <RCCEx_PLLSAI1_Config+0x6c>
 800462c:	2b01      	cmp	r3, #1
 800462e:	d120      	bne.n	8004672 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004630:	4b61      	ldr	r3, [pc, #388]	; (80047b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d11d      	bne.n	8004678 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004640:	e01a      	b.n	8004678 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004642:	4b5d      	ldr	r3, [pc, #372]	; (80047b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800464a:	2b00      	cmp	r3, #0
 800464c:	d116      	bne.n	800467c <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004652:	e013      	b.n	800467c <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004654:	4b58      	ldr	r3, [pc, #352]	; (80047b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10f      	bne.n	8004680 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004660:	4b55      	ldr	r3, [pc, #340]	; (80047b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d109      	bne.n	8004680 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004670:	e006      	b.n	8004680 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	73fb      	strb	r3, [r7, #15]
      break;
 8004676:	e004      	b.n	8004682 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004678:	bf00      	nop
 800467a:	e002      	b.n	8004682 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800467c:	bf00      	nop
 800467e:	e000      	b.n	8004682 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004680:	bf00      	nop
    }

    if(status == HAL_OK)
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d108      	bne.n	800469a <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004688:	4b4b      	ldr	r3, [pc, #300]	; (80047b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f023 0203 	bic.w	r2, r3, #3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4948      	ldr	r1, [pc, #288]	; (80047b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004696:	4313      	orrs	r3, r2
 8004698:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	2b00      	cmp	r3, #0
 800469e:	f040 8086 	bne.w	80047ae <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046a2:	4b45      	ldr	r3, [pc, #276]	; (80047b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a44      	ldr	r2, [pc, #272]	; (80047b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80046a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ae:	f7fd fae3 	bl	8001c78 <HAL_GetTick>
 80046b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046b4:	e009      	b.n	80046ca <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046b6:	f7fd fadf 	bl	8001c78 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d902      	bls.n	80046ca <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	73fb      	strb	r3, [r7, #15]
        break;
 80046c8:	e005      	b.n	80046d6 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046ca:	4b3b      	ldr	r3, [pc, #236]	; (80047b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1ef      	bne.n	80046b6 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d168      	bne.n	80047ae <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d113      	bne.n	800470a <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046e2:	4b35      	ldr	r3, [pc, #212]	; (80047b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80046e4:	691a      	ldr	r2, [r3, #16]
 80046e6:	4b35      	ldr	r3, [pc, #212]	; (80047bc <RCCEx_PLLSAI1_Config+0x1d4>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6892      	ldr	r2, [r2, #8]
 80046ee:	0211      	lsls	r1, r2, #8
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	68d2      	ldr	r2, [r2, #12]
 80046f4:	06d2      	lsls	r2, r2, #27
 80046f6:	4311      	orrs	r1, r2
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6852      	ldr	r2, [r2, #4]
 80046fc:	3a01      	subs	r2, #1
 80046fe:	0112      	lsls	r2, r2, #4
 8004700:	430a      	orrs	r2, r1
 8004702:	492d      	ldr	r1, [pc, #180]	; (80047b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004704:	4313      	orrs	r3, r2
 8004706:	610b      	str	r3, [r1, #16]
 8004708:	e02d      	b.n	8004766 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d115      	bne.n	800473c <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004710:	4b29      	ldr	r3, [pc, #164]	; (80047b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	4b2a      	ldr	r3, [pc, #168]	; (80047c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004716:	4013      	ands	r3, r2
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6892      	ldr	r2, [r2, #8]
 800471c:	0211      	lsls	r1, r2, #8
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6912      	ldr	r2, [r2, #16]
 8004722:	0852      	lsrs	r2, r2, #1
 8004724:	3a01      	subs	r2, #1
 8004726:	0552      	lsls	r2, r2, #21
 8004728:	4311      	orrs	r1, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6852      	ldr	r2, [r2, #4]
 800472e:	3a01      	subs	r2, #1
 8004730:	0112      	lsls	r2, r2, #4
 8004732:	430a      	orrs	r2, r1
 8004734:	4920      	ldr	r1, [pc, #128]	; (80047b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004736:	4313      	orrs	r3, r2
 8004738:	610b      	str	r3, [r1, #16]
 800473a:	e014      	b.n	8004766 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800473c:	4b1e      	ldr	r3, [pc, #120]	; (80047b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	4b20      	ldr	r3, [pc, #128]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004742:	4013      	ands	r3, r2
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6892      	ldr	r2, [r2, #8]
 8004748:	0211      	lsls	r1, r2, #8
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6952      	ldr	r2, [r2, #20]
 800474e:	0852      	lsrs	r2, r2, #1
 8004750:	3a01      	subs	r2, #1
 8004752:	0652      	lsls	r2, r2, #25
 8004754:	4311      	orrs	r1, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6852      	ldr	r2, [r2, #4]
 800475a:	3a01      	subs	r2, #1
 800475c:	0112      	lsls	r2, r2, #4
 800475e:	430a      	orrs	r2, r1
 8004760:	4915      	ldr	r1, [pc, #84]	; (80047b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004762:	4313      	orrs	r3, r2
 8004764:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004766:	4b14      	ldr	r3, [pc, #80]	; (80047b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a13      	ldr	r2, [pc, #76]	; (80047b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 800476c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004770:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004772:	f7fd fa81 	bl	8001c78 <HAL_GetTick>
 8004776:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004778:	e009      	b.n	800478e <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800477a:	f7fd fa7d 	bl	8001c78 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d902      	bls.n	800478e <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	73fb      	strb	r3, [r7, #15]
          break;
 800478c:	e005      	b.n	800479a <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800478e:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0ef      	beq.n	800477a <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800479a:	7bfb      	ldrb	r3, [r7, #15]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d106      	bne.n	80047ae <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047a0:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	4903      	ldr	r1, [pc, #12]	; (80047b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40021000 	.word	0x40021000
 80047bc:	07ff800f 	.word	0x07ff800f
 80047c0:	ff9f800f 	.word	0xff9f800f
 80047c4:	f9ff800f 	.word	0xf9ff800f

080047c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047d6:	4b70      	ldr	r3, [pc, #448]	; (8004998 <RCCEx_PLLSAI2_Config+0x1d0>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00e      	beq.n	8004800 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047e2:	4b6d      	ldr	r3, [pc, #436]	; (8004998 <RCCEx_PLLSAI2_Config+0x1d0>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f003 0203 	and.w	r2, r3, #3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d103      	bne.n	80047fa <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
       ||
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d13f      	bne.n	800487a <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	73fb      	strb	r3, [r7, #15]
 80047fe:	e03c      	b.n	800487a <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d00c      	beq.n	8004822 <RCCEx_PLLSAI2_Config+0x5a>
 8004808:	2b03      	cmp	r3, #3
 800480a:	d013      	beq.n	8004834 <RCCEx_PLLSAI2_Config+0x6c>
 800480c:	2b01      	cmp	r3, #1
 800480e:	d120      	bne.n	8004852 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004810:	4b61      	ldr	r3, [pc, #388]	; (8004998 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d11d      	bne.n	8004858 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004820:	e01a      	b.n	8004858 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004822:	4b5d      	ldr	r3, [pc, #372]	; (8004998 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800482a:	2b00      	cmp	r3, #0
 800482c:	d116      	bne.n	800485c <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004832:	e013      	b.n	800485c <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004834:	4b58      	ldr	r3, [pc, #352]	; (8004998 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10f      	bne.n	8004860 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004840:	4b55      	ldr	r3, [pc, #340]	; (8004998 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d109      	bne.n	8004860 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004850:	e006      	b.n	8004860 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	73fb      	strb	r3, [r7, #15]
      break;
 8004856:	e004      	b.n	8004862 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004858:	bf00      	nop
 800485a:	e002      	b.n	8004862 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800485c:	bf00      	nop
 800485e:	e000      	b.n	8004862 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004860:	bf00      	nop
    }

    if(status == HAL_OK)
 8004862:	7bfb      	ldrb	r3, [r7, #15]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d108      	bne.n	800487a <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004868:	4b4b      	ldr	r3, [pc, #300]	; (8004998 <RCCEx_PLLSAI2_Config+0x1d0>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f023 0203 	bic.w	r2, r3, #3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4948      	ldr	r1, [pc, #288]	; (8004998 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004876:	4313      	orrs	r3, r2
 8004878:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800487a:	7bfb      	ldrb	r3, [r7, #15]
 800487c:	2b00      	cmp	r3, #0
 800487e:	f040 8086 	bne.w	800498e <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004882:	4b45      	ldr	r3, [pc, #276]	; (8004998 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a44      	ldr	r2, [pc, #272]	; (8004998 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800488c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800488e:	f7fd f9f3 	bl	8001c78 <HAL_GetTick>
 8004892:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004894:	e009      	b.n	80048aa <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004896:	f7fd f9ef 	bl	8001c78 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d902      	bls.n	80048aa <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	73fb      	strb	r3, [r7, #15]
        break;
 80048a8:	e005      	b.n	80048b6 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048aa:	4b3b      	ldr	r3, [pc, #236]	; (8004998 <RCCEx_PLLSAI2_Config+0x1d0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1ef      	bne.n	8004896 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d168      	bne.n	800498e <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d113      	bne.n	80048ea <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048c2:	4b35      	ldr	r3, [pc, #212]	; (8004998 <RCCEx_PLLSAI2_Config+0x1d0>)
 80048c4:	695a      	ldr	r2, [r3, #20]
 80048c6:	4b35      	ldr	r3, [pc, #212]	; (800499c <RCCEx_PLLSAI2_Config+0x1d4>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6892      	ldr	r2, [r2, #8]
 80048ce:	0211      	lsls	r1, r2, #8
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	68d2      	ldr	r2, [r2, #12]
 80048d4:	06d2      	lsls	r2, r2, #27
 80048d6:	4311      	orrs	r1, r2
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6852      	ldr	r2, [r2, #4]
 80048dc:	3a01      	subs	r2, #1
 80048de:	0112      	lsls	r2, r2, #4
 80048e0:	430a      	orrs	r2, r1
 80048e2:	492d      	ldr	r1, [pc, #180]	; (8004998 <RCCEx_PLLSAI2_Config+0x1d0>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	614b      	str	r3, [r1, #20]
 80048e8:	e02d      	b.n	8004946 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d115      	bne.n	800491c <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048f0:	4b29      	ldr	r3, [pc, #164]	; (8004998 <RCCEx_PLLSAI2_Config+0x1d0>)
 80048f2:	695a      	ldr	r2, [r3, #20]
 80048f4:	4b2a      	ldr	r3, [pc, #168]	; (80049a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048f6:	4013      	ands	r3, r2
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6892      	ldr	r2, [r2, #8]
 80048fc:	0211      	lsls	r1, r2, #8
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6912      	ldr	r2, [r2, #16]
 8004902:	0852      	lsrs	r2, r2, #1
 8004904:	3a01      	subs	r2, #1
 8004906:	0552      	lsls	r2, r2, #21
 8004908:	4311      	orrs	r1, r2
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6852      	ldr	r2, [r2, #4]
 800490e:	3a01      	subs	r2, #1
 8004910:	0112      	lsls	r2, r2, #4
 8004912:	430a      	orrs	r2, r1
 8004914:	4920      	ldr	r1, [pc, #128]	; (8004998 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004916:	4313      	orrs	r3, r2
 8004918:	614b      	str	r3, [r1, #20]
 800491a:	e014      	b.n	8004946 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800491c:	4b1e      	ldr	r3, [pc, #120]	; (8004998 <RCCEx_PLLSAI2_Config+0x1d0>)
 800491e:	695a      	ldr	r2, [r3, #20]
 8004920:	4b20      	ldr	r3, [pc, #128]	; (80049a4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004922:	4013      	ands	r3, r2
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6892      	ldr	r2, [r2, #8]
 8004928:	0211      	lsls	r1, r2, #8
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6952      	ldr	r2, [r2, #20]
 800492e:	0852      	lsrs	r2, r2, #1
 8004930:	3a01      	subs	r2, #1
 8004932:	0652      	lsls	r2, r2, #25
 8004934:	4311      	orrs	r1, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6852      	ldr	r2, [r2, #4]
 800493a:	3a01      	subs	r2, #1
 800493c:	0112      	lsls	r2, r2, #4
 800493e:	430a      	orrs	r2, r1
 8004940:	4915      	ldr	r1, [pc, #84]	; (8004998 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004942:	4313      	orrs	r3, r2
 8004944:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004946:	4b14      	ldr	r3, [pc, #80]	; (8004998 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a13      	ldr	r2, [pc, #76]	; (8004998 <RCCEx_PLLSAI2_Config+0x1d0>)
 800494c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004950:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004952:	f7fd f991 	bl	8001c78 <HAL_GetTick>
 8004956:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004958:	e009      	b.n	800496e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800495a:	f7fd f98d 	bl	8001c78 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d902      	bls.n	800496e <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	73fb      	strb	r3, [r7, #15]
          break;
 800496c:	e005      	b.n	800497a <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800496e:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0ef      	beq.n	800495a <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800497a:	7bfb      	ldrb	r3, [r7, #15]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d106      	bne.n	800498e <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004980:	4b05      	ldr	r3, [pc, #20]	; (8004998 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004982:	695a      	ldr	r2, [r3, #20]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	4903      	ldr	r1, [pc, #12]	; (8004998 <RCCEx_PLLSAI2_Config+0x1d0>)
 800498a:	4313      	orrs	r3, r2
 800498c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800498e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40021000 	.word	0x40021000
 800499c:	07ff800f 	.word	0x07ff800f
 80049a0:	ff9f800f 	.word	0xff9f800f
 80049a4:	f9ff800f 	.word	0xf9ff800f

080049a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e095      	b.n	8004ae6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d108      	bne.n	80049d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ca:	d009      	beq.n	80049e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	61da      	str	r2, [r3, #28]
 80049d2:	e005      	b.n	80049e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7fc fb22 	bl	8001044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a20:	d902      	bls.n	8004a28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	e002      	b.n	8004a2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a36:	d007      	beq.n	8004a48 <HAL_SPI_Init+0xa0>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a40:	d002      	beq.n	8004a48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8a:	ea42 0103 	orr.w	r1, r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	0c1b      	lsrs	r3, r3, #16
 8004aa4:	f003 0204 	and.w	r2, r3, #4
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	f003 0310 	and.w	r3, r3, #16
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ac4:	ea42 0103 	orr.w	r1, r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b082      	sub	sp, #8
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e049      	b.n	8004b94 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d106      	bne.n	8004b1a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7fc fad9 	bl	80010cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	f000 f9ed 	bl	8004f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d001      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e04f      	b.n	8004c54 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a23      	ldr	r2, [pc, #140]	; (8004c60 <HAL_TIM_Base_Start_IT+0xc4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d01d      	beq.n	8004c12 <HAL_TIM_Base_Start_IT+0x76>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bde:	d018      	beq.n	8004c12 <HAL_TIM_Base_Start_IT+0x76>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a1f      	ldr	r2, [pc, #124]	; (8004c64 <HAL_TIM_Base_Start_IT+0xc8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d013      	beq.n	8004c12 <HAL_TIM_Base_Start_IT+0x76>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a1e      	ldr	r2, [pc, #120]	; (8004c68 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00e      	beq.n	8004c12 <HAL_TIM_Base_Start_IT+0x76>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1c      	ldr	r2, [pc, #112]	; (8004c6c <HAL_TIM_Base_Start_IT+0xd0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d009      	beq.n	8004c12 <HAL_TIM_Base_Start_IT+0x76>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1b      	ldr	r2, [pc, #108]	; (8004c70 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d004      	beq.n	8004c12 <HAL_TIM_Base_Start_IT+0x76>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a19      	ldr	r2, [pc, #100]	; (8004c74 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d115      	bne.n	8004c3e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	4b17      	ldr	r3, [pc, #92]	; (8004c78 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2b06      	cmp	r3, #6
 8004c22:	d015      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0xb4>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2a:	d011      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3c:	e008      	b.n	8004c50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f042 0201 	orr.w	r2, r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	e000      	b.n	8004c52 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	40012c00 	.word	0x40012c00
 8004c64:	40000400 	.word	0x40000400
 8004c68:	40000800 	.word	0x40000800
 8004c6c:	40000c00 	.word	0x40000c00
 8004c70:	40013400 	.word	0x40013400
 8004c74:	40014000 	.word	0x40014000
 8004c78:	00010007 	.word	0x00010007

08004c7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d122      	bne.n	8004cd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d11b      	bne.n	8004cd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f06f 0202 	mvn.w	r2, #2
 8004ca8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f905 	bl	8004ece <HAL_TIM_IC_CaptureCallback>
 8004cc4:	e005      	b.n	8004cd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f8f7 	bl	8004eba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f908 	bl	8004ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f003 0304 	and.w	r3, r3, #4
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d122      	bne.n	8004d2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	d11b      	bne.n	8004d2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f06f 0204 	mvn.w	r2, #4
 8004cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2202      	movs	r2, #2
 8004d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f8db 	bl	8004ece <HAL_TIM_IC_CaptureCallback>
 8004d18:	e005      	b.n	8004d26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f8cd 	bl	8004eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f8de 	bl	8004ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d122      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d11b      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f06f 0208 	mvn.w	r2, #8
 8004d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2204      	movs	r2, #4
 8004d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f8b1 	bl	8004ece <HAL_TIM_IC_CaptureCallback>
 8004d6c:	e005      	b.n	8004d7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f8a3 	bl	8004eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f8b4 	bl	8004ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f003 0310 	and.w	r3, r3, #16
 8004d8a:	2b10      	cmp	r3, #16
 8004d8c:	d122      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f003 0310 	and.w	r3, r3, #16
 8004d98:	2b10      	cmp	r3, #16
 8004d9a:	d11b      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f06f 0210 	mvn.w	r2, #16
 8004da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2208      	movs	r2, #8
 8004daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f887 	bl	8004ece <HAL_TIM_IC_CaptureCallback>
 8004dc0:	e005      	b.n	8004dce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f879 	bl	8004eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f88a 	bl	8004ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d10e      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d107      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f06f 0201 	mvn.w	r2, #1
 8004df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7fc f8e4 	bl	8000fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0a:	2b80      	cmp	r3, #128	; 0x80
 8004e0c:	d10e      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e18:	2b80      	cmp	r3, #128	; 0x80
 8004e1a:	d107      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f914 	bl	8005054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e3a:	d10e      	bne.n	8004e5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e46:	2b80      	cmp	r3, #128	; 0x80
 8004e48:	d107      	bne.n	8004e5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f907 	bl	8005068 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e64:	2b40      	cmp	r3, #64	; 0x40
 8004e66:	d10e      	bne.n	8004e86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e72:	2b40      	cmp	r3, #64	; 0x40
 8004e74:	d107      	bne.n	8004e86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f838 	bl	8004ef6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	d10e      	bne.n	8004eb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f003 0320 	and.w	r3, r3, #32
 8004e9e:	2b20      	cmp	r3, #32
 8004ea0:	d107      	bne.n	8004eb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f06f 0220 	mvn.w	r2, #32
 8004eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f8c7 	bl	8005040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
	...

08004f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a40      	ldr	r2, [pc, #256]	; (8005020 <TIM_Base_SetConfig+0x114>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d013      	beq.n	8004f4c <TIM_Base_SetConfig+0x40>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2a:	d00f      	beq.n	8004f4c <TIM_Base_SetConfig+0x40>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a3d      	ldr	r2, [pc, #244]	; (8005024 <TIM_Base_SetConfig+0x118>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00b      	beq.n	8004f4c <TIM_Base_SetConfig+0x40>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a3c      	ldr	r2, [pc, #240]	; (8005028 <TIM_Base_SetConfig+0x11c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d007      	beq.n	8004f4c <TIM_Base_SetConfig+0x40>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a3b      	ldr	r2, [pc, #236]	; (800502c <TIM_Base_SetConfig+0x120>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d003      	beq.n	8004f4c <TIM_Base_SetConfig+0x40>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a3a      	ldr	r2, [pc, #232]	; (8005030 <TIM_Base_SetConfig+0x124>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d108      	bne.n	8004f5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a2f      	ldr	r2, [pc, #188]	; (8005020 <TIM_Base_SetConfig+0x114>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d01f      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f6c:	d01b      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a2c      	ldr	r2, [pc, #176]	; (8005024 <TIM_Base_SetConfig+0x118>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d017      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a2b      	ldr	r2, [pc, #172]	; (8005028 <TIM_Base_SetConfig+0x11c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d013      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a2a      	ldr	r2, [pc, #168]	; (800502c <TIM_Base_SetConfig+0x120>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00f      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a29      	ldr	r2, [pc, #164]	; (8005030 <TIM_Base_SetConfig+0x124>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00b      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a28      	ldr	r2, [pc, #160]	; (8005034 <TIM_Base_SetConfig+0x128>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d007      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a27      	ldr	r2, [pc, #156]	; (8005038 <TIM_Base_SetConfig+0x12c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d003      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a26      	ldr	r2, [pc, #152]	; (800503c <TIM_Base_SetConfig+0x130>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d108      	bne.n	8004fb8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a10      	ldr	r2, [pc, #64]	; (8005020 <TIM_Base_SetConfig+0x114>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00f      	beq.n	8005004 <TIM_Base_SetConfig+0xf8>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a12      	ldr	r2, [pc, #72]	; (8005030 <TIM_Base_SetConfig+0x124>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00b      	beq.n	8005004 <TIM_Base_SetConfig+0xf8>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a11      	ldr	r2, [pc, #68]	; (8005034 <TIM_Base_SetConfig+0x128>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d007      	beq.n	8005004 <TIM_Base_SetConfig+0xf8>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a10      	ldr	r2, [pc, #64]	; (8005038 <TIM_Base_SetConfig+0x12c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d003      	beq.n	8005004 <TIM_Base_SetConfig+0xf8>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a0f      	ldr	r2, [pc, #60]	; (800503c <TIM_Base_SetConfig+0x130>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d103      	bne.n	800500c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	615a      	str	r2, [r3, #20]
}
 8005012:	bf00      	nop
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40012c00 	.word	0x40012c00
 8005024:	40000400 	.word	0x40000400
 8005028:	40000800 	.word	0x40000800
 800502c:	40000c00 	.word	0x40000c00
 8005030:	40013400 	.word	0x40013400
 8005034:	40014000 	.word	0x40014000
 8005038:	40014400 	.word	0x40014400
 800503c:	40014800 	.word	0x40014800

08005040 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e042      	b.n	8005114 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005094:	2b00      	cmp	r3, #0
 8005096:	d106      	bne.n	80050a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7fc f833 	bl	800110c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2224      	movs	r2, #36	; 0x24
 80050aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0201 	bic.w	r2, r2, #1
 80050bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f8c4 	bl	800524c <UART_SetConfig>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d101      	bne.n	80050ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e022      	b.n	8005114 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fb8a 	bl	80057f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689a      	ldr	r2, [r3, #8]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fc11 	bl	8005934 <UART_CheckIdleState>
 8005112:	4603      	mov	r3, r0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08a      	sub	sp, #40	; 0x28
 8005120:	af02      	add	r7, sp, #8
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	4613      	mov	r3, r2
 800512a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005132:	2b20      	cmp	r3, #32
 8005134:	f040 8084 	bne.w	8005240 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <HAL_UART_Transmit+0x28>
 800513e:	88fb      	ldrh	r3, [r7, #6]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e07c      	b.n	8005242 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <HAL_UART_Transmit+0x3a>
 8005152:	2302      	movs	r3, #2
 8005154:	e075      	b.n	8005242 <HAL_UART_Transmit+0x126>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2221      	movs	r2, #33	; 0x21
 800516a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800516e:	f7fc fd83 	bl	8001c78 <HAL_GetTick>
 8005172:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	88fa      	ldrh	r2, [r7, #6]
 8005178:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	88fa      	ldrh	r2, [r7, #6]
 8005180:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800518c:	d108      	bne.n	80051a0 <HAL_UART_Transmit+0x84>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d104      	bne.n	80051a0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005196:	2300      	movs	r3, #0
 8005198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	61bb      	str	r3, [r7, #24]
 800519e:	e003      	b.n	80051a8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80051b0:	e02d      	b.n	800520e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2200      	movs	r2, #0
 80051ba:	2180      	movs	r1, #128	; 0x80
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fc01 	bl	80059c4 <UART_WaitOnFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e03a      	b.n	8005242 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10b      	bne.n	80051ea <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	881a      	ldrh	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051de:	b292      	uxth	r2, r2
 80051e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	3302      	adds	r3, #2
 80051e6:	61bb      	str	r3, [r7, #24]
 80051e8:	e008      	b.n	80051fc <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	781a      	ldrb	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	b292      	uxth	r2, r2
 80051f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	3301      	adds	r3, #1
 80051fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005202:	b29b      	uxth	r3, r3
 8005204:	3b01      	subs	r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005214:	b29b      	uxth	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1cb      	bne.n	80051b2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2200      	movs	r2, #0
 8005222:	2140      	movs	r1, #64	; 0x40
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 fbcd 	bl	80059c4 <UART_WaitOnFlagUntilTimeout>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e006      	b.n	8005242 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2220      	movs	r2, #32
 8005238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	e000      	b.n	8005242 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005240:	2302      	movs	r3, #2
  }
}
 8005242:	4618      	mov	r0, r3
 8005244:	3720      	adds	r7, #32
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800524c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005250:	b088      	sub	sp, #32
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	4313      	orrs	r3, r2
 8005270:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	4313      	orrs	r3, r2
 800527a:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4bb1      	ldr	r3, [pc, #708]	; (8005548 <UART_SetConfig+0x2fc>)
 8005284:	4013      	ands	r3, r2
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6812      	ldr	r2, [r2, #0]
 800528a:	69f9      	ldr	r1, [r7, #28]
 800528c:	430b      	orrs	r3, r1
 800528e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4aa6      	ldr	r2, [pc, #664]	; (800554c <UART_SetConfig+0x300>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d004      	beq.n	80052c0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	69fa      	ldr	r2, [r7, #28]
 80052bc:	4313      	orrs	r3, r2
 80052be:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80052ca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6812      	ldr	r2, [r2, #0]
 80052d2:	69f9      	ldr	r1, [r7, #28]
 80052d4:	430b      	orrs	r3, r1
 80052d6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052de:	f023 010f 	bic.w	r1, r3, #15
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a97      	ldr	r2, [pc, #604]	; (8005550 <UART_SetConfig+0x304>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d121      	bne.n	800533c <UART_SetConfig+0xf0>
 80052f8:	4b96      	ldr	r3, [pc, #600]	; (8005554 <UART_SetConfig+0x308>)
 80052fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	2b03      	cmp	r3, #3
 8005304:	d816      	bhi.n	8005334 <UART_SetConfig+0xe8>
 8005306:	a201      	add	r2, pc, #4	; (adr r2, 800530c <UART_SetConfig+0xc0>)
 8005308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530c:	0800531d 	.word	0x0800531d
 8005310:	08005329 	.word	0x08005329
 8005314:	08005323 	.word	0x08005323
 8005318:	0800532f 	.word	0x0800532f
 800531c:	2301      	movs	r3, #1
 800531e:	76fb      	strb	r3, [r7, #27]
 8005320:	e0e8      	b.n	80054f4 <UART_SetConfig+0x2a8>
 8005322:	2302      	movs	r3, #2
 8005324:	76fb      	strb	r3, [r7, #27]
 8005326:	e0e5      	b.n	80054f4 <UART_SetConfig+0x2a8>
 8005328:	2304      	movs	r3, #4
 800532a:	76fb      	strb	r3, [r7, #27]
 800532c:	e0e2      	b.n	80054f4 <UART_SetConfig+0x2a8>
 800532e:	2308      	movs	r3, #8
 8005330:	76fb      	strb	r3, [r7, #27]
 8005332:	e0df      	b.n	80054f4 <UART_SetConfig+0x2a8>
 8005334:	2310      	movs	r3, #16
 8005336:	76fb      	strb	r3, [r7, #27]
 8005338:	bf00      	nop
 800533a:	e0db      	b.n	80054f4 <UART_SetConfig+0x2a8>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a85      	ldr	r2, [pc, #532]	; (8005558 <UART_SetConfig+0x30c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d134      	bne.n	80053b0 <UART_SetConfig+0x164>
 8005346:	4b83      	ldr	r3, [pc, #524]	; (8005554 <UART_SetConfig+0x308>)
 8005348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534c:	f003 030c 	and.w	r3, r3, #12
 8005350:	2b0c      	cmp	r3, #12
 8005352:	d829      	bhi.n	80053a8 <UART_SetConfig+0x15c>
 8005354:	a201      	add	r2, pc, #4	; (adr r2, 800535c <UART_SetConfig+0x110>)
 8005356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535a:	bf00      	nop
 800535c:	08005391 	.word	0x08005391
 8005360:	080053a9 	.word	0x080053a9
 8005364:	080053a9 	.word	0x080053a9
 8005368:	080053a9 	.word	0x080053a9
 800536c:	0800539d 	.word	0x0800539d
 8005370:	080053a9 	.word	0x080053a9
 8005374:	080053a9 	.word	0x080053a9
 8005378:	080053a9 	.word	0x080053a9
 800537c:	08005397 	.word	0x08005397
 8005380:	080053a9 	.word	0x080053a9
 8005384:	080053a9 	.word	0x080053a9
 8005388:	080053a9 	.word	0x080053a9
 800538c:	080053a3 	.word	0x080053a3
 8005390:	2300      	movs	r3, #0
 8005392:	76fb      	strb	r3, [r7, #27]
 8005394:	e0ae      	b.n	80054f4 <UART_SetConfig+0x2a8>
 8005396:	2302      	movs	r3, #2
 8005398:	76fb      	strb	r3, [r7, #27]
 800539a:	e0ab      	b.n	80054f4 <UART_SetConfig+0x2a8>
 800539c:	2304      	movs	r3, #4
 800539e:	76fb      	strb	r3, [r7, #27]
 80053a0:	e0a8      	b.n	80054f4 <UART_SetConfig+0x2a8>
 80053a2:	2308      	movs	r3, #8
 80053a4:	76fb      	strb	r3, [r7, #27]
 80053a6:	e0a5      	b.n	80054f4 <UART_SetConfig+0x2a8>
 80053a8:	2310      	movs	r3, #16
 80053aa:	76fb      	strb	r3, [r7, #27]
 80053ac:	bf00      	nop
 80053ae:	e0a1      	b.n	80054f4 <UART_SetConfig+0x2a8>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a69      	ldr	r2, [pc, #420]	; (800555c <UART_SetConfig+0x310>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d120      	bne.n	80053fc <UART_SetConfig+0x1b0>
 80053ba:	4b66      	ldr	r3, [pc, #408]	; (8005554 <UART_SetConfig+0x308>)
 80053bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053c4:	2b10      	cmp	r3, #16
 80053c6:	d00f      	beq.n	80053e8 <UART_SetConfig+0x19c>
 80053c8:	2b10      	cmp	r3, #16
 80053ca:	d802      	bhi.n	80053d2 <UART_SetConfig+0x186>
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d005      	beq.n	80053dc <UART_SetConfig+0x190>
 80053d0:	e010      	b.n	80053f4 <UART_SetConfig+0x1a8>
 80053d2:	2b20      	cmp	r3, #32
 80053d4:	d005      	beq.n	80053e2 <UART_SetConfig+0x196>
 80053d6:	2b30      	cmp	r3, #48	; 0x30
 80053d8:	d009      	beq.n	80053ee <UART_SetConfig+0x1a2>
 80053da:	e00b      	b.n	80053f4 <UART_SetConfig+0x1a8>
 80053dc:	2300      	movs	r3, #0
 80053de:	76fb      	strb	r3, [r7, #27]
 80053e0:	e088      	b.n	80054f4 <UART_SetConfig+0x2a8>
 80053e2:	2302      	movs	r3, #2
 80053e4:	76fb      	strb	r3, [r7, #27]
 80053e6:	e085      	b.n	80054f4 <UART_SetConfig+0x2a8>
 80053e8:	2304      	movs	r3, #4
 80053ea:	76fb      	strb	r3, [r7, #27]
 80053ec:	e082      	b.n	80054f4 <UART_SetConfig+0x2a8>
 80053ee:	2308      	movs	r3, #8
 80053f0:	76fb      	strb	r3, [r7, #27]
 80053f2:	e07f      	b.n	80054f4 <UART_SetConfig+0x2a8>
 80053f4:	2310      	movs	r3, #16
 80053f6:	76fb      	strb	r3, [r7, #27]
 80053f8:	bf00      	nop
 80053fa:	e07b      	b.n	80054f4 <UART_SetConfig+0x2a8>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a57      	ldr	r2, [pc, #348]	; (8005560 <UART_SetConfig+0x314>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d120      	bne.n	8005448 <UART_SetConfig+0x1fc>
 8005406:	4b53      	ldr	r3, [pc, #332]	; (8005554 <UART_SetConfig+0x308>)
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005410:	2b40      	cmp	r3, #64	; 0x40
 8005412:	d00f      	beq.n	8005434 <UART_SetConfig+0x1e8>
 8005414:	2b40      	cmp	r3, #64	; 0x40
 8005416:	d802      	bhi.n	800541e <UART_SetConfig+0x1d2>
 8005418:	2b00      	cmp	r3, #0
 800541a:	d005      	beq.n	8005428 <UART_SetConfig+0x1dc>
 800541c:	e010      	b.n	8005440 <UART_SetConfig+0x1f4>
 800541e:	2b80      	cmp	r3, #128	; 0x80
 8005420:	d005      	beq.n	800542e <UART_SetConfig+0x1e2>
 8005422:	2bc0      	cmp	r3, #192	; 0xc0
 8005424:	d009      	beq.n	800543a <UART_SetConfig+0x1ee>
 8005426:	e00b      	b.n	8005440 <UART_SetConfig+0x1f4>
 8005428:	2300      	movs	r3, #0
 800542a:	76fb      	strb	r3, [r7, #27]
 800542c:	e062      	b.n	80054f4 <UART_SetConfig+0x2a8>
 800542e:	2302      	movs	r3, #2
 8005430:	76fb      	strb	r3, [r7, #27]
 8005432:	e05f      	b.n	80054f4 <UART_SetConfig+0x2a8>
 8005434:	2304      	movs	r3, #4
 8005436:	76fb      	strb	r3, [r7, #27]
 8005438:	e05c      	b.n	80054f4 <UART_SetConfig+0x2a8>
 800543a:	2308      	movs	r3, #8
 800543c:	76fb      	strb	r3, [r7, #27]
 800543e:	e059      	b.n	80054f4 <UART_SetConfig+0x2a8>
 8005440:	2310      	movs	r3, #16
 8005442:	76fb      	strb	r3, [r7, #27]
 8005444:	bf00      	nop
 8005446:	e055      	b.n	80054f4 <UART_SetConfig+0x2a8>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a45      	ldr	r2, [pc, #276]	; (8005564 <UART_SetConfig+0x318>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d124      	bne.n	800549c <UART_SetConfig+0x250>
 8005452:	4b40      	ldr	r3, [pc, #256]	; (8005554 <UART_SetConfig+0x308>)
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800545c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005460:	d012      	beq.n	8005488 <UART_SetConfig+0x23c>
 8005462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005466:	d802      	bhi.n	800546e <UART_SetConfig+0x222>
 8005468:	2b00      	cmp	r3, #0
 800546a:	d007      	beq.n	800547c <UART_SetConfig+0x230>
 800546c:	e012      	b.n	8005494 <UART_SetConfig+0x248>
 800546e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005472:	d006      	beq.n	8005482 <UART_SetConfig+0x236>
 8005474:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005478:	d009      	beq.n	800548e <UART_SetConfig+0x242>
 800547a:	e00b      	b.n	8005494 <UART_SetConfig+0x248>
 800547c:	2300      	movs	r3, #0
 800547e:	76fb      	strb	r3, [r7, #27]
 8005480:	e038      	b.n	80054f4 <UART_SetConfig+0x2a8>
 8005482:	2302      	movs	r3, #2
 8005484:	76fb      	strb	r3, [r7, #27]
 8005486:	e035      	b.n	80054f4 <UART_SetConfig+0x2a8>
 8005488:	2304      	movs	r3, #4
 800548a:	76fb      	strb	r3, [r7, #27]
 800548c:	e032      	b.n	80054f4 <UART_SetConfig+0x2a8>
 800548e:	2308      	movs	r3, #8
 8005490:	76fb      	strb	r3, [r7, #27]
 8005492:	e02f      	b.n	80054f4 <UART_SetConfig+0x2a8>
 8005494:	2310      	movs	r3, #16
 8005496:	76fb      	strb	r3, [r7, #27]
 8005498:	bf00      	nop
 800549a:	e02b      	b.n	80054f4 <UART_SetConfig+0x2a8>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a2a      	ldr	r2, [pc, #168]	; (800554c <UART_SetConfig+0x300>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d124      	bne.n	80054f0 <UART_SetConfig+0x2a4>
 80054a6:	4b2b      	ldr	r3, [pc, #172]	; (8005554 <UART_SetConfig+0x308>)
 80054a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b4:	d012      	beq.n	80054dc <UART_SetConfig+0x290>
 80054b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ba:	d802      	bhi.n	80054c2 <UART_SetConfig+0x276>
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d007      	beq.n	80054d0 <UART_SetConfig+0x284>
 80054c0:	e012      	b.n	80054e8 <UART_SetConfig+0x29c>
 80054c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c6:	d006      	beq.n	80054d6 <UART_SetConfig+0x28a>
 80054c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054cc:	d009      	beq.n	80054e2 <UART_SetConfig+0x296>
 80054ce:	e00b      	b.n	80054e8 <UART_SetConfig+0x29c>
 80054d0:	2300      	movs	r3, #0
 80054d2:	76fb      	strb	r3, [r7, #27]
 80054d4:	e00e      	b.n	80054f4 <UART_SetConfig+0x2a8>
 80054d6:	2302      	movs	r3, #2
 80054d8:	76fb      	strb	r3, [r7, #27]
 80054da:	e00b      	b.n	80054f4 <UART_SetConfig+0x2a8>
 80054dc:	2304      	movs	r3, #4
 80054de:	76fb      	strb	r3, [r7, #27]
 80054e0:	e008      	b.n	80054f4 <UART_SetConfig+0x2a8>
 80054e2:	2308      	movs	r3, #8
 80054e4:	76fb      	strb	r3, [r7, #27]
 80054e6:	e005      	b.n	80054f4 <UART_SetConfig+0x2a8>
 80054e8:	2310      	movs	r3, #16
 80054ea:	76fb      	strb	r3, [r7, #27]
 80054ec:	bf00      	nop
 80054ee:	e001      	b.n	80054f4 <UART_SetConfig+0x2a8>
 80054f0:	2310      	movs	r3, #16
 80054f2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a14      	ldr	r2, [pc, #80]	; (800554c <UART_SetConfig+0x300>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	f040 80a1 	bne.w	8005642 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005500:	7efb      	ldrb	r3, [r7, #27]
 8005502:	2b08      	cmp	r3, #8
 8005504:	d836      	bhi.n	8005574 <UART_SetConfig+0x328>
 8005506:	a201      	add	r2, pc, #4	; (adr r2, 800550c <UART_SetConfig+0x2c0>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	08005531 	.word	0x08005531
 8005510:	08005575 	.word	0x08005575
 8005514:	08005539 	.word	0x08005539
 8005518:	08005575 	.word	0x08005575
 800551c:	0800553f 	.word	0x0800553f
 8005520:	08005575 	.word	0x08005575
 8005524:	08005575 	.word	0x08005575
 8005528:	08005575 	.word	0x08005575
 800552c:	0800556d 	.word	0x0800556d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005530:	f7fe fbb4 	bl	8003c9c <HAL_RCC_GetPCLK1Freq>
 8005534:	6178      	str	r0, [r7, #20]
        break;
 8005536:	e022      	b.n	800557e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005538:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <UART_SetConfig+0x31c>)
 800553a:	617b      	str	r3, [r7, #20]
        break;
 800553c:	e01f      	b.n	800557e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800553e:	f7fe fb19 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 8005542:	6178      	str	r0, [r7, #20]
        break;
 8005544:	e01b      	b.n	800557e <UART_SetConfig+0x332>
 8005546:	bf00      	nop
 8005548:	cfff69f3 	.word	0xcfff69f3
 800554c:	40008000 	.word	0x40008000
 8005550:	40013800 	.word	0x40013800
 8005554:	40021000 	.word	0x40021000
 8005558:	40004400 	.word	0x40004400
 800555c:	40004800 	.word	0x40004800
 8005560:	40004c00 	.word	0x40004c00
 8005564:	40005000 	.word	0x40005000
 8005568:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800556c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005570:	617b      	str	r3, [r7, #20]
        break;
 8005572:	e004      	b.n	800557e <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	76bb      	strb	r3, [r7, #26]
        break;
 800557c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 811d 	beq.w	80057c0 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	4a97      	ldr	r2, [pc, #604]	; (80057e8 <UART_SetConfig+0x59c>)
 800558c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005590:	461a      	mov	r2, r3
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	fbb3 f3f2 	udiv	r3, r3, r2
 8005598:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	4613      	mov	r3, r2
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	4413      	add	r3, r2
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d305      	bcc.n	80055b6 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d902      	bls.n	80055bc <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	76bb      	strb	r3, [r7, #26]
 80055ba:	e101      	b.n	80057c0 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	4618      	mov	r0, r3
 80055c0:	f04f 0100 	mov.w	r1, #0
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	4a87      	ldr	r2, [pc, #540]	; (80057e8 <UART_SetConfig+0x59c>)
 80055ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	f04f 0400 	mov.w	r4, #0
 80055d4:	461a      	mov	r2, r3
 80055d6:	4623      	mov	r3, r4
 80055d8:	f7fa fe12 	bl	8000200 <__aeabi_uldivmod>
 80055dc:	4603      	mov	r3, r0
 80055de:	460c      	mov	r4, r1
 80055e0:	4619      	mov	r1, r3
 80055e2:	4622      	mov	r2, r4
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	f04f 0400 	mov.w	r4, #0
 80055ec:	0214      	lsls	r4, r2, #8
 80055ee:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80055f2:	020b      	lsls	r3, r1, #8
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	6852      	ldr	r2, [r2, #4]
 80055f8:	0852      	lsrs	r2, r2, #1
 80055fa:	4611      	mov	r1, r2
 80055fc:	f04f 0200 	mov.w	r2, #0
 8005600:	eb13 0b01 	adds.w	fp, r3, r1
 8005604:	eb44 0c02 	adc.w	ip, r4, r2
 8005608:	4658      	mov	r0, fp
 800560a:	4661      	mov	r1, ip
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f04f 0400 	mov.w	r4, #0
 8005614:	461a      	mov	r2, r3
 8005616:	4623      	mov	r3, r4
 8005618:	f7fa fdf2 	bl	8000200 <__aeabi_uldivmod>
 800561c:	4603      	mov	r3, r0
 800561e:	460c      	mov	r4, r1
 8005620:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005628:	d308      	bcc.n	800563c <UART_SetConfig+0x3f0>
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005630:	d204      	bcs.n	800563c <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	60da      	str	r2, [r3, #12]
 800563a:	e0c1      	b.n	80057c0 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	76bb      	strb	r3, [r7, #26]
 8005640:	e0be      	b.n	80057c0 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800564a:	d164      	bne.n	8005716 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 800564c:	7efb      	ldrb	r3, [r7, #27]
 800564e:	2b08      	cmp	r3, #8
 8005650:	d827      	bhi.n	80056a2 <UART_SetConfig+0x456>
 8005652:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <UART_SetConfig+0x40c>)
 8005654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005658:	0800567d 	.word	0x0800567d
 800565c:	08005685 	.word	0x08005685
 8005660:	0800568d 	.word	0x0800568d
 8005664:	080056a3 	.word	0x080056a3
 8005668:	08005693 	.word	0x08005693
 800566c:	080056a3 	.word	0x080056a3
 8005670:	080056a3 	.word	0x080056a3
 8005674:	080056a3 	.word	0x080056a3
 8005678:	0800569b 	.word	0x0800569b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800567c:	f7fe fb0e 	bl	8003c9c <HAL_RCC_GetPCLK1Freq>
 8005680:	6178      	str	r0, [r7, #20]
        break;
 8005682:	e013      	b.n	80056ac <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005684:	f7fe fb20 	bl	8003cc8 <HAL_RCC_GetPCLK2Freq>
 8005688:	6178      	str	r0, [r7, #20]
        break;
 800568a:	e00f      	b.n	80056ac <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800568c:	4b57      	ldr	r3, [pc, #348]	; (80057ec <UART_SetConfig+0x5a0>)
 800568e:	617b      	str	r3, [r7, #20]
        break;
 8005690:	e00c      	b.n	80056ac <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005692:	f7fe fa6f 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 8005696:	6178      	str	r0, [r7, #20]
        break;
 8005698:	e008      	b.n	80056ac <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800569a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800569e:	617b      	str	r3, [r7, #20]
        break;
 80056a0:	e004      	b.n	80056ac <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	76bb      	strb	r3, [r7, #26]
        break;
 80056aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 8086 	beq.w	80057c0 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	4a4b      	ldr	r2, [pc, #300]	; (80057e8 <UART_SetConfig+0x59c>)
 80056ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056be:	461a      	mov	r2, r3
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80056c6:	005a      	lsls	r2, r3, #1
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	085b      	lsrs	r3, r3, #1
 80056ce:	441a      	add	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d8:	b29b      	uxth	r3, r3
 80056da:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	2b0f      	cmp	r3, #15
 80056e0:	d916      	bls.n	8005710 <UART_SetConfig+0x4c4>
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e8:	d212      	bcs.n	8005710 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	f023 030f 	bic.w	r3, r3, #15
 80056f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	085b      	lsrs	r3, r3, #1
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	b29a      	uxth	r2, r3
 8005700:	89fb      	ldrh	r3, [r7, #14]
 8005702:	4313      	orrs	r3, r2
 8005704:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	89fa      	ldrh	r2, [r7, #14]
 800570c:	60da      	str	r2, [r3, #12]
 800570e:	e057      	b.n	80057c0 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	76bb      	strb	r3, [r7, #26]
 8005714:	e054      	b.n	80057c0 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005716:	7efb      	ldrb	r3, [r7, #27]
 8005718:	2b08      	cmp	r3, #8
 800571a:	d828      	bhi.n	800576e <UART_SetConfig+0x522>
 800571c:	a201      	add	r2, pc, #4	; (adr r2, 8005724 <UART_SetConfig+0x4d8>)
 800571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005722:	bf00      	nop
 8005724:	08005749 	.word	0x08005749
 8005728:	08005751 	.word	0x08005751
 800572c:	08005759 	.word	0x08005759
 8005730:	0800576f 	.word	0x0800576f
 8005734:	0800575f 	.word	0x0800575f
 8005738:	0800576f 	.word	0x0800576f
 800573c:	0800576f 	.word	0x0800576f
 8005740:	0800576f 	.word	0x0800576f
 8005744:	08005767 	.word	0x08005767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005748:	f7fe faa8 	bl	8003c9c <HAL_RCC_GetPCLK1Freq>
 800574c:	6178      	str	r0, [r7, #20]
        break;
 800574e:	e013      	b.n	8005778 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005750:	f7fe faba 	bl	8003cc8 <HAL_RCC_GetPCLK2Freq>
 8005754:	6178      	str	r0, [r7, #20]
        break;
 8005756:	e00f      	b.n	8005778 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005758:	4b24      	ldr	r3, [pc, #144]	; (80057ec <UART_SetConfig+0x5a0>)
 800575a:	617b      	str	r3, [r7, #20]
        break;
 800575c:	e00c      	b.n	8005778 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800575e:	f7fe fa09 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 8005762:	6178      	str	r0, [r7, #20]
        break;
 8005764:	e008      	b.n	8005778 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800576a:	617b      	str	r3, [r7, #20]
        break;
 800576c:	e004      	b.n	8005778 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	76bb      	strb	r3, [r7, #26]
        break;
 8005776:	bf00      	nop
    }

    if (pclk != 0U)
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d020      	beq.n	80057c0 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	4a19      	ldr	r2, [pc, #100]	; (80057e8 <UART_SetConfig+0x59c>)
 8005784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005788:	461a      	mov	r2, r3
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	085b      	lsrs	r3, r3, #1
 8005796:	441a      	add	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	2b0f      	cmp	r3, #15
 80057a8:	d908      	bls.n	80057bc <UART_SetConfig+0x570>
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b0:	d204      	bcs.n	80057bc <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	60da      	str	r2, [r3, #12]
 80057ba:	e001      	b.n	80057c0 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80057dc:	7ebb      	ldrb	r3, [r7, #26]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80057e8:	08008520 	.word	0x08008520
 80057ec:	00f42400 	.word	0x00f42400

080057f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00a      	beq.n	800581a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00a      	beq.n	800583c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00a      	beq.n	800585e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	f003 0308 	and.w	r3, r3, #8
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005884:	f003 0310 	and.w	r3, r3, #16
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a6:	f003 0320 	and.w	r3, r3, #32
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d01a      	beq.n	8005906 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ee:	d10a      	bne.n	8005906 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	605a      	str	r2, [r3, #4]
  }
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af02      	add	r7, sp, #8
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005944:	f7fc f998 	bl	8001c78 <HAL_GetTick>
 8005948:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0308 	and.w	r3, r3, #8
 8005954:	2b08      	cmp	r3, #8
 8005956:	d10e      	bne.n	8005976 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005958:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f82c 	bl	80059c4 <UART_WaitOnFlagUntilTimeout>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e022      	b.n	80059bc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b04      	cmp	r3, #4
 8005982:	d10e      	bne.n	80059a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005984:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f816 	bl	80059c4 <UART_WaitOnFlagUntilTimeout>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e00c      	b.n	80059bc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2220      	movs	r2, #32
 80059ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	603b      	str	r3, [r7, #0]
 80059d0:	4613      	mov	r3, r2
 80059d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d4:	e062      	b.n	8005a9c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059dc:	d05e      	beq.n	8005a9c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059de:	f7fc f94b 	bl	8001c78 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d302      	bcc.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d11d      	bne.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a02:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689a      	ldr	r2, [r3, #8]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0201 	bic.w	r2, r2, #1
 8005a12:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e045      	b.n	8005abc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0304 	and.w	r3, r3, #4
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d02e      	beq.n	8005a9c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a4c:	d126      	bne.n	8005a9c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a56:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a66:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0201 	bic.w	r2, r2, #1
 8005a76:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e00f      	b.n	8005abc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	69da      	ldr	r2, [r3, #28]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	bf0c      	ite	eq
 8005aac:	2301      	moveq	r3, #1
 8005aae:	2300      	movne	r3, #0
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	79fb      	ldrb	r3, [r7, #7]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d08d      	beq.n	80059d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d101      	bne.n	8005ada <HAL_UARTEx_DisableFifoMode+0x16>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	e027      	b.n	8005b2a <HAL_UARTEx_DisableFifoMode+0x66>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2224      	movs	r2, #36	; 0x24
 8005ae6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 0201 	bic.w	r2, r2, #1
 8005b00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b084      	sub	sp, #16
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
 8005b3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d101      	bne.n	8005b4e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	e02d      	b.n	8005baa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2224      	movs	r2, #36	; 0x24
 8005b5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0201 	bic.w	r2, r2, #1
 8005b74:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f850 	bl	8005c30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b084      	sub	sp, #16
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d101      	bne.n	8005bca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e02d      	b.n	8005c26 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2224      	movs	r2, #36	; 0x24
 8005bd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0201 	bic.w	r2, r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f812 	bl	8005c30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
	...

08005c30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b089      	sub	sp, #36	; 0x24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005c38:	4a2f      	ldr	r2, [pc, #188]	; (8005cf8 <UARTEx_SetNbDataToProcess+0xc8>)
 8005c3a:	f107 0314 	add.w	r3, r7, #20
 8005c3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c42:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005c46:	4a2d      	ldr	r2, [pc, #180]	; (8005cfc <UARTEx_SetNbDataToProcess+0xcc>)
 8005c48:	f107 030c 	add.w	r3, r7, #12
 8005c4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c50:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d108      	bne.n	8005c6e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c6c:	e03d      	b.n	8005cea <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c6e:	2308      	movs	r3, #8
 8005c70:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c72:	2308      	movs	r3, #8
 8005c74:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	0e5b      	lsrs	r3, r3, #25
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	0f5b      	lsrs	r3, r3, #29
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	f003 0307 	and.w	r3, r3, #7
 8005c94:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005c96:	7fbb      	ldrb	r3, [r7, #30]
 8005c98:	7f3a      	ldrb	r2, [r7, #28]
 8005c9a:	f107 0120 	add.w	r1, r7, #32
 8005c9e:	440a      	add	r2, r1
 8005ca0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005ca4:	fb02 f303 	mul.w	r3, r2, r3
 8005ca8:	7f3a      	ldrb	r2, [r7, #28]
 8005caa:	f107 0120 	add.w	r1, r7, #32
 8005cae:	440a      	add	r2, r1
 8005cb0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005cb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005cc0:	7ffb      	ldrb	r3, [r7, #31]
 8005cc2:	7f7a      	ldrb	r2, [r7, #29]
 8005cc4:	f107 0120 	add.w	r1, r7, #32
 8005cc8:	440a      	add	r2, r1
 8005cca:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005cce:	fb02 f303 	mul.w	r3, r2, r3
 8005cd2:	7f7a      	ldrb	r2, [r7, #29]
 8005cd4:	f107 0120 	add.w	r1, r7, #32
 8005cd8:	440a      	add	r2, r1
 8005cda:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005cde:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005cea:	bf00      	nop
 8005cec:	3724      	adds	r7, #36	; 0x24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	080084c0 	.word	0x080084c0
 8005cfc:	080084c8 	.word	0x080084c8

08005d00 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	4603      	mov	r3, r0
 8005d08:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d12:	2b84      	cmp	r3, #132	; 0x84
 8005d14:	d005      	beq.n	8005d22 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005d16:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	3303      	adds	r3, #3
 8005d20:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005d22:	68fb      	ldr	r3, [r7, #12]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d36:	f3ef 8305 	mrs	r3, IPSR
 8005d3a:	607b      	str	r3, [r7, #4]
  return(result);
 8005d3c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	bf14      	ite	ne
 8005d42:	2301      	movne	r3, #1
 8005d44:	2300      	moveq	r3, #0
 8005d46:	b2db      	uxtb	r3, r3
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005d58:	f001 f8fc 	bl	8006f54 <vTaskStartScheduler>
  
  return osOK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005d62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d64:	b089      	sub	sp, #36	; 0x24
 8005d66:	af04      	add	r7, sp, #16
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d020      	beq.n	8005db6 <osThreadCreate+0x54>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d01c      	beq.n	8005db6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685c      	ldr	r4, [r3, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681d      	ldr	r5, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691e      	ldr	r6, [r3, #16]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff ffb6 	bl	8005d00 <makeFreeRtosPriority>
 8005d94:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d9e:	9202      	str	r2, [sp, #8]
 8005da0:	9301      	str	r3, [sp, #4]
 8005da2:	9100      	str	r1, [sp, #0]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	4632      	mov	r2, r6
 8005da8:	4629      	mov	r1, r5
 8005daa:	4620      	mov	r0, r4
 8005dac:	f000 ff0f 	bl	8006bce <xTaskCreateStatic>
 8005db0:	4603      	mov	r3, r0
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	e01c      	b.n	8005df0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685c      	ldr	r4, [r3, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dc2:	b29e      	uxth	r6, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff ff98 	bl	8005d00 <makeFreeRtosPriority>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	f107 030c 	add.w	r3, r7, #12
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	9200      	str	r2, [sp, #0]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	4632      	mov	r2, r6
 8005dde:	4629      	mov	r1, r5
 8005de0:	4620      	mov	r0, r4
 8005de2:	f000 ff4e 	bl	8006c82 <xTaskCreate>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d001      	beq.n	8005df0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005dec:	2300      	movs	r3, #0
 8005dee:	e000      	b.n	8005df2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005df0:	68fb      	ldr	r3, [r7, #12]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005dfa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b084      	sub	sp, #16
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <osDelay+0x16>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	e000      	b.n	8005e12 <osDelay+0x18>
 8005e10:	2301      	movs	r3, #1
 8005e12:	4618      	mov	r0, r3
 8005e14:	f001 f86a 	bl	8006eec <vTaskDelay>
  
  return osOK;
 8005e18:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b086      	sub	sp, #24
 8005e26:	af02      	add	r7, sp, #8
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d010      	beq.n	8005e56 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d10b      	bne.n	8005e52 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	2303      	movs	r3, #3
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	4613      	mov	r3, r2
 8005e44:	2200      	movs	r2, #0
 8005e46:	2100      	movs	r1, #0
 8005e48:	2001      	movs	r0, #1
 8005e4a:	f000 f9bd 	bl	80061c8 <xQueueGenericCreateStatic>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	e016      	b.n	8005e80 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005e52:	2300      	movs	r3, #0
 8005e54:	e014      	b.n	8005e80 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d110      	bne.n	8005e7e <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8005e5c:	2203      	movs	r2, #3
 8005e5e:	2100      	movs	r1, #0
 8005e60:	2001      	movs	r0, #1
 8005e62:	f000 fa24 	bl	80062ae <xQueueGenericCreate>
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <osSemaphoreCreate+0x58>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	2200      	movs	r2, #0
 8005e72:	2100      	movs	r1, #0
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 fa79 	bl	800636c <xQueueGenericSend>
      return sema;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	e000      	b.n	8005e80 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005e7e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005e92:	2300      	movs	r3, #0
 8005e94:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005e9c:	2380      	movs	r3, #128	; 0x80
 8005e9e:	e03a      	b.n	8005f16 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eaa:	d103      	bne.n	8005eb4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005eac:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	e009      	b.n	8005ec8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d006      	beq.n	8005ec8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <osSemaphoreWait+0x40>
      ticks = 1;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005ec8:	f7ff ff32 	bl	8005d30 <inHandlerMode>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d017      	beq.n	8005f02 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005ed2:	f107 0308 	add.w	r3, r7, #8
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	2100      	movs	r1, #0
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fcd2 	bl	8006884 <xQueueReceiveFromISR>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d001      	beq.n	8005eea <osSemaphoreWait+0x62>
      return osErrorOS;
 8005ee6:	23ff      	movs	r3, #255	; 0xff
 8005ee8:	e015      	b.n	8005f16 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d011      	beq.n	8005f14 <osSemaphoreWait+0x8c>
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <osSemaphoreWait+0x98>)
 8005ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	e008      	b.n	8005f14 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005f02:	68f9      	ldr	r1, [r7, #12]
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 fbb5 	bl	8006674 <xQueueSemaphoreTake>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d001      	beq.n	8005f14 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005f10:	23ff      	movs	r3, #255	; 0xff
 8005f12:	e000      	b.n	8005f16 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	e000ed04 	.word	0xe000ed04

08005f24 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005f30:	2300      	movs	r3, #0
 8005f32:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005f34:	f7ff fefc 	bl	8005d30 <inHandlerMode>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d016      	beq.n	8005f6c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005f3e:	f107 0308 	add.w	r3, r7, #8
 8005f42:	4619      	mov	r1, r3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fb0b 	bl	8006560 <xQueueGiveFromISR>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d001      	beq.n	8005f54 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005f50:	23ff      	movs	r3, #255	; 0xff
 8005f52:	e017      	b.n	8005f84 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d013      	beq.n	8005f82 <osSemaphoreRelease+0x5e>
 8005f5a:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <osSemaphoreRelease+0x68>)
 8005f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f60:	601a      	str	r2, [r3, #0]
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	e00a      	b.n	8005f82 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	2200      	movs	r2, #0
 8005f70:	2100      	movs	r1, #0
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f9fa 	bl	800636c <xQueueGenericSend>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d001      	beq.n	8005f82 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005f7e:	23ff      	movs	r3, #255	; 0xff
 8005f80:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005f82:	68fb      	ldr	r3, [r7, #12]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	e000ed04 	.word	0xe000ed04

08005f90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f103 0208 	add.w	r2, r3, #8
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f103 0208 	add.w	r2, r3, #8
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f103 0208 	add.w	r2, r3, #8
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fea:	b480      	push	{r7}
 8005fec:	b085      	sub	sp, #20
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	689a      	ldr	r2, [r3, #8]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	601a      	str	r2, [r3, #0]
}
 8006026:	bf00      	nop
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006032:	b480      	push	{r7}
 8006034:	b085      	sub	sp, #20
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006048:	d103      	bne.n	8006052 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	e00c      	b.n	800606c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3308      	adds	r3, #8
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	e002      	b.n	8006060 <vListInsert+0x2e>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	429a      	cmp	r2, r3
 800606a:	d2f6      	bcs.n	800605a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	601a      	str	r2, [r3, #0]
}
 8006098:	bf00      	nop
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	6892      	ldr	r2, [r2, #8]
 80060ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	6852      	ldr	r2, [r2, #4]
 80060c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d103      	bne.n	80060d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	1e5a      	subs	r2, r3, #1
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d109      	bne.n	8006120 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	60bb      	str	r3, [r7, #8]
 800611e:	e7fe      	b.n	800611e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006120:	f001 fe64 	bl	8007dec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612c:	68f9      	ldr	r1, [r7, #12]
 800612e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006130:	fb01 f303 	mul.w	r3, r1, r3
 8006134:	441a      	add	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006150:	3b01      	subs	r3, #1
 8006152:	68f9      	ldr	r1, [r7, #12]
 8006154:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006156:	fb01 f303 	mul.w	r3, r1, r3
 800615a:	441a      	add	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	22ff      	movs	r2, #255	; 0xff
 8006164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	22ff      	movs	r2, #255	; 0xff
 800616c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d114      	bne.n	80061a0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d01a      	beq.n	80061b4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	3310      	adds	r3, #16
 8006182:	4618      	mov	r0, r3
 8006184:	f001 f924 	bl	80073d0 <xTaskRemoveFromEventList>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d012      	beq.n	80061b4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800618e:	4b0d      	ldr	r3, [pc, #52]	; (80061c4 <xQueueGenericReset+0xcc>)
 8006190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	e009      	b.n	80061b4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	3310      	adds	r3, #16
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff fef3 	bl	8005f90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	3324      	adds	r3, #36	; 0x24
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff feee 	bl	8005f90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80061b4:	f001 fe48 	bl	8007e48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80061b8:	2301      	movs	r3, #1
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	e000ed04 	.word	0xe000ed04

080061c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08e      	sub	sp, #56	; 0x38
 80061cc:	af02      	add	r7, sp, #8
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d109      	bne.n	80061f0 <xQueueGenericCreateStatic+0x28>
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ee:	e7fe      	b.n	80061ee <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d109      	bne.n	800620a <xQueueGenericCreateStatic+0x42>
 80061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	627b      	str	r3, [r7, #36]	; 0x24
 8006208:	e7fe      	b.n	8006208 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <xQueueGenericCreateStatic+0x4e>
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <xQueueGenericCreateStatic+0x52>
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <xQueueGenericCreateStatic+0x54>
 800621a:	2300      	movs	r3, #0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d109      	bne.n	8006234 <xQueueGenericCreateStatic+0x6c>
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	623b      	str	r3, [r7, #32]
 8006232:	e7fe      	b.n	8006232 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d102      	bne.n	8006240 <xQueueGenericCreateStatic+0x78>
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d101      	bne.n	8006244 <xQueueGenericCreateStatic+0x7c>
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <xQueueGenericCreateStatic+0x7e>
 8006244:	2300      	movs	r3, #0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d109      	bne.n	800625e <xQueueGenericCreateStatic+0x96>
 800624a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	61fb      	str	r3, [r7, #28]
 800625c:	e7fe      	b.n	800625c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800625e:	2348      	movs	r3, #72	; 0x48
 8006260:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b48      	cmp	r3, #72	; 0x48
 8006266:	d009      	beq.n	800627c <xQueueGenericCreateStatic+0xb4>
 8006268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	61bb      	str	r3, [r7, #24]
 800627a:	e7fe      	b.n	800627a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800627c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00d      	beq.n	80062a4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006290:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	4613      	mov	r3, r2
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	68b9      	ldr	r1, [r7, #8]
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 f844 	bl	800632c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80062a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3730      	adds	r7, #48	; 0x30
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b08a      	sub	sp, #40	; 0x28
 80062b2:	af02      	add	r7, sp, #8
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	4613      	mov	r3, r2
 80062ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d109      	bne.n	80062d6 <xQueueGenericCreate+0x28>
 80062c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	613b      	str	r3, [r7, #16]
 80062d4:	e7fe      	b.n	80062d4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d102      	bne.n	80062e2 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80062dc:	2300      	movs	r3, #0
 80062de:	61fb      	str	r3, [r7, #28]
 80062e0:	e004      	b.n	80062ec <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	fb02 f303 	mul.w	r3, r2, r3
 80062ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	3348      	adds	r3, #72	; 0x48
 80062f0:	4618      	mov	r0, r3
 80062f2:	f001 fe95 	bl	8008020 <pvPortMalloc>
 80062f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d011      	beq.n	8006322 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	3348      	adds	r3, #72	; 0x48
 8006306:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006310:	79fa      	ldrb	r2, [r7, #7]
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	4613      	mov	r3, r2
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	68b9      	ldr	r1, [r7, #8]
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 f805 	bl	800632c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006322:	69bb      	ldr	r3, [r7, #24]
	}
 8006324:	4618      	mov	r0, r3
 8006326:	3720      	adds	r7, #32
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
 8006338:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d103      	bne.n	8006348 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	e002      	b.n	800634e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800635a:	2101      	movs	r1, #1
 800635c:	69b8      	ldr	r0, [r7, #24]
 800635e:	f7ff fecb 	bl	80060f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006362:	bf00      	nop
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
	...

0800636c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b08e      	sub	sp, #56	; 0x38
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800637a:	2300      	movs	r3, #0
 800637c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	2b00      	cmp	r3, #0
 8006386:	d109      	bne.n	800639c <xQueueGenericSend+0x30>
 8006388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	62bb      	str	r3, [r7, #40]	; 0x28
 800639a:	e7fe      	b.n	800639a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d103      	bne.n	80063aa <xQueueGenericSend+0x3e>
 80063a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <xQueueGenericSend+0x42>
 80063aa:	2301      	movs	r3, #1
 80063ac:	e000      	b.n	80063b0 <xQueueGenericSend+0x44>
 80063ae:	2300      	movs	r3, #0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d109      	bne.n	80063c8 <xQueueGenericSend+0x5c>
 80063b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	627b      	str	r3, [r7, #36]	; 0x24
 80063c6:	e7fe      	b.n	80063c6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d103      	bne.n	80063d6 <xQueueGenericSend+0x6a>
 80063ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d101      	bne.n	80063da <xQueueGenericSend+0x6e>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <xQueueGenericSend+0x70>
 80063da:	2300      	movs	r3, #0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d109      	bne.n	80063f4 <xQueueGenericSend+0x88>
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	623b      	str	r3, [r7, #32]
 80063f2:	e7fe      	b.n	80063f2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063f4:	f001 f9a2 	bl	800773c <xTaskGetSchedulerState>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d102      	bne.n	8006404 <xQueueGenericSend+0x98>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <xQueueGenericSend+0x9c>
 8006404:	2301      	movs	r3, #1
 8006406:	e000      	b.n	800640a <xQueueGenericSend+0x9e>
 8006408:	2300      	movs	r3, #0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d109      	bne.n	8006422 <xQueueGenericSend+0xb6>
 800640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	61fb      	str	r3, [r7, #28]
 8006420:	e7fe      	b.n	8006420 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006422:	f001 fce3 	bl	8007dec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642e:	429a      	cmp	r2, r3
 8006430:	d302      	bcc.n	8006438 <xQueueGenericSend+0xcc>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b02      	cmp	r3, #2
 8006436:	d129      	bne.n	800648c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	68b9      	ldr	r1, [r7, #8]
 800643c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800643e:	f000 fab6 	bl	80069ae <prvCopyDataToQueue>
 8006442:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	2b00      	cmp	r3, #0
 800644a:	d010      	beq.n	800646e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	3324      	adds	r3, #36	; 0x24
 8006450:	4618      	mov	r0, r3
 8006452:	f000 ffbd 	bl	80073d0 <xTaskRemoveFromEventList>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d013      	beq.n	8006484 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800645c:	4b3f      	ldr	r3, [pc, #252]	; (800655c <xQueueGenericSend+0x1f0>)
 800645e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	e00a      	b.n	8006484 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800646e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006470:	2b00      	cmp	r3, #0
 8006472:	d007      	beq.n	8006484 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006474:	4b39      	ldr	r3, [pc, #228]	; (800655c <xQueueGenericSend+0x1f0>)
 8006476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006484:	f001 fce0 	bl	8007e48 <vPortExitCritical>
				return pdPASS;
 8006488:	2301      	movs	r3, #1
 800648a:	e063      	b.n	8006554 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d103      	bne.n	800649a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006492:	f001 fcd9 	bl	8007e48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006496:	2300      	movs	r3, #0
 8006498:	e05c      	b.n	8006554 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800649a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649c:	2b00      	cmp	r3, #0
 800649e:	d106      	bne.n	80064ae <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064a0:	f107 0314 	add.w	r3, r7, #20
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 fff5 	bl	8007494 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064aa:	2301      	movs	r3, #1
 80064ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064ae:	f001 fccb 	bl	8007e48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064b2:	f000 fdad 	bl	8007010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064b6:	f001 fc99 	bl	8007dec <vPortEnterCritical>
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064c0:	b25b      	sxtb	r3, r3
 80064c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c6:	d103      	bne.n	80064d0 <xQueueGenericSend+0x164>
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064d6:	b25b      	sxtb	r3, r3
 80064d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064dc:	d103      	bne.n	80064e6 <xQueueGenericSend+0x17a>
 80064de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064e6:	f001 fcaf 	bl	8007e48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064ea:	1d3a      	adds	r2, r7, #4
 80064ec:	f107 0314 	add.w	r3, r7, #20
 80064f0:	4611      	mov	r1, r2
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 ffe4 	bl	80074c0 <xTaskCheckForTimeOut>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d124      	bne.n	8006548 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006500:	f000 fb4d 	bl	8006b9e <prvIsQueueFull>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d018      	beq.n	800653c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	3310      	adds	r3, #16
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	4611      	mov	r1, r2
 8006512:	4618      	mov	r0, r3
 8006514:	f000 ff38 	bl	8007388 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800651a:	f000 fad8 	bl	8006ace <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800651e:	f000 fd85 	bl	800702c <xTaskResumeAll>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	f47f af7c 	bne.w	8006422 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800652a:	4b0c      	ldr	r3, [pc, #48]	; (800655c <xQueueGenericSend+0x1f0>)
 800652c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	e772      	b.n	8006422 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800653c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800653e:	f000 fac6 	bl	8006ace <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006542:	f000 fd73 	bl	800702c <xTaskResumeAll>
 8006546:	e76c      	b.n	8006422 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800654a:	f000 fac0 	bl	8006ace <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800654e:	f000 fd6d 	bl	800702c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006552:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006554:	4618      	mov	r0, r3
 8006556:	3738      	adds	r7, #56	; 0x38
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	e000ed04 	.word	0xe000ed04

08006560 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08e      	sub	sp, #56	; 0x38
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006570:	2b00      	cmp	r3, #0
 8006572:	d109      	bne.n	8006588 <xQueueGiveFromISR+0x28>
 8006574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	623b      	str	r3, [r7, #32]
 8006586:	e7fe      	b.n	8006586 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	2b00      	cmp	r3, #0
 800658e:	d009      	beq.n	80065a4 <xQueueGiveFromISR+0x44>
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	61fb      	str	r3, [r7, #28]
 80065a2:	e7fe      	b.n	80065a2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80065a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d103      	bne.n	80065b4 <xQueueGiveFromISR+0x54>
 80065ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <xQueueGiveFromISR+0x58>
 80065b4:	2301      	movs	r3, #1
 80065b6:	e000      	b.n	80065ba <xQueueGiveFromISR+0x5a>
 80065b8:	2300      	movs	r3, #0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d109      	bne.n	80065d2 <xQueueGiveFromISR+0x72>
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	61bb      	str	r3, [r7, #24]
 80065d0:	e7fe      	b.n	80065d0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065d2:	f001 fce7 	bl	8007fa4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80065d6:	f3ef 8211 	mrs	r2, BASEPRI
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	617a      	str	r2, [r7, #20]
 80065ec:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065fe:	429a      	cmp	r2, r3
 8006600:	d22b      	bcs.n	800665a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006604:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800660c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006612:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006614:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661c:	d112      	bne.n	8006644 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006622:	2b00      	cmp	r3, #0
 8006624:	d016      	beq.n	8006654 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	3324      	adds	r3, #36	; 0x24
 800662a:	4618      	mov	r0, r3
 800662c:	f000 fed0 	bl	80073d0 <xTaskRemoveFromEventList>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00e      	beq.n	8006654 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00b      	beq.n	8006654 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2201      	movs	r2, #1
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	e007      	b.n	8006654 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006648:	3301      	adds	r3, #1
 800664a:	b2db      	uxtb	r3, r3
 800664c:	b25a      	sxtb	r2, r3
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006654:	2301      	movs	r3, #1
 8006656:	637b      	str	r3, [r7, #52]	; 0x34
 8006658:	e001      	b.n	800665e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800665a:	2300      	movs	r3, #0
 800665c:	637b      	str	r3, [r7, #52]	; 0x34
 800665e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006660:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800666a:	4618      	mov	r0, r3
 800666c:	3738      	adds	r7, #56	; 0x38
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
	...

08006674 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b08e      	sub	sp, #56	; 0x38
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800667e:	2300      	movs	r3, #0
 8006680:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006686:	2300      	movs	r3, #0
 8006688:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	2b00      	cmp	r3, #0
 800668e:	d109      	bne.n	80066a4 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8006690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	623b      	str	r3, [r7, #32]
 80066a2:	e7fe      	b.n	80066a2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80066a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d009      	beq.n	80066c0 <xQueueSemaphoreTake+0x4c>
 80066ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	61fb      	str	r3, [r7, #28]
 80066be:	e7fe      	b.n	80066be <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066c0:	f001 f83c 	bl	800773c <xTaskGetSchedulerState>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d102      	bne.n	80066d0 <xQueueSemaphoreTake+0x5c>
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <xQueueSemaphoreTake+0x60>
 80066d0:	2301      	movs	r3, #1
 80066d2:	e000      	b.n	80066d6 <xQueueSemaphoreTake+0x62>
 80066d4:	2300      	movs	r3, #0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d109      	bne.n	80066ee <xQueueSemaphoreTake+0x7a>
 80066da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	61bb      	str	r3, [r7, #24]
 80066ec:	e7fe      	b.n	80066ec <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066ee:	f001 fb7d 	bl	8007dec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80066f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80066f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d024      	beq.n	8006748 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80066fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006700:	1e5a      	subs	r2, r3, #1
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d104      	bne.n	8006718 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800670e:	f001 f9cf 	bl	8007ab0 <pvTaskIncrementMutexHeldCount>
 8006712:	4602      	mov	r2, r0
 8006714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006716:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00f      	beq.n	8006740 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006722:	3310      	adds	r3, #16
 8006724:	4618      	mov	r0, r3
 8006726:	f000 fe53 	bl	80073d0 <xTaskRemoveFromEventList>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d007      	beq.n	8006740 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006730:	4b53      	ldr	r3, [pc, #332]	; (8006880 <xQueueSemaphoreTake+0x20c>)
 8006732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006736:	601a      	str	r2, [r3, #0]
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006740:	f001 fb82 	bl	8007e48 <vPortExitCritical>
				return pdPASS;
 8006744:	2301      	movs	r3, #1
 8006746:	e096      	b.n	8006876 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d110      	bne.n	8006770 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	2b00      	cmp	r3, #0
 8006752:	d009      	beq.n	8006768 <xQueueSemaphoreTake+0xf4>
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	617b      	str	r3, [r7, #20]
 8006766:	e7fe      	b.n	8006766 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006768:	f001 fb6e 	bl	8007e48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800676c:	2300      	movs	r3, #0
 800676e:	e082      	b.n	8006876 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006772:	2b00      	cmp	r3, #0
 8006774:	d106      	bne.n	8006784 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006776:	f107 030c 	add.w	r3, r7, #12
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fe8a 	bl	8007494 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006780:	2301      	movs	r3, #1
 8006782:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006784:	f001 fb60 	bl	8007e48 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006788:	f000 fc42 	bl	8007010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800678c:	f001 fb2e 	bl	8007dec <vPortEnterCritical>
 8006790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006792:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006796:	b25b      	sxtb	r3, r3
 8006798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679c:	d103      	bne.n	80067a6 <xQueueSemaphoreTake+0x132>
 800679e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067ac:	b25b      	sxtb	r3, r3
 80067ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b2:	d103      	bne.n	80067bc <xQueueSemaphoreTake+0x148>
 80067b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067bc:	f001 fb44 	bl	8007e48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067c0:	463a      	mov	r2, r7
 80067c2:	f107 030c 	add.w	r3, r7, #12
 80067c6:	4611      	mov	r1, r2
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 fe79 	bl	80074c0 <xTaskCheckForTimeOut>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d132      	bne.n	800683a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067d6:	f000 f9cc 	bl	8006b72 <prvIsQueueEmpty>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d026      	beq.n	800682e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d109      	bne.n	80067fc <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80067e8:	f001 fb00 	bl	8007dec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80067ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 ffc1 	bl	8007778 <xTaskPriorityInherit>
 80067f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80067f8:	f001 fb26 	bl	8007e48 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fe:	3324      	adds	r3, #36	; 0x24
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	4611      	mov	r1, r2
 8006804:	4618      	mov	r0, r3
 8006806:	f000 fdbf 	bl	8007388 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800680a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800680c:	f000 f95f 	bl	8006ace <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006810:	f000 fc0c 	bl	800702c <xTaskResumeAll>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	f47f af69 	bne.w	80066ee <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800681c:	4b18      	ldr	r3, [pc, #96]	; (8006880 <xQueueSemaphoreTake+0x20c>)
 800681e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	e75f      	b.n	80066ee <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800682e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006830:	f000 f94d 	bl	8006ace <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006834:	f000 fbfa 	bl	800702c <xTaskResumeAll>
 8006838:	e759      	b.n	80066ee <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800683a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800683c:	f000 f947 	bl	8006ace <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006840:	f000 fbf4 	bl	800702c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006844:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006846:	f000 f994 	bl	8006b72 <prvIsQueueEmpty>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	f43f af4e 	beq.w	80066ee <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00d      	beq.n	8006874 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006858:	f001 fac8 	bl	8007dec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800685c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800685e:	f000 f88e 	bl	800697e <prvGetDisinheritPriorityAfterTimeout>
 8006862:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800686a:	4618      	mov	r0, r3
 800686c:	f001 f888 	bl	8007980 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006870:	f001 faea 	bl	8007e48 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006874:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006876:	4618      	mov	r0, r3
 8006878:	3738      	adds	r7, #56	; 0x38
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	e000ed04 	.word	0xe000ed04

08006884 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b08e      	sub	sp, #56	; 0x38
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006896:	2b00      	cmp	r3, #0
 8006898:	d109      	bne.n	80068ae <xQueueReceiveFromISR+0x2a>
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	623b      	str	r3, [r7, #32]
 80068ac:	e7fe      	b.n	80068ac <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d103      	bne.n	80068bc <xQueueReceiveFromISR+0x38>
 80068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <xQueueReceiveFromISR+0x3c>
 80068bc:	2301      	movs	r3, #1
 80068be:	e000      	b.n	80068c2 <xQueueReceiveFromISR+0x3e>
 80068c0:	2300      	movs	r3, #0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d109      	bne.n	80068da <xQueueReceiveFromISR+0x56>
 80068c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ca:	f383 8811 	msr	BASEPRI, r3
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	61fb      	str	r3, [r7, #28]
 80068d8:	e7fe      	b.n	80068d8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068da:	f001 fb63 	bl	8007fa4 <vPortValidateInterruptPriority>
	__asm volatile
 80068de:	f3ef 8211 	mrs	r2, BASEPRI
 80068e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	61ba      	str	r2, [r7, #24]
 80068f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80068f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	2b00      	cmp	r3, #0
 8006904:	d02f      	beq.n	8006966 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800690c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006910:	68b9      	ldr	r1, [r7, #8]
 8006912:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006914:	f000 f8b5 	bl	8006a82 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691a:	1e5a      	subs	r2, r3, #1
 800691c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006920:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006928:	d112      	bne.n	8006950 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d016      	beq.n	8006960 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006934:	3310      	adds	r3, #16
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fd4a 	bl	80073d0 <xTaskRemoveFromEventList>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00e      	beq.n	8006960 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00b      	beq.n	8006960 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	e007      	b.n	8006960 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006954:	3301      	adds	r3, #1
 8006956:	b2db      	uxtb	r3, r3
 8006958:	b25a      	sxtb	r2, r3
 800695a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006960:	2301      	movs	r3, #1
 8006962:	637b      	str	r3, [r7, #52]	; 0x34
 8006964:	e001      	b.n	800696a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8006966:	2300      	movs	r3, #0
 8006968:	637b      	str	r3, [r7, #52]	; 0x34
 800696a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006976:	4618      	mov	r0, r3
 8006978:	3738      	adds	r7, #56	; 0x38
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800697e:	b480      	push	{r7}
 8006980:	b085      	sub	sp, #20
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698a:	2b00      	cmp	r3, #0
 800698c:	d006      	beq.n	800699c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f1c3 0307 	rsb	r3, r3, #7
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	e001      	b.n	80069a0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800699c:	2300      	movs	r3, #0
 800699e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80069a0:	68fb      	ldr	r3, [r7, #12]
	}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b086      	sub	sp, #24
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	60f8      	str	r0, [r7, #12]
 80069b6:	60b9      	str	r1, [r7, #8]
 80069b8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80069ba:	2300      	movs	r3, #0
 80069bc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10d      	bne.n	80069e8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d14d      	bne.n	8006a70 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 ff4d 	bl	8007878 <xTaskPriorityDisinherit>
 80069de:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	609a      	str	r2, [r3, #8]
 80069e6:	e043      	b.n	8006a70 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d119      	bne.n	8006a22 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6858      	ldr	r0, [r3, #4]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f6:	461a      	mov	r2, r3
 80069f8:	68b9      	ldr	r1, [r7, #8]
 80069fa:	f001 fd0b 	bl	8008414 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a06:	441a      	add	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d32b      	bcc.n	8006a70 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	605a      	str	r2, [r3, #4]
 8006a20:	e026      	b.n	8006a70 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	68d8      	ldr	r0, [r3, #12]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	68b9      	ldr	r1, [r7, #8]
 8006a2e:	f001 fcf1 	bl	8008414 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3a:	425b      	negs	r3, r3
 8006a3c:	441a      	add	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	68da      	ldr	r2, [r3, #12]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d207      	bcs.n	8006a5e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	689a      	ldr	r2, [r3, #8]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a56:	425b      	negs	r3, r3
 8006a58:	441a      	add	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d105      	bne.n	8006a70 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d002      	beq.n	8006a70 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006a78:	697b      	ldr	r3, [r7, #20]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b082      	sub	sp, #8
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d018      	beq.n	8006ac6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68da      	ldr	r2, [r3, #12]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9c:	441a      	add	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68da      	ldr	r2, [r3, #12]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d303      	bcc.n	8006ab6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68d9      	ldr	r1, [r3, #12]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	461a      	mov	r2, r3
 8006ac0:	6838      	ldr	r0, [r7, #0]
 8006ac2:	f001 fca7 	bl	8008414 <memcpy>
	}
}
 8006ac6:	bf00      	nop
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b084      	sub	sp, #16
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006ad6:	f001 f989 	bl	8007dec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ae0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ae2:	e011      	b.n	8006b08 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d012      	beq.n	8006b12 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	3324      	adds	r3, #36	; 0x24
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 fc6d 	bl	80073d0 <xTaskRemoveFromEventList>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006afc:	f000 fd40 	bl	8007580 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	3b01      	subs	r3, #1
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	dce9      	bgt.n	8006ae4 <prvUnlockQueue+0x16>
 8006b10:	e000      	b.n	8006b14 <prvUnlockQueue+0x46>
					break;
 8006b12:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	22ff      	movs	r2, #255	; 0xff
 8006b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006b1c:	f001 f994 	bl	8007e48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006b20:	f001 f964 	bl	8007dec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b2a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b2c:	e011      	b.n	8006b52 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d012      	beq.n	8006b5c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	3310      	adds	r3, #16
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 fc48 	bl	80073d0 <xTaskRemoveFromEventList>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006b46:	f000 fd1b 	bl	8007580 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006b4a:	7bbb      	ldrb	r3, [r7, #14]
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	dce9      	bgt.n	8006b2e <prvUnlockQueue+0x60>
 8006b5a:	e000      	b.n	8006b5e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006b5c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	22ff      	movs	r2, #255	; 0xff
 8006b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006b66:	f001 f96f 	bl	8007e48 <vPortExitCritical>
}
 8006b6a:	bf00      	nop
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b084      	sub	sp, #16
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b7a:	f001 f937 	bl	8007dec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d102      	bne.n	8006b8c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006b86:	2301      	movs	r3, #1
 8006b88:	60fb      	str	r3, [r7, #12]
 8006b8a:	e001      	b.n	8006b90 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b90:	f001 f95a 	bl	8007e48 <vPortExitCritical>

	return xReturn;
 8006b94:	68fb      	ldr	r3, [r7, #12]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ba6:	f001 f921 	bl	8007dec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d102      	bne.n	8006bbc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	60fb      	str	r3, [r7, #12]
 8006bba:	e001      	b.n	8006bc0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bc0:	f001 f942 	bl	8007e48 <vPortExitCritical>

	return xReturn;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b08e      	sub	sp, #56	; 0x38
 8006bd2:	af04      	add	r7, sp, #16
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	607a      	str	r2, [r7, #4]
 8006bda:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d109      	bne.n	8006bf6 <xTaskCreateStatic+0x28>
	__asm volatile
 8006be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	623b      	str	r3, [r7, #32]
 8006bf4:	e7fe      	b.n	8006bf4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d109      	bne.n	8006c10 <xTaskCreateStatic+0x42>
 8006bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	61fb      	str	r3, [r7, #28]
 8006c0e:	e7fe      	b.n	8006c0e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c10:	2354      	movs	r3, #84	; 0x54
 8006c12:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	2b54      	cmp	r3, #84	; 0x54
 8006c18:	d009      	beq.n	8006c2e <xTaskCreateStatic+0x60>
 8006c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	61bb      	str	r3, [r7, #24]
 8006c2c:	e7fe      	b.n	8006c2c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d01e      	beq.n	8006c74 <xTaskCreateStatic+0xa6>
 8006c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d01b      	beq.n	8006c74 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	2202      	movs	r2, #2
 8006c4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c4e:	2300      	movs	r3, #0
 8006c50:	9303      	str	r3, [sp, #12]
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	9302      	str	r3, [sp, #8]
 8006c56:	f107 0314 	add.w	r3, r7, #20
 8006c5a:	9301      	str	r3, [sp, #4]
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	68b9      	ldr	r1, [r7, #8]
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 f850 	bl	8006d0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c6e:	f000 f8d3 	bl	8006e18 <prvAddNewTaskToReadyList>
 8006c72:	e001      	b.n	8006c78 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006c74:	2300      	movs	r3, #0
 8006c76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c78:	697b      	ldr	r3, [r7, #20]
	}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3728      	adds	r7, #40	; 0x28
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b08c      	sub	sp, #48	; 0x30
 8006c86:	af04      	add	r7, sp, #16
 8006c88:	60f8      	str	r0, [r7, #12]
 8006c8a:	60b9      	str	r1, [r7, #8]
 8006c8c:	603b      	str	r3, [r7, #0]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c92:	88fb      	ldrh	r3, [r7, #6]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4618      	mov	r0, r3
 8006c98:	f001 f9c2 	bl	8008020 <pvPortMalloc>
 8006c9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00e      	beq.n	8006cc2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ca4:	2054      	movs	r0, #84	; 0x54
 8006ca6:	f001 f9bb 	bl	8008020 <pvPortMalloc>
 8006caa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	631a      	str	r2, [r3, #48]	; 0x30
 8006cb8:	e005      	b.n	8006cc6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006cba:	6978      	ldr	r0, [r7, #20]
 8006cbc:	f001 fa72 	bl	80081a4 <vPortFree>
 8006cc0:	e001      	b.n	8006cc6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d017      	beq.n	8006cfc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cd4:	88fa      	ldrh	r2, [r7, #6]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	9303      	str	r3, [sp, #12]
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	9302      	str	r3, [sp, #8]
 8006cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce0:	9301      	str	r3, [sp, #4]
 8006ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	68b9      	ldr	r1, [r7, #8]
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 f80e 	bl	8006d0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cf0:	69f8      	ldr	r0, [r7, #28]
 8006cf2:	f000 f891 	bl	8006e18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	61bb      	str	r3, [r7, #24]
 8006cfa:	e002      	b.n	8006d02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8006d00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d02:	69bb      	ldr	r3, [r7, #24]
	}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3720      	adds	r7, #32
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b088      	sub	sp, #32
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d24:	3b01      	subs	r3, #1
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	f023 0307 	bic.w	r3, r3, #7
 8006d32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d009      	beq.n	8006d52 <prvInitialiseNewTask+0x46>
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	617b      	str	r3, [r7, #20]
 8006d50:	e7fe      	b.n	8006d50 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d01f      	beq.n	8006d98 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d58:	2300      	movs	r3, #0
 8006d5a:	61fb      	str	r3, [r7, #28]
 8006d5c:	e012      	b.n	8006d84 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	4413      	add	r3, r2
 8006d64:	7819      	ldrb	r1, [r3, #0]
 8006d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	3334      	adds	r3, #52	; 0x34
 8006d6e:	460a      	mov	r2, r1
 8006d70:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	4413      	add	r3, r2
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d006      	beq.n	8006d8c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	3301      	adds	r3, #1
 8006d82:	61fb      	str	r3, [r7, #28]
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	2b0f      	cmp	r3, #15
 8006d88:	d9e9      	bls.n	8006d5e <prvInitialiseNewTask+0x52>
 8006d8a:	e000      	b.n	8006d8e <prvInitialiseNewTask+0x82>
			{
				break;
 8006d8c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d96:	e003      	b.n	8006da0 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da2:	2b06      	cmp	r3, #6
 8006da4:	d901      	bls.n	8006daa <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006da6:	2306      	movs	r3, #6
 8006da8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006db4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db8:	2200      	movs	r2, #0
 8006dba:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7ff f905 	bl	8005fd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc8:	3318      	adds	r3, #24
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff f900 	bl	8005fd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd8:	f1c3 0207 	rsb	r2, r3, #7
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006de4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	2200      	movs	r2, #0
 8006dea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	68f9      	ldr	r1, [r7, #12]
 8006df8:	69b8      	ldr	r0, [r7, #24]
 8006dfa:	f000 fed3 	bl	8007ba4 <pxPortInitialiseStack>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e02:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d002      	beq.n	8006e10 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e10:	bf00      	nop
 8006e12:	3720      	adds	r7, #32
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e20:	f000 ffe4 	bl	8007dec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e24:	4b2a      	ldr	r3, [pc, #168]	; (8006ed0 <prvAddNewTaskToReadyList+0xb8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	4a29      	ldr	r2, [pc, #164]	; (8006ed0 <prvAddNewTaskToReadyList+0xb8>)
 8006e2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e2e:	4b29      	ldr	r3, [pc, #164]	; (8006ed4 <prvAddNewTaskToReadyList+0xbc>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d109      	bne.n	8006e4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e36:	4a27      	ldr	r2, [pc, #156]	; (8006ed4 <prvAddNewTaskToReadyList+0xbc>)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e3c:	4b24      	ldr	r3, [pc, #144]	; (8006ed0 <prvAddNewTaskToReadyList+0xb8>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d110      	bne.n	8006e66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e44:	f000 fbc0 	bl	80075c8 <prvInitialiseTaskLists>
 8006e48:	e00d      	b.n	8006e66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e4a:	4b23      	ldr	r3, [pc, #140]	; (8006ed8 <prvAddNewTaskToReadyList+0xc0>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d109      	bne.n	8006e66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e52:	4b20      	ldr	r3, [pc, #128]	; (8006ed4 <prvAddNewTaskToReadyList+0xbc>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d802      	bhi.n	8006e66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e60:	4a1c      	ldr	r2, [pc, #112]	; (8006ed4 <prvAddNewTaskToReadyList+0xbc>)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e66:	4b1d      	ldr	r3, [pc, #116]	; (8006edc <prvAddNewTaskToReadyList+0xc4>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	4a1b      	ldr	r2, [pc, #108]	; (8006edc <prvAddNewTaskToReadyList+0xc4>)
 8006e6e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e74:	2201      	movs	r2, #1
 8006e76:	409a      	lsls	r2, r3
 8006e78:	4b19      	ldr	r3, [pc, #100]	; (8006ee0 <prvAddNewTaskToReadyList+0xc8>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	4a18      	ldr	r2, [pc, #96]	; (8006ee0 <prvAddNewTaskToReadyList+0xc8>)
 8006e80:	6013      	str	r3, [r2, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e86:	4613      	mov	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4a15      	ldr	r2, [pc, #84]	; (8006ee4 <prvAddNewTaskToReadyList+0xcc>)
 8006e90:	441a      	add	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	3304      	adds	r3, #4
 8006e96:	4619      	mov	r1, r3
 8006e98:	4610      	mov	r0, r2
 8006e9a:	f7ff f8a6 	bl	8005fea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e9e:	f000 ffd3 	bl	8007e48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ea2:	4b0d      	ldr	r3, [pc, #52]	; (8006ed8 <prvAddNewTaskToReadyList+0xc0>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00e      	beq.n	8006ec8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006eaa:	4b0a      	ldr	r3, [pc, #40]	; (8006ed4 <prvAddNewTaskToReadyList+0xbc>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d207      	bcs.n	8006ec8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006eb8:	4b0b      	ldr	r3, [pc, #44]	; (8006ee8 <prvAddNewTaskToReadyList+0xd0>)
 8006eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ec8:	bf00      	nop
 8006eca:	3708      	adds	r7, #8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	20000388 	.word	0x20000388
 8006ed4:	20000288 	.word	0x20000288
 8006ed8:	20000394 	.word	0x20000394
 8006edc:	200003a4 	.word	0x200003a4
 8006ee0:	20000390 	.word	0x20000390
 8006ee4:	2000028c 	.word	0x2000028c
 8006ee8:	e000ed04 	.word	0xe000ed04

08006eec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d016      	beq.n	8006f2c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006efe:	4b13      	ldr	r3, [pc, #76]	; (8006f4c <vTaskDelay+0x60>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d009      	beq.n	8006f1a <vTaskDelay+0x2e>
 8006f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0a:	f383 8811 	msr	BASEPRI, r3
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f3bf 8f4f 	dsb	sy
 8006f16:	60bb      	str	r3, [r7, #8]
 8006f18:	e7fe      	b.n	8006f18 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006f1a:	f000 f879 	bl	8007010 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f1e:	2100      	movs	r1, #0
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fdd9 	bl	8007ad8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f26:	f000 f881 	bl	800702c <xTaskResumeAll>
 8006f2a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d107      	bne.n	8006f42 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006f32:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <vTaskDelay+0x64>)
 8006f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f38:	601a      	str	r2, [r3, #0]
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f42:	bf00      	nop
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	200003b0 	.word	0x200003b0
 8006f50:	e000ed04 	.word	0xe000ed04

08006f54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b08a      	sub	sp, #40	; 0x28
 8006f58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f62:	463a      	mov	r2, r7
 8006f64:	1d39      	adds	r1, r7, #4
 8006f66:	f107 0308 	add.w	r3, r7, #8
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7f9 fac8 	bl	8000500 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	9202      	str	r2, [sp, #8]
 8006f78:	9301      	str	r3, [sp, #4]
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	460a      	mov	r2, r1
 8006f82:	491d      	ldr	r1, [pc, #116]	; (8006ff8 <vTaskStartScheduler+0xa4>)
 8006f84:	481d      	ldr	r0, [pc, #116]	; (8006ffc <vTaskStartScheduler+0xa8>)
 8006f86:	f7ff fe22 	bl	8006bce <xTaskCreateStatic>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	4b1c      	ldr	r3, [pc, #112]	; (8007000 <vTaskStartScheduler+0xac>)
 8006f8e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f90:	4b1b      	ldr	r3, [pc, #108]	; (8007000 <vTaskStartScheduler+0xac>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	e001      	b.n	8006fa2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d115      	bne.n	8006fd4 <vTaskStartScheduler+0x80>
 8006fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fac:	f383 8811 	msr	BASEPRI, r3
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006fba:	4b12      	ldr	r3, [pc, #72]	; (8007004 <vTaskStartScheduler+0xb0>)
 8006fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8006fc0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006fc2:	4b11      	ldr	r3, [pc, #68]	; (8007008 <vTaskStartScheduler+0xb4>)
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006fc8:	4b10      	ldr	r3, [pc, #64]	; (800700c <vTaskStartScheduler+0xb8>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006fce:	f000 fe6f 	bl	8007cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006fd2:	e00d      	b.n	8006ff0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fda:	d109      	bne.n	8006ff0 <vTaskStartScheduler+0x9c>
 8006fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	e7fe      	b.n	8006fee <vTaskStartScheduler+0x9a>
}
 8006ff0:	bf00      	nop
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	080084d0 	.word	0x080084d0
 8006ffc:	08007599 	.word	0x08007599
 8007000:	200003ac 	.word	0x200003ac
 8007004:	200003a8 	.word	0x200003a8
 8007008:	20000394 	.word	0x20000394
 800700c:	2000038c 	.word	0x2000038c

08007010 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007010:	b480      	push	{r7}
 8007012:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007014:	4b04      	ldr	r3, [pc, #16]	; (8007028 <vTaskSuspendAll+0x18>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	3301      	adds	r3, #1
 800701a:	4a03      	ldr	r2, [pc, #12]	; (8007028 <vTaskSuspendAll+0x18>)
 800701c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800701e:	bf00      	nop
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	200003b0 	.word	0x200003b0

0800702c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007032:	2300      	movs	r3, #0
 8007034:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007036:	2300      	movs	r3, #0
 8007038:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800703a:	4b41      	ldr	r3, [pc, #260]	; (8007140 <xTaskResumeAll+0x114>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d109      	bne.n	8007056 <xTaskResumeAll+0x2a>
 8007042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007046:	f383 8811 	msr	BASEPRI, r3
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	603b      	str	r3, [r7, #0]
 8007054:	e7fe      	b.n	8007054 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007056:	f000 fec9 	bl	8007dec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800705a:	4b39      	ldr	r3, [pc, #228]	; (8007140 <xTaskResumeAll+0x114>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	3b01      	subs	r3, #1
 8007060:	4a37      	ldr	r2, [pc, #220]	; (8007140 <xTaskResumeAll+0x114>)
 8007062:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007064:	4b36      	ldr	r3, [pc, #216]	; (8007140 <xTaskResumeAll+0x114>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d161      	bne.n	8007130 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800706c:	4b35      	ldr	r3, [pc, #212]	; (8007144 <xTaskResumeAll+0x118>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d05d      	beq.n	8007130 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007074:	e02e      	b.n	80070d4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007076:	4b34      	ldr	r3, [pc, #208]	; (8007148 <xTaskResumeAll+0x11c>)
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3318      	adds	r3, #24
 8007082:	4618      	mov	r0, r3
 8007084:	f7ff f80e 	bl	80060a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	3304      	adds	r3, #4
 800708c:	4618      	mov	r0, r3
 800708e:	f7ff f809 	bl	80060a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007096:	2201      	movs	r2, #1
 8007098:	409a      	lsls	r2, r3
 800709a:	4b2c      	ldr	r3, [pc, #176]	; (800714c <xTaskResumeAll+0x120>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4313      	orrs	r3, r2
 80070a0:	4a2a      	ldr	r2, [pc, #168]	; (800714c <xTaskResumeAll+0x120>)
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a8:	4613      	mov	r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4a27      	ldr	r2, [pc, #156]	; (8007150 <xTaskResumeAll+0x124>)
 80070b2:	441a      	add	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	3304      	adds	r3, #4
 80070b8:	4619      	mov	r1, r3
 80070ba:	4610      	mov	r0, r2
 80070bc:	f7fe ff95 	bl	8005fea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c4:	4b23      	ldr	r3, [pc, #140]	; (8007154 <xTaskResumeAll+0x128>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d302      	bcc.n	80070d4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80070ce:	4b22      	ldr	r3, [pc, #136]	; (8007158 <xTaskResumeAll+0x12c>)
 80070d0:	2201      	movs	r2, #1
 80070d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070d4:	4b1c      	ldr	r3, [pc, #112]	; (8007148 <xTaskResumeAll+0x11c>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1cc      	bne.n	8007076 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80070e2:	f000 fb0b 	bl	80076fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80070e6:	4b1d      	ldr	r3, [pc, #116]	; (800715c <xTaskResumeAll+0x130>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d010      	beq.n	8007114 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80070f2:	f000 f837 	bl	8007164 <xTaskIncrementTick>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80070fc:	4b16      	ldr	r3, [pc, #88]	; (8007158 <xTaskResumeAll+0x12c>)
 80070fe:	2201      	movs	r2, #1
 8007100:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	3b01      	subs	r3, #1
 8007106:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1f1      	bne.n	80070f2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800710e:	4b13      	ldr	r3, [pc, #76]	; (800715c <xTaskResumeAll+0x130>)
 8007110:	2200      	movs	r2, #0
 8007112:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007114:	4b10      	ldr	r3, [pc, #64]	; (8007158 <xTaskResumeAll+0x12c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d009      	beq.n	8007130 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800711c:	2301      	movs	r3, #1
 800711e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007120:	4b0f      	ldr	r3, [pc, #60]	; (8007160 <xTaskResumeAll+0x134>)
 8007122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007130:	f000 fe8a 	bl	8007e48 <vPortExitCritical>

	return xAlreadyYielded;
 8007134:	68bb      	ldr	r3, [r7, #8]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	200003b0 	.word	0x200003b0
 8007144:	20000388 	.word	0x20000388
 8007148:	20000348 	.word	0x20000348
 800714c:	20000390 	.word	0x20000390
 8007150:	2000028c 	.word	0x2000028c
 8007154:	20000288 	.word	0x20000288
 8007158:	2000039c 	.word	0x2000039c
 800715c:	20000398 	.word	0x20000398
 8007160:	e000ed04 	.word	0xe000ed04

08007164 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800716a:	2300      	movs	r3, #0
 800716c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800716e:	4b4e      	ldr	r3, [pc, #312]	; (80072a8 <xTaskIncrementTick+0x144>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	f040 8087 	bne.w	8007286 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007178:	4b4c      	ldr	r3, [pc, #304]	; (80072ac <xTaskIncrementTick+0x148>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3301      	adds	r3, #1
 800717e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007180:	4a4a      	ldr	r2, [pc, #296]	; (80072ac <xTaskIncrementTick+0x148>)
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d11f      	bne.n	80071cc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800718c:	4b48      	ldr	r3, [pc, #288]	; (80072b0 <xTaskIncrementTick+0x14c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d009      	beq.n	80071aa <xTaskIncrementTick+0x46>
 8007196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	603b      	str	r3, [r7, #0]
 80071a8:	e7fe      	b.n	80071a8 <xTaskIncrementTick+0x44>
 80071aa:	4b41      	ldr	r3, [pc, #260]	; (80072b0 <xTaskIncrementTick+0x14c>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	4b40      	ldr	r3, [pc, #256]	; (80072b4 <xTaskIncrementTick+0x150>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a3e      	ldr	r2, [pc, #248]	; (80072b0 <xTaskIncrementTick+0x14c>)
 80071b6:	6013      	str	r3, [r2, #0]
 80071b8:	4a3e      	ldr	r2, [pc, #248]	; (80072b4 <xTaskIncrementTick+0x150>)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	4b3e      	ldr	r3, [pc, #248]	; (80072b8 <xTaskIncrementTick+0x154>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3301      	adds	r3, #1
 80071c4:	4a3c      	ldr	r2, [pc, #240]	; (80072b8 <xTaskIncrementTick+0x154>)
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	f000 fa98 	bl	80076fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071cc:	4b3b      	ldr	r3, [pc, #236]	; (80072bc <xTaskIncrementTick+0x158>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d348      	bcc.n	8007268 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071d6:	4b36      	ldr	r3, [pc, #216]	; (80072b0 <xTaskIncrementTick+0x14c>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d104      	bne.n	80071ea <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071e0:	4b36      	ldr	r3, [pc, #216]	; (80072bc <xTaskIncrementTick+0x158>)
 80071e2:	f04f 32ff 	mov.w	r2, #4294967295
 80071e6:	601a      	str	r2, [r3, #0]
					break;
 80071e8:	e03e      	b.n	8007268 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ea:	4b31      	ldr	r3, [pc, #196]	; (80072b0 <xTaskIncrementTick+0x14c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d203      	bcs.n	800720a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007202:	4a2e      	ldr	r2, [pc, #184]	; (80072bc <xTaskIncrementTick+0x158>)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007208:	e02e      	b.n	8007268 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	3304      	adds	r3, #4
 800720e:	4618      	mov	r0, r3
 8007210:	f7fe ff48 	bl	80060a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007218:	2b00      	cmp	r3, #0
 800721a:	d004      	beq.n	8007226 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	3318      	adds	r3, #24
 8007220:	4618      	mov	r0, r3
 8007222:	f7fe ff3f 	bl	80060a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722a:	2201      	movs	r2, #1
 800722c:	409a      	lsls	r2, r3
 800722e:	4b24      	ldr	r3, [pc, #144]	; (80072c0 <xTaskIncrementTick+0x15c>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4313      	orrs	r3, r2
 8007234:	4a22      	ldr	r2, [pc, #136]	; (80072c0 <xTaskIncrementTick+0x15c>)
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723c:	4613      	mov	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4a1f      	ldr	r2, [pc, #124]	; (80072c4 <xTaskIncrementTick+0x160>)
 8007246:	441a      	add	r2, r3
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	3304      	adds	r3, #4
 800724c:	4619      	mov	r1, r3
 800724e:	4610      	mov	r0, r2
 8007250:	f7fe fecb 	bl	8005fea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007258:	4b1b      	ldr	r3, [pc, #108]	; (80072c8 <xTaskIncrementTick+0x164>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725e:	429a      	cmp	r2, r3
 8007260:	d3b9      	bcc.n	80071d6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007262:	2301      	movs	r3, #1
 8007264:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007266:	e7b6      	b.n	80071d6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007268:	4b17      	ldr	r3, [pc, #92]	; (80072c8 <xTaskIncrementTick+0x164>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800726e:	4915      	ldr	r1, [pc, #84]	; (80072c4 <xTaskIncrementTick+0x160>)
 8007270:	4613      	mov	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	440b      	add	r3, r1
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d907      	bls.n	8007290 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8007280:	2301      	movs	r3, #1
 8007282:	617b      	str	r3, [r7, #20]
 8007284:	e004      	b.n	8007290 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007286:	4b11      	ldr	r3, [pc, #68]	; (80072cc <xTaskIncrementTick+0x168>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3301      	adds	r3, #1
 800728c:	4a0f      	ldr	r2, [pc, #60]	; (80072cc <xTaskIncrementTick+0x168>)
 800728e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007290:	4b0f      	ldr	r3, [pc, #60]	; (80072d0 <xTaskIncrementTick+0x16c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8007298:	2301      	movs	r3, #1
 800729a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800729c:	697b      	ldr	r3, [r7, #20]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3718      	adds	r7, #24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	200003b0 	.word	0x200003b0
 80072ac:	2000038c 	.word	0x2000038c
 80072b0:	20000340 	.word	0x20000340
 80072b4:	20000344 	.word	0x20000344
 80072b8:	200003a0 	.word	0x200003a0
 80072bc:	200003a8 	.word	0x200003a8
 80072c0:	20000390 	.word	0x20000390
 80072c4:	2000028c 	.word	0x2000028c
 80072c8:	20000288 	.word	0x20000288
 80072cc:	20000398 	.word	0x20000398
 80072d0:	2000039c 	.word	0x2000039c

080072d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072da:	4b26      	ldr	r3, [pc, #152]	; (8007374 <vTaskSwitchContext+0xa0>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d003      	beq.n	80072ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80072e2:	4b25      	ldr	r3, [pc, #148]	; (8007378 <vTaskSwitchContext+0xa4>)
 80072e4:	2201      	movs	r2, #1
 80072e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072e8:	e03e      	b.n	8007368 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80072ea:	4b23      	ldr	r3, [pc, #140]	; (8007378 <vTaskSwitchContext+0xa4>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072f0:	4b22      	ldr	r3, [pc, #136]	; (800737c <vTaskSwitchContext+0xa8>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	fab3 f383 	clz	r3, r3
 80072fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80072fe:	7afb      	ldrb	r3, [r7, #11]
 8007300:	f1c3 031f 	rsb	r3, r3, #31
 8007304:	617b      	str	r3, [r7, #20]
 8007306:	491e      	ldr	r1, [pc, #120]	; (8007380 <vTaskSwitchContext+0xac>)
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	4613      	mov	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	440b      	add	r3, r1
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d109      	bne.n	800732e <vTaskSwitchContext+0x5a>
	__asm volatile
 800731a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731e:	f383 8811 	msr	BASEPRI, r3
 8007322:	f3bf 8f6f 	isb	sy
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	607b      	str	r3, [r7, #4]
 800732c:	e7fe      	b.n	800732c <vTaskSwitchContext+0x58>
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	4613      	mov	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4a11      	ldr	r2, [pc, #68]	; (8007380 <vTaskSwitchContext+0xac>)
 800733a:	4413      	add	r3, r2
 800733c:	613b      	str	r3, [r7, #16]
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	605a      	str	r2, [r3, #4]
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	3308      	adds	r3, #8
 8007350:	429a      	cmp	r2, r3
 8007352:	d104      	bne.n	800735e <vTaskSwitchContext+0x8a>
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	605a      	str	r2, [r3, #4]
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	4a07      	ldr	r2, [pc, #28]	; (8007384 <vTaskSwitchContext+0xb0>)
 8007366:	6013      	str	r3, [r2, #0]
}
 8007368:	bf00      	nop
 800736a:	371c      	adds	r7, #28
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	200003b0 	.word	0x200003b0
 8007378:	2000039c 	.word	0x2000039c
 800737c:	20000390 	.word	0x20000390
 8007380:	2000028c 	.word	0x2000028c
 8007384:	20000288 	.word	0x20000288

08007388 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d109      	bne.n	80073ac <vTaskPlaceOnEventList+0x24>
 8007398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	60fb      	str	r3, [r7, #12]
 80073aa:	e7fe      	b.n	80073aa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073ac:	4b07      	ldr	r3, [pc, #28]	; (80073cc <vTaskPlaceOnEventList+0x44>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3318      	adds	r3, #24
 80073b2:	4619      	mov	r1, r3
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7fe fe3c 	bl	8006032 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073ba:	2101      	movs	r1, #1
 80073bc:	6838      	ldr	r0, [r7, #0]
 80073be:	f000 fb8b 	bl	8007ad8 <prvAddCurrentTaskToDelayedList>
}
 80073c2:	bf00      	nop
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	20000288 	.word	0x20000288

080073d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d109      	bne.n	80073fa <xTaskRemoveFromEventList+0x2a>
 80073e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ea:	f383 8811 	msr	BASEPRI, r3
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f3bf 8f4f 	dsb	sy
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	e7fe      	b.n	80073f8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	3318      	adds	r3, #24
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fe fe50 	bl	80060a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007404:	4b1d      	ldr	r3, [pc, #116]	; (800747c <xTaskRemoveFromEventList+0xac>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d11c      	bne.n	8007446 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	3304      	adds	r3, #4
 8007410:	4618      	mov	r0, r3
 8007412:	f7fe fe47 	bl	80060a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741a:	2201      	movs	r2, #1
 800741c:	409a      	lsls	r2, r3
 800741e:	4b18      	ldr	r3, [pc, #96]	; (8007480 <xTaskRemoveFromEventList+0xb0>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4313      	orrs	r3, r2
 8007424:	4a16      	ldr	r2, [pc, #88]	; (8007480 <xTaskRemoveFromEventList+0xb0>)
 8007426:	6013      	str	r3, [r2, #0]
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800742c:	4613      	mov	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4a13      	ldr	r2, [pc, #76]	; (8007484 <xTaskRemoveFromEventList+0xb4>)
 8007436:	441a      	add	r2, r3
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	3304      	adds	r3, #4
 800743c:	4619      	mov	r1, r3
 800743e:	4610      	mov	r0, r2
 8007440:	f7fe fdd3 	bl	8005fea <vListInsertEnd>
 8007444:	e005      	b.n	8007452 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	3318      	adds	r3, #24
 800744a:	4619      	mov	r1, r3
 800744c:	480e      	ldr	r0, [pc, #56]	; (8007488 <xTaskRemoveFromEventList+0xb8>)
 800744e:	f7fe fdcc 	bl	8005fea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007456:	4b0d      	ldr	r3, [pc, #52]	; (800748c <xTaskRemoveFromEventList+0xbc>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	429a      	cmp	r2, r3
 800745e:	d905      	bls.n	800746c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007460:	2301      	movs	r3, #1
 8007462:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007464:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <xTaskRemoveFromEventList+0xc0>)
 8007466:	2201      	movs	r2, #1
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	e001      	b.n	8007470 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800746c:	2300      	movs	r3, #0
 800746e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007470:	697b      	ldr	r3, [r7, #20]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	200003b0 	.word	0x200003b0
 8007480:	20000390 	.word	0x20000390
 8007484:	2000028c 	.word	0x2000028c
 8007488:	20000348 	.word	0x20000348
 800748c:	20000288 	.word	0x20000288
 8007490:	2000039c 	.word	0x2000039c

08007494 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800749c:	4b06      	ldr	r3, [pc, #24]	; (80074b8 <vTaskInternalSetTimeOutState+0x24>)
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074a4:	4b05      	ldr	r3, [pc, #20]	; (80074bc <vTaskInternalSetTimeOutState+0x28>)
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	605a      	str	r2, [r3, #4]
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr
 80074b8:	200003a0 	.word	0x200003a0
 80074bc:	2000038c 	.word	0x2000038c

080074c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b088      	sub	sp, #32
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d109      	bne.n	80074e4 <xTaskCheckForTimeOut+0x24>
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	613b      	str	r3, [r7, #16]
 80074e2:	e7fe      	b.n	80074e2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d109      	bne.n	80074fe <xTaskCheckForTimeOut+0x3e>
 80074ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ee:	f383 8811 	msr	BASEPRI, r3
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	60fb      	str	r3, [r7, #12]
 80074fc:	e7fe      	b.n	80074fc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80074fe:	f000 fc75 	bl	8007dec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007502:	4b1d      	ldr	r3, [pc, #116]	; (8007578 <xTaskCheckForTimeOut+0xb8>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	69ba      	ldr	r2, [r7, #24]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751a:	d102      	bne.n	8007522 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800751c:	2300      	movs	r3, #0
 800751e:	61fb      	str	r3, [r7, #28]
 8007520:	e023      	b.n	800756a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	4b15      	ldr	r3, [pc, #84]	; (800757c <xTaskCheckForTimeOut+0xbc>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	429a      	cmp	r2, r3
 800752c:	d007      	beq.n	800753e <xTaskCheckForTimeOut+0x7e>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	69ba      	ldr	r2, [r7, #24]
 8007534:	429a      	cmp	r2, r3
 8007536:	d302      	bcc.n	800753e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007538:	2301      	movs	r3, #1
 800753a:	61fb      	str	r3, [r7, #28]
 800753c:	e015      	b.n	800756a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	429a      	cmp	r2, r3
 8007546:	d20b      	bcs.n	8007560 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	1ad2      	subs	r2, r2, r3
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7ff ff9d 	bl	8007494 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800755a:	2300      	movs	r3, #0
 800755c:	61fb      	str	r3, [r7, #28]
 800755e:	e004      	b.n	800756a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	2200      	movs	r2, #0
 8007564:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007566:	2301      	movs	r3, #1
 8007568:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800756a:	f000 fc6d 	bl	8007e48 <vPortExitCritical>

	return xReturn;
 800756e:	69fb      	ldr	r3, [r7, #28]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3720      	adds	r7, #32
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	2000038c 	.word	0x2000038c
 800757c:	200003a0 	.word	0x200003a0

08007580 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007580:	b480      	push	{r7}
 8007582:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007584:	4b03      	ldr	r3, [pc, #12]	; (8007594 <vTaskMissedYield+0x14>)
 8007586:	2201      	movs	r2, #1
 8007588:	601a      	str	r2, [r3, #0]
}
 800758a:	bf00      	nop
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	2000039c 	.word	0x2000039c

08007598 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075a0:	f000 f852 	bl	8007648 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075a4:	4b06      	ldr	r3, [pc, #24]	; (80075c0 <prvIdleTask+0x28>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d9f9      	bls.n	80075a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80075ac:	4b05      	ldr	r3, [pc, #20]	; (80075c4 <prvIdleTask+0x2c>)
 80075ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80075bc:	e7f0      	b.n	80075a0 <prvIdleTask+0x8>
 80075be:	bf00      	nop
 80075c0:	2000028c 	.word	0x2000028c
 80075c4:	e000ed04 	.word	0xe000ed04

080075c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075ce:	2300      	movs	r3, #0
 80075d0:	607b      	str	r3, [r7, #4]
 80075d2:	e00c      	b.n	80075ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	4613      	mov	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4413      	add	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4a12      	ldr	r2, [pc, #72]	; (8007628 <prvInitialiseTaskLists+0x60>)
 80075e0:	4413      	add	r3, r2
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fe fcd4 	bl	8005f90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	3301      	adds	r3, #1
 80075ec:	607b      	str	r3, [r7, #4]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b06      	cmp	r3, #6
 80075f2:	d9ef      	bls.n	80075d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80075f4:	480d      	ldr	r0, [pc, #52]	; (800762c <prvInitialiseTaskLists+0x64>)
 80075f6:	f7fe fccb 	bl	8005f90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80075fa:	480d      	ldr	r0, [pc, #52]	; (8007630 <prvInitialiseTaskLists+0x68>)
 80075fc:	f7fe fcc8 	bl	8005f90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007600:	480c      	ldr	r0, [pc, #48]	; (8007634 <prvInitialiseTaskLists+0x6c>)
 8007602:	f7fe fcc5 	bl	8005f90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007606:	480c      	ldr	r0, [pc, #48]	; (8007638 <prvInitialiseTaskLists+0x70>)
 8007608:	f7fe fcc2 	bl	8005f90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800760c:	480b      	ldr	r0, [pc, #44]	; (800763c <prvInitialiseTaskLists+0x74>)
 800760e:	f7fe fcbf 	bl	8005f90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007612:	4b0b      	ldr	r3, [pc, #44]	; (8007640 <prvInitialiseTaskLists+0x78>)
 8007614:	4a05      	ldr	r2, [pc, #20]	; (800762c <prvInitialiseTaskLists+0x64>)
 8007616:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007618:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <prvInitialiseTaskLists+0x7c>)
 800761a:	4a05      	ldr	r2, [pc, #20]	; (8007630 <prvInitialiseTaskLists+0x68>)
 800761c:	601a      	str	r2, [r3, #0]
}
 800761e:	bf00      	nop
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	2000028c 	.word	0x2000028c
 800762c:	20000318 	.word	0x20000318
 8007630:	2000032c 	.word	0x2000032c
 8007634:	20000348 	.word	0x20000348
 8007638:	2000035c 	.word	0x2000035c
 800763c:	20000374 	.word	0x20000374
 8007640:	20000340 	.word	0x20000340
 8007644:	20000344 	.word	0x20000344

08007648 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800764e:	e019      	b.n	8007684 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007650:	f000 fbcc 	bl	8007dec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007654:	4b0f      	ldr	r3, [pc, #60]	; (8007694 <prvCheckTasksWaitingTermination+0x4c>)
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	3304      	adds	r3, #4
 8007660:	4618      	mov	r0, r3
 8007662:	f7fe fd1f 	bl	80060a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007666:	4b0c      	ldr	r3, [pc, #48]	; (8007698 <prvCheckTasksWaitingTermination+0x50>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3b01      	subs	r3, #1
 800766c:	4a0a      	ldr	r2, [pc, #40]	; (8007698 <prvCheckTasksWaitingTermination+0x50>)
 800766e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007670:	4b0a      	ldr	r3, [pc, #40]	; (800769c <prvCheckTasksWaitingTermination+0x54>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3b01      	subs	r3, #1
 8007676:	4a09      	ldr	r2, [pc, #36]	; (800769c <prvCheckTasksWaitingTermination+0x54>)
 8007678:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800767a:	f000 fbe5 	bl	8007e48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f80e 	bl	80076a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007684:	4b05      	ldr	r3, [pc, #20]	; (800769c <prvCheckTasksWaitingTermination+0x54>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1e1      	bne.n	8007650 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800768c:	bf00      	nop
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	2000035c 	.word	0x2000035c
 8007698:	20000388 	.word	0x20000388
 800769c:	20000370 	.word	0x20000370

080076a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d108      	bne.n	80076c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 fd74 	bl	80081a4 <vPortFree>
				vPortFree( pxTCB );
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fd71 	bl	80081a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076c2:	e017      	b.n	80076f4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d103      	bne.n	80076d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fd68 	bl	80081a4 <vPortFree>
	}
 80076d4:	e00e      	b.n	80076f4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d009      	beq.n	80076f4 <prvDeleteTCB+0x54>
 80076e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	60fb      	str	r3, [r7, #12]
 80076f2:	e7fe      	b.n	80076f2 <prvDeleteTCB+0x52>
	}
 80076f4:	bf00      	nop
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007702:	4b0c      	ldr	r3, [pc, #48]	; (8007734 <prvResetNextTaskUnblockTime+0x38>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d104      	bne.n	8007716 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800770c:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <prvResetNextTaskUnblockTime+0x3c>)
 800770e:	f04f 32ff 	mov.w	r2, #4294967295
 8007712:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007714:	e008      	b.n	8007728 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007716:	4b07      	ldr	r3, [pc, #28]	; (8007734 <prvResetNextTaskUnblockTime+0x38>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	4a04      	ldr	r2, [pc, #16]	; (8007738 <prvResetNextTaskUnblockTime+0x3c>)
 8007726:	6013      	str	r3, [r2, #0]
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr
 8007734:	20000340 	.word	0x20000340
 8007738:	200003a8 	.word	0x200003a8

0800773c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007742:	4b0b      	ldr	r3, [pc, #44]	; (8007770 <xTaskGetSchedulerState+0x34>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d102      	bne.n	8007750 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800774a:	2301      	movs	r3, #1
 800774c:	607b      	str	r3, [r7, #4]
 800774e:	e008      	b.n	8007762 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007750:	4b08      	ldr	r3, [pc, #32]	; (8007774 <xTaskGetSchedulerState+0x38>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d102      	bne.n	800775e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007758:	2302      	movs	r3, #2
 800775a:	607b      	str	r3, [r7, #4]
 800775c:	e001      	b.n	8007762 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800775e:	2300      	movs	r3, #0
 8007760:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007762:	687b      	ldr	r3, [r7, #4]
	}
 8007764:	4618      	mov	r0, r3
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	20000394 	.word	0x20000394
 8007774:	200003b0 	.word	0x200003b0

08007778 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007784:	2300      	movs	r3, #0
 8007786:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d069      	beq.n	8007862 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007792:	4b36      	ldr	r3, [pc, #216]	; (800786c <xTaskPriorityInherit+0xf4>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	429a      	cmp	r2, r3
 800779a:	d259      	bcs.n	8007850 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	db06      	blt.n	80077b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077a4:	4b31      	ldr	r3, [pc, #196]	; (800786c <xTaskPriorityInherit+0xf4>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077aa:	f1c3 0207 	rsb	r2, r3, #7
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	6959      	ldr	r1, [r3, #20]
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ba:	4613      	mov	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4a2b      	ldr	r2, [pc, #172]	; (8007870 <xTaskPriorityInherit+0xf8>)
 80077c4:	4413      	add	r3, r2
 80077c6:	4299      	cmp	r1, r3
 80077c8:	d13a      	bne.n	8007840 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	3304      	adds	r3, #4
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fe fc68 	bl	80060a4 <uxListRemove>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d115      	bne.n	8007806 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077de:	4924      	ldr	r1, [pc, #144]	; (8007870 <xTaskPriorityInherit+0xf8>)
 80077e0:	4613      	mov	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	440b      	add	r3, r1
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10a      	bne.n	8007806 <xTaskPriorityInherit+0x8e>
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	2201      	movs	r2, #1
 80077f6:	fa02 f303 	lsl.w	r3, r2, r3
 80077fa:	43da      	mvns	r2, r3
 80077fc:	4b1d      	ldr	r3, [pc, #116]	; (8007874 <xTaskPriorityInherit+0xfc>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4013      	ands	r3, r2
 8007802:	4a1c      	ldr	r2, [pc, #112]	; (8007874 <xTaskPriorityInherit+0xfc>)
 8007804:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007806:	4b19      	ldr	r3, [pc, #100]	; (800786c <xTaskPriorityInherit+0xf4>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007814:	2201      	movs	r2, #1
 8007816:	409a      	lsls	r2, r3
 8007818:	4b16      	ldr	r3, [pc, #88]	; (8007874 <xTaskPriorityInherit+0xfc>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4313      	orrs	r3, r2
 800781e:	4a15      	ldr	r2, [pc, #84]	; (8007874 <xTaskPriorityInherit+0xfc>)
 8007820:	6013      	str	r3, [r2, #0]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007826:	4613      	mov	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4a10      	ldr	r2, [pc, #64]	; (8007870 <xTaskPriorityInherit+0xf8>)
 8007830:	441a      	add	r2, r3
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	3304      	adds	r3, #4
 8007836:	4619      	mov	r1, r3
 8007838:	4610      	mov	r0, r2
 800783a:	f7fe fbd6 	bl	8005fea <vListInsertEnd>
 800783e:	e004      	b.n	800784a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007840:	4b0a      	ldr	r3, [pc, #40]	; (800786c <xTaskPriorityInherit+0xf4>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800784a:	2301      	movs	r3, #1
 800784c:	60fb      	str	r3, [r7, #12]
 800784e:	e008      	b.n	8007862 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007854:	4b05      	ldr	r3, [pc, #20]	; (800786c <xTaskPriorityInherit+0xf4>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785a:	429a      	cmp	r2, r3
 800785c:	d201      	bcs.n	8007862 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800785e:	2301      	movs	r3, #1
 8007860:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007862:	68fb      	ldr	r3, [r7, #12]
	}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	20000288 	.word	0x20000288
 8007870:	2000028c 	.word	0x2000028c
 8007874:	20000390 	.word	0x20000390

08007878 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007884:	2300      	movs	r3, #0
 8007886:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d06c      	beq.n	8007968 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800788e:	4b39      	ldr	r3, [pc, #228]	; (8007974 <xTaskPriorityDisinherit+0xfc>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	429a      	cmp	r2, r3
 8007896:	d009      	beq.n	80078ac <xTaskPriorityDisinherit+0x34>
 8007898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	60fb      	str	r3, [r7, #12]
 80078aa:	e7fe      	b.n	80078aa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d109      	bne.n	80078c8 <xTaskPriorityDisinherit+0x50>
 80078b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	60bb      	str	r3, [r7, #8]
 80078c6:	e7fe      	b.n	80078c6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078cc:	1e5a      	subs	r2, r3, #1
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078da:	429a      	cmp	r2, r3
 80078dc:	d044      	beq.n	8007968 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d140      	bne.n	8007968 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	3304      	adds	r3, #4
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fe fbda 	bl	80060a4 <uxListRemove>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d115      	bne.n	8007922 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fa:	491f      	ldr	r1, [pc, #124]	; (8007978 <xTaskPriorityDisinherit+0x100>)
 80078fc:	4613      	mov	r3, r2
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	4413      	add	r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	440b      	add	r3, r1
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d10a      	bne.n	8007922 <xTaskPriorityDisinherit+0xaa>
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007910:	2201      	movs	r2, #1
 8007912:	fa02 f303 	lsl.w	r3, r2, r3
 8007916:	43da      	mvns	r2, r3
 8007918:	4b18      	ldr	r3, [pc, #96]	; (800797c <xTaskPriorityDisinherit+0x104>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4013      	ands	r3, r2
 800791e:	4a17      	ldr	r2, [pc, #92]	; (800797c <xTaskPriorityDisinherit+0x104>)
 8007920:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792e:	f1c3 0207 	rsb	r2, r3, #7
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793a:	2201      	movs	r2, #1
 800793c:	409a      	lsls	r2, r3
 800793e:	4b0f      	ldr	r3, [pc, #60]	; (800797c <xTaskPriorityDisinherit+0x104>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4313      	orrs	r3, r2
 8007944:	4a0d      	ldr	r2, [pc, #52]	; (800797c <xTaskPriorityDisinherit+0x104>)
 8007946:	6013      	str	r3, [r2, #0]
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794c:	4613      	mov	r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4413      	add	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4a08      	ldr	r2, [pc, #32]	; (8007978 <xTaskPriorityDisinherit+0x100>)
 8007956:	441a      	add	r2, r3
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	3304      	adds	r3, #4
 800795c:	4619      	mov	r1, r3
 800795e:	4610      	mov	r0, r2
 8007960:	f7fe fb43 	bl	8005fea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007964:	2301      	movs	r3, #1
 8007966:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007968:	697b      	ldr	r3, [r7, #20]
	}
 800796a:	4618      	mov	r0, r3
 800796c:	3718      	adds	r7, #24
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	20000288 	.word	0x20000288
 8007978:	2000028c 	.word	0x2000028c
 800797c:	20000390 	.word	0x20000390

08007980 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007980:	b580      	push	{r7, lr}
 8007982:	b088      	sub	sp, #32
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800798e:	2301      	movs	r3, #1
 8007990:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	f000 8081 	beq.w	8007a9c <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d109      	bne.n	80079b6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 80079a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a6:	f383 8811 	msr	BASEPRI, r3
 80079aa:	f3bf 8f6f 	isb	sy
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	e7fe      	b.n	80079b4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d902      	bls.n	80079c6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	61fb      	str	r3, [r7, #28]
 80079c4:	e002      	b.n	80079cc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d0:	69fa      	ldr	r2, [r7, #28]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d062      	beq.n	8007a9c <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d15d      	bne.n	8007a9c <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80079e0:	4b30      	ldr	r3, [pc, #192]	; (8007aa4 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d109      	bne.n	80079fe <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80079ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	60bb      	str	r3, [r7, #8]
 80079fc:	e7fe      	b.n	80079fc <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a02:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	69fa      	ldr	r2, [r7, #28]
 8007a08:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	db04      	blt.n	8007a1c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	f1c3 0207 	rsb	r2, r3, #7
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	6959      	ldr	r1, [r3, #20]
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	4613      	mov	r3, r2
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	4413      	add	r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4a1f      	ldr	r2, [pc, #124]	; (8007aa8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007a2c:	4413      	add	r3, r2
 8007a2e:	4299      	cmp	r1, r3
 8007a30:	d134      	bne.n	8007a9c <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	3304      	adds	r3, #4
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fe fb34 	bl	80060a4 <uxListRemove>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d115      	bne.n	8007a6e <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a46:	4918      	ldr	r1, [pc, #96]	; (8007aa8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007a48:	4613      	mov	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4413      	add	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	440b      	add	r3, r1
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10a      	bne.n	8007a6e <vTaskPriorityDisinheritAfterTimeout+0xee>
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a62:	43da      	mvns	r2, r3
 8007a64:	4b11      	ldr	r3, [pc, #68]	; (8007aac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4013      	ands	r3, r2
 8007a6a:	4a10      	ldr	r2, [pc, #64]	; (8007aac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007a6c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a72:	2201      	movs	r2, #1
 8007a74:	409a      	lsls	r2, r3
 8007a76:	4b0d      	ldr	r3, [pc, #52]	; (8007aac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	4a0b      	ldr	r2, [pc, #44]	; (8007aac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007a7e:	6013      	str	r3, [r2, #0]
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a84:	4613      	mov	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4a06      	ldr	r2, [pc, #24]	; (8007aa8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007a8e:	441a      	add	r2, r3
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	3304      	adds	r3, #4
 8007a94:	4619      	mov	r1, r3
 8007a96:	4610      	mov	r0, r2
 8007a98:	f7fe faa7 	bl	8005fea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a9c:	bf00      	nop
 8007a9e:	3720      	adds	r7, #32
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	20000288 	.word	0x20000288
 8007aa8:	2000028c 	.word	0x2000028c
 8007aac:	20000390 	.word	0x20000390

08007ab0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007ab0:	b480      	push	{r7}
 8007ab2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007ab4:	4b07      	ldr	r3, [pc, #28]	; (8007ad4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d004      	beq.n	8007ac6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007abc:	4b05      	ldr	r3, [pc, #20]	; (8007ad4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ac2:	3201      	adds	r2, #1
 8007ac4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007ac6:	4b03      	ldr	r3, [pc, #12]	; (8007ad4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
	}
 8007aca:	4618      	mov	r0, r3
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	20000288 	.word	0x20000288

08007ad8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ae2:	4b29      	ldr	r3, [pc, #164]	; (8007b88 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ae8:	4b28      	ldr	r3, [pc, #160]	; (8007b8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3304      	adds	r3, #4
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fe fad8 	bl	80060a4 <uxListRemove>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10b      	bne.n	8007b12 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007afa:	4b24      	ldr	r3, [pc, #144]	; (8007b8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b00:	2201      	movs	r2, #1
 8007b02:	fa02 f303 	lsl.w	r3, r2, r3
 8007b06:	43da      	mvns	r2, r3
 8007b08:	4b21      	ldr	r3, [pc, #132]	; (8007b90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	4a20      	ldr	r2, [pc, #128]	; (8007b90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b10:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b18:	d10a      	bne.n	8007b30 <prvAddCurrentTaskToDelayedList+0x58>
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d007      	beq.n	8007b30 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b20:	4b1a      	ldr	r3, [pc, #104]	; (8007b8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3304      	adds	r3, #4
 8007b26:	4619      	mov	r1, r3
 8007b28:	481a      	ldr	r0, [pc, #104]	; (8007b94 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007b2a:	f7fe fa5e 	bl	8005fea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b2e:	e026      	b.n	8007b7e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4413      	add	r3, r2
 8007b36:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b38:	4b14      	ldr	r3, [pc, #80]	; (8007b8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d209      	bcs.n	8007b5c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b48:	4b13      	ldr	r3, [pc, #76]	; (8007b98 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	4b0f      	ldr	r3, [pc, #60]	; (8007b8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	3304      	adds	r3, #4
 8007b52:	4619      	mov	r1, r3
 8007b54:	4610      	mov	r0, r2
 8007b56:	f7fe fa6c 	bl	8006032 <vListInsert>
}
 8007b5a:	e010      	b.n	8007b7e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b5c:	4b0f      	ldr	r3, [pc, #60]	; (8007b9c <prvAddCurrentTaskToDelayedList+0xc4>)
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	4b0a      	ldr	r3, [pc, #40]	; (8007b8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3304      	adds	r3, #4
 8007b66:	4619      	mov	r1, r3
 8007b68:	4610      	mov	r0, r2
 8007b6a:	f7fe fa62 	bl	8006032 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b6e:	4b0c      	ldr	r3, [pc, #48]	; (8007ba0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d202      	bcs.n	8007b7e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007b78:	4a09      	ldr	r2, [pc, #36]	; (8007ba0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	6013      	str	r3, [r2, #0]
}
 8007b7e:	bf00      	nop
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	2000038c 	.word	0x2000038c
 8007b8c:	20000288 	.word	0x20000288
 8007b90:	20000390 	.word	0x20000390
 8007b94:	20000374 	.word	0x20000374
 8007b98:	20000344 	.word	0x20000344
 8007b9c:	20000340 	.word	0x20000340
 8007ba0:	200003a8 	.word	0x200003a8

08007ba4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	3b04      	subs	r3, #4
 8007bb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007bbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	3b04      	subs	r3, #4
 8007bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	f023 0201 	bic.w	r2, r3, #1
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	3b04      	subs	r3, #4
 8007bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007bd4:	4a0c      	ldr	r2, [pc, #48]	; (8007c08 <pxPortInitialiseStack+0x64>)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	3b14      	subs	r3, #20
 8007bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	3b04      	subs	r3, #4
 8007bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f06f 0202 	mvn.w	r2, #2
 8007bf2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3b20      	subs	r3, #32
 8007bf8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr
 8007c08:	08007c0d 	.word	0x08007c0d

08007c0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007c12:	2300      	movs	r3, #0
 8007c14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c16:	4b11      	ldr	r3, [pc, #68]	; (8007c5c <prvTaskExitError+0x50>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1e:	d009      	beq.n	8007c34 <prvTaskExitError+0x28>
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	60fb      	str	r3, [r7, #12]
 8007c32:	e7fe      	b.n	8007c32 <prvTaskExitError+0x26>
 8007c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c46:	bf00      	nop
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d0fc      	beq.n	8007c48 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c4e:	bf00      	nop
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	2000000c 	.word	0x2000000c

08007c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c60:	4b07      	ldr	r3, [pc, #28]	; (8007c80 <pxCurrentTCBConst2>)
 8007c62:	6819      	ldr	r1, [r3, #0]
 8007c64:	6808      	ldr	r0, [r1, #0]
 8007c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c6a:	f380 8809 	msr	PSP, r0
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	f04f 0000 	mov.w	r0, #0
 8007c76:	f380 8811 	msr	BASEPRI, r0
 8007c7a:	4770      	bx	lr
 8007c7c:	f3af 8000 	nop.w

08007c80 <pxCurrentTCBConst2>:
 8007c80:	20000288 	.word	0x20000288
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c84:	bf00      	nop
 8007c86:	bf00      	nop

08007c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c88:	4808      	ldr	r0, [pc, #32]	; (8007cac <prvPortStartFirstTask+0x24>)
 8007c8a:	6800      	ldr	r0, [r0, #0]
 8007c8c:	6800      	ldr	r0, [r0, #0]
 8007c8e:	f380 8808 	msr	MSP, r0
 8007c92:	f04f 0000 	mov.w	r0, #0
 8007c96:	f380 8814 	msr	CONTROL, r0
 8007c9a:	b662      	cpsie	i
 8007c9c:	b661      	cpsie	f
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	df00      	svc	0
 8007ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007caa:	bf00      	nop
 8007cac:	e000ed08 	.word	0xe000ed08

08007cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007cb6:	4b44      	ldr	r3, [pc, #272]	; (8007dc8 <xPortStartScheduler+0x118>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a44      	ldr	r2, [pc, #272]	; (8007dcc <xPortStartScheduler+0x11c>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d109      	bne.n	8007cd4 <xPortStartScheduler+0x24>
 8007cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	613b      	str	r3, [r7, #16]
 8007cd2:	e7fe      	b.n	8007cd2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007cd4:	4b3c      	ldr	r3, [pc, #240]	; (8007dc8 <xPortStartScheduler+0x118>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a3d      	ldr	r2, [pc, #244]	; (8007dd0 <xPortStartScheduler+0x120>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d109      	bne.n	8007cf2 <xPortStartScheduler+0x42>
 8007cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	60fb      	str	r3, [r7, #12]
 8007cf0:	e7fe      	b.n	8007cf0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007cf2:	4b38      	ldr	r3, [pc, #224]	; (8007dd4 <xPortStartScheduler+0x124>)
 8007cf4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	22ff      	movs	r2, #255	; 0xff
 8007d02:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d0c:	78fb      	ldrb	r3, [r7, #3]
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	4b30      	ldr	r3, [pc, #192]	; (8007dd8 <xPortStartScheduler+0x128>)
 8007d18:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d1a:	4b30      	ldr	r3, [pc, #192]	; (8007ddc <xPortStartScheduler+0x12c>)
 8007d1c:	2207      	movs	r2, #7
 8007d1e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d20:	e009      	b.n	8007d36 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007d22:	4b2e      	ldr	r3, [pc, #184]	; (8007ddc <xPortStartScheduler+0x12c>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	3b01      	subs	r3, #1
 8007d28:	4a2c      	ldr	r2, [pc, #176]	; (8007ddc <xPortStartScheduler+0x12c>)
 8007d2a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d2c:	78fb      	ldrb	r3, [r7, #3]
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	005b      	lsls	r3, r3, #1
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d36:	78fb      	ldrb	r3, [r7, #3]
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d3e:	2b80      	cmp	r3, #128	; 0x80
 8007d40:	d0ef      	beq.n	8007d22 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d42:	4b26      	ldr	r3, [pc, #152]	; (8007ddc <xPortStartScheduler+0x12c>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f1c3 0307 	rsb	r3, r3, #7
 8007d4a:	2b04      	cmp	r3, #4
 8007d4c:	d009      	beq.n	8007d62 <xPortStartScheduler+0xb2>
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	60bb      	str	r3, [r7, #8]
 8007d60:	e7fe      	b.n	8007d60 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d62:	4b1e      	ldr	r3, [pc, #120]	; (8007ddc <xPortStartScheduler+0x12c>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	021b      	lsls	r3, r3, #8
 8007d68:	4a1c      	ldr	r2, [pc, #112]	; (8007ddc <xPortStartScheduler+0x12c>)
 8007d6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d6c:	4b1b      	ldr	r3, [pc, #108]	; (8007ddc <xPortStartScheduler+0x12c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d74:	4a19      	ldr	r2, [pc, #100]	; (8007ddc <xPortStartScheduler+0x12c>)
 8007d76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	b2da      	uxtb	r2, r3
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d80:	4b17      	ldr	r3, [pc, #92]	; (8007de0 <xPortStartScheduler+0x130>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a16      	ldr	r2, [pc, #88]	; (8007de0 <xPortStartScheduler+0x130>)
 8007d86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d8c:	4b14      	ldr	r3, [pc, #80]	; (8007de0 <xPortStartScheduler+0x130>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a13      	ldr	r2, [pc, #76]	; (8007de0 <xPortStartScheduler+0x130>)
 8007d92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d98:	f000 f8d6 	bl	8007f48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d9c:	4b11      	ldr	r3, [pc, #68]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d9e:	2200      	movs	r2, #0
 8007da0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007da2:	f000 f8f5 	bl	8007f90 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007da6:	4b10      	ldr	r3, [pc, #64]	; (8007de8 <xPortStartScheduler+0x138>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a0f      	ldr	r2, [pc, #60]	; (8007de8 <xPortStartScheduler+0x138>)
 8007dac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007db0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007db2:	f7ff ff69 	bl	8007c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007db6:	f7ff fa8d 	bl	80072d4 <vTaskSwitchContext>
	prvTaskExitError();
 8007dba:	f7ff ff27 	bl	8007c0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3718      	adds	r7, #24
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	e000ed00 	.word	0xe000ed00
 8007dcc:	410fc271 	.word	0x410fc271
 8007dd0:	410fc270 	.word	0x410fc270
 8007dd4:	e000e400 	.word	0xe000e400
 8007dd8:	200003b4 	.word	0x200003b4
 8007ddc:	200003b8 	.word	0x200003b8
 8007de0:	e000ed20 	.word	0xe000ed20
 8007de4:	2000000c 	.word	0x2000000c
 8007de8:	e000ef34 	.word	0xe000ef34

08007dec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df6:	f383 8811 	msr	BASEPRI, r3
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e04:	4b0e      	ldr	r3, [pc, #56]	; (8007e40 <vPortEnterCritical+0x54>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	4a0d      	ldr	r2, [pc, #52]	; (8007e40 <vPortEnterCritical+0x54>)
 8007e0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e0e:	4b0c      	ldr	r3, [pc, #48]	; (8007e40 <vPortEnterCritical+0x54>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d10e      	bne.n	8007e34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e16:	4b0b      	ldr	r3, [pc, #44]	; (8007e44 <vPortEnterCritical+0x58>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d009      	beq.n	8007e34 <vPortEnterCritical+0x48>
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	603b      	str	r3, [r7, #0]
 8007e32:	e7fe      	b.n	8007e32 <vPortEnterCritical+0x46>
	}
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	2000000c 	.word	0x2000000c
 8007e44:	e000ed04 	.word	0xe000ed04

08007e48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e4e:	4b11      	ldr	r3, [pc, #68]	; (8007e94 <vPortExitCritical+0x4c>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d109      	bne.n	8007e6a <vPortExitCritical+0x22>
 8007e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	607b      	str	r3, [r7, #4]
 8007e68:	e7fe      	b.n	8007e68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007e6a:	4b0a      	ldr	r3, [pc, #40]	; (8007e94 <vPortExitCritical+0x4c>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	4a08      	ldr	r2, [pc, #32]	; (8007e94 <vPortExitCritical+0x4c>)
 8007e72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e74:	4b07      	ldr	r3, [pc, #28]	; (8007e94 <vPortExitCritical+0x4c>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d104      	bne.n	8007e86 <vPortExitCritical+0x3e>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e86:	bf00      	nop
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	2000000c 	.word	0x2000000c
	...

08007ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ea0:	f3ef 8009 	mrs	r0, PSP
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	4b15      	ldr	r3, [pc, #84]	; (8007f00 <pxCurrentTCBConst>)
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	f01e 0f10 	tst.w	lr, #16
 8007eb0:	bf08      	it	eq
 8007eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eba:	6010      	str	r0, [r2, #0]
 8007ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ec4:	f380 8811 	msr	BASEPRI, r0
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f7ff fa00 	bl	80072d4 <vTaskSwitchContext>
 8007ed4:	f04f 0000 	mov.w	r0, #0
 8007ed8:	f380 8811 	msr	BASEPRI, r0
 8007edc:	bc09      	pop	{r0, r3}
 8007ede:	6819      	ldr	r1, [r3, #0]
 8007ee0:	6808      	ldr	r0, [r1, #0]
 8007ee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee6:	f01e 0f10 	tst.w	lr, #16
 8007eea:	bf08      	it	eq
 8007eec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ef0:	f380 8809 	msr	PSP, r0
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	f3af 8000 	nop.w

08007f00 <pxCurrentTCBConst>:
 8007f00:	20000288 	.word	0x20000288
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f04:	bf00      	nop
 8007f06:	bf00      	nop

08007f08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f20:	f7ff f920 	bl	8007164 <xTaskIncrementTick>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d003      	beq.n	8007f32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f2a:	4b06      	ldr	r3, [pc, #24]	; (8007f44 <SysTick_Handler+0x3c>)
 8007f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f30:	601a      	str	r2, [r3, #0]
 8007f32:	2300      	movs	r3, #0
 8007f34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f3c:	bf00      	nop
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	e000ed04 	.word	0xe000ed04

08007f48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f48:	b480      	push	{r7}
 8007f4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f4c:	4b0b      	ldr	r3, [pc, #44]	; (8007f7c <vPortSetupTimerInterrupt+0x34>)
 8007f4e:	2200      	movs	r2, #0
 8007f50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f52:	4b0b      	ldr	r3, [pc, #44]	; (8007f80 <vPortSetupTimerInterrupt+0x38>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f58:	4b0a      	ldr	r3, [pc, #40]	; (8007f84 <vPortSetupTimerInterrupt+0x3c>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a0a      	ldr	r2, [pc, #40]	; (8007f88 <vPortSetupTimerInterrupt+0x40>)
 8007f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f62:	099b      	lsrs	r3, r3, #6
 8007f64:	4a09      	ldr	r2, [pc, #36]	; (8007f8c <vPortSetupTimerInterrupt+0x44>)
 8007f66:	3b01      	subs	r3, #1
 8007f68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f6a:	4b04      	ldr	r3, [pc, #16]	; (8007f7c <vPortSetupTimerInterrupt+0x34>)
 8007f6c:	2207      	movs	r2, #7
 8007f6e:	601a      	str	r2, [r3, #0]
}
 8007f70:	bf00      	nop
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	e000e010 	.word	0xe000e010
 8007f80:	e000e018 	.word	0xe000e018
 8007f84:	20000000 	.word	0x20000000
 8007f88:	10624dd3 	.word	0x10624dd3
 8007f8c:	e000e014 	.word	0xe000e014

08007f90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007fa0 <vPortEnableVFP+0x10>
 8007f94:	6801      	ldr	r1, [r0, #0]
 8007f96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f9a:	6001      	str	r1, [r0, #0]
 8007f9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f9e:	bf00      	nop
 8007fa0:	e000ed88 	.word	0xe000ed88

08007fa4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007faa:	f3ef 8305 	mrs	r3, IPSR
 8007fae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b0f      	cmp	r3, #15
 8007fb4:	d913      	bls.n	8007fde <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007fb6:	4a16      	ldr	r2, [pc, #88]	; (8008010 <vPortValidateInterruptPriority+0x6c>)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4413      	add	r3, r2
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007fc0:	4b14      	ldr	r3, [pc, #80]	; (8008014 <vPortValidateInterruptPriority+0x70>)
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	7afa      	ldrb	r2, [r7, #11]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d209      	bcs.n	8007fde <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	607b      	str	r3, [r7, #4]
 8007fdc:	e7fe      	b.n	8007fdc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007fde:	4b0e      	ldr	r3, [pc, #56]	; (8008018 <vPortValidateInterruptPriority+0x74>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007fe6:	4b0d      	ldr	r3, [pc, #52]	; (800801c <vPortValidateInterruptPriority+0x78>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d909      	bls.n	8008002 <vPortValidateInterruptPriority+0x5e>
 8007fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	603b      	str	r3, [r7, #0]
 8008000:	e7fe      	b.n	8008000 <vPortValidateInterruptPriority+0x5c>
	}
 8008002:	bf00      	nop
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	e000e3f0 	.word	0xe000e3f0
 8008014:	200003b4 	.word	0x200003b4
 8008018:	e000ed0c 	.word	0xe000ed0c
 800801c:	200003b8 	.word	0x200003b8

08008020 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b08a      	sub	sp, #40	; 0x28
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008028:	2300      	movs	r3, #0
 800802a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800802c:	f7fe fff0 	bl	8007010 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008030:	4b57      	ldr	r3, [pc, #348]	; (8008190 <pvPortMalloc+0x170>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d101      	bne.n	800803c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008038:	f000 f90c 	bl	8008254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800803c:	4b55      	ldr	r3, [pc, #340]	; (8008194 <pvPortMalloc+0x174>)
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4013      	ands	r3, r2
 8008044:	2b00      	cmp	r3, #0
 8008046:	f040 808c 	bne.w	8008162 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d01c      	beq.n	800808a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008050:	2208      	movs	r2, #8
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4413      	add	r3, r2
 8008056:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f003 0307 	and.w	r3, r3, #7
 800805e:	2b00      	cmp	r3, #0
 8008060:	d013      	beq.n	800808a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f023 0307 	bic.w	r3, r3, #7
 8008068:	3308      	adds	r3, #8
 800806a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f003 0307 	and.w	r3, r3, #7
 8008072:	2b00      	cmp	r3, #0
 8008074:	d009      	beq.n	800808a <pvPortMalloc+0x6a>
 8008076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	617b      	str	r3, [r7, #20]
 8008088:	e7fe      	b.n	8008088 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d068      	beq.n	8008162 <pvPortMalloc+0x142>
 8008090:	4b41      	ldr	r3, [pc, #260]	; (8008198 <pvPortMalloc+0x178>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	429a      	cmp	r2, r3
 8008098:	d863      	bhi.n	8008162 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800809a:	4b40      	ldr	r3, [pc, #256]	; (800819c <pvPortMalloc+0x17c>)
 800809c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800809e:	4b3f      	ldr	r3, [pc, #252]	; (800819c <pvPortMalloc+0x17c>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080a4:	e004      	b.n	80080b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80080a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80080aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d903      	bls.n	80080c2 <pvPortMalloc+0xa2>
 80080ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1f1      	bne.n	80080a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80080c2:	4b33      	ldr	r3, [pc, #204]	; (8008190 <pvPortMalloc+0x170>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d04a      	beq.n	8008162 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80080cc:	6a3b      	ldr	r3, [r7, #32]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2208      	movs	r2, #8
 80080d2:	4413      	add	r3, r2
 80080d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80080d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	6a3b      	ldr	r3, [r7, #32]
 80080dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	685a      	ldr	r2, [r3, #4]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	1ad2      	subs	r2, r2, r3
 80080e6:	2308      	movs	r3, #8
 80080e8:	005b      	lsls	r3, r3, #1
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d91e      	bls.n	800812c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4413      	add	r3, r2
 80080f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	f003 0307 	and.w	r3, r3, #7
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d009      	beq.n	8008114 <pvPortMalloc+0xf4>
 8008100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	613b      	str	r3, [r7, #16]
 8008112:	e7fe      	b.n	8008112 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008116:	685a      	ldr	r2, [r3, #4]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	1ad2      	subs	r2, r2, r3
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008126:	69b8      	ldr	r0, [r7, #24]
 8008128:	f000 f8f6 	bl	8008318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800812c:	4b1a      	ldr	r3, [pc, #104]	; (8008198 <pvPortMalloc+0x178>)
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	4a18      	ldr	r2, [pc, #96]	; (8008198 <pvPortMalloc+0x178>)
 8008138:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800813a:	4b17      	ldr	r3, [pc, #92]	; (8008198 <pvPortMalloc+0x178>)
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	4b18      	ldr	r3, [pc, #96]	; (80081a0 <pvPortMalloc+0x180>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	429a      	cmp	r2, r3
 8008144:	d203      	bcs.n	800814e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008146:	4b14      	ldr	r3, [pc, #80]	; (8008198 <pvPortMalloc+0x178>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a15      	ldr	r2, [pc, #84]	; (80081a0 <pvPortMalloc+0x180>)
 800814c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	4b10      	ldr	r3, [pc, #64]	; (8008194 <pvPortMalloc+0x174>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	431a      	orrs	r2, r3
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815e:	2200      	movs	r2, #0
 8008160:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008162:	f7fe ff63 	bl	800702c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	f003 0307 	and.w	r3, r3, #7
 800816c:	2b00      	cmp	r3, #0
 800816e:	d009      	beq.n	8008184 <pvPortMalloc+0x164>
 8008170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	60fb      	str	r3, [r7, #12]
 8008182:	e7fe      	b.n	8008182 <pvPortMalloc+0x162>
	return pvReturn;
 8008184:	69fb      	ldr	r3, [r7, #28]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3728      	adds	r7, #40	; 0x28
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	20000f7c 	.word	0x20000f7c
 8008194:	20000f88 	.word	0x20000f88
 8008198:	20000f80 	.word	0x20000f80
 800819c:	20000f74 	.word	0x20000f74
 80081a0:	20000f84 	.word	0x20000f84

080081a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d046      	beq.n	8008244 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80081b6:	2308      	movs	r3, #8
 80081b8:	425b      	negs	r3, r3
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	4413      	add	r3, r2
 80081be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	4b20      	ldr	r3, [pc, #128]	; (800824c <vPortFree+0xa8>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4013      	ands	r3, r2
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d109      	bne.n	80081e6 <vPortFree+0x42>
 80081d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d6:	f383 8811 	msr	BASEPRI, r3
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	60fb      	str	r3, [r7, #12]
 80081e4:	e7fe      	b.n	80081e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d009      	beq.n	8008202 <vPortFree+0x5e>
 80081ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	60bb      	str	r3, [r7, #8]
 8008200:	e7fe      	b.n	8008200 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	4b11      	ldr	r3, [pc, #68]	; (800824c <vPortFree+0xa8>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4013      	ands	r3, r2
 800820c:	2b00      	cmp	r3, #0
 800820e:	d019      	beq.n	8008244 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d115      	bne.n	8008244 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	685a      	ldr	r2, [r3, #4]
 800821c:	4b0b      	ldr	r3, [pc, #44]	; (800824c <vPortFree+0xa8>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	43db      	mvns	r3, r3
 8008222:	401a      	ands	r2, r3
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008228:	f7fe fef2 	bl	8007010 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	4b07      	ldr	r3, [pc, #28]	; (8008250 <vPortFree+0xac>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4413      	add	r3, r2
 8008236:	4a06      	ldr	r2, [pc, #24]	; (8008250 <vPortFree+0xac>)
 8008238:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800823a:	6938      	ldr	r0, [r7, #16]
 800823c:	f000 f86c 	bl	8008318 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008240:	f7fe fef4 	bl	800702c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008244:	bf00      	nop
 8008246:	3718      	adds	r7, #24
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	20000f88 	.word	0x20000f88
 8008250:	20000f80 	.word	0x20000f80

08008254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800825a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800825e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008260:	4b27      	ldr	r3, [pc, #156]	; (8008300 <prvHeapInit+0xac>)
 8008262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f003 0307 	and.w	r3, r3, #7
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00c      	beq.n	8008288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	3307      	adds	r3, #7
 8008272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f023 0307 	bic.w	r3, r3, #7
 800827a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	4a1f      	ldr	r2, [pc, #124]	; (8008300 <prvHeapInit+0xac>)
 8008284:	4413      	add	r3, r2
 8008286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800828c:	4a1d      	ldr	r2, [pc, #116]	; (8008304 <prvHeapInit+0xb0>)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008292:	4b1c      	ldr	r3, [pc, #112]	; (8008304 <prvHeapInit+0xb0>)
 8008294:	2200      	movs	r2, #0
 8008296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	4413      	add	r3, r2
 800829e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80082a0:	2208      	movs	r2, #8
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	1a9b      	subs	r3, r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f023 0307 	bic.w	r3, r3, #7
 80082ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	4a15      	ldr	r2, [pc, #84]	; (8008308 <prvHeapInit+0xb4>)
 80082b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80082b6:	4b14      	ldr	r3, [pc, #80]	; (8008308 <prvHeapInit+0xb4>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2200      	movs	r2, #0
 80082bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80082be:	4b12      	ldr	r3, [pc, #72]	; (8008308 <prvHeapInit+0xb4>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2200      	movs	r2, #0
 80082c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	1ad2      	subs	r2, r2, r3
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082d4:	4b0c      	ldr	r3, [pc, #48]	; (8008308 <prvHeapInit+0xb4>)
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	4a0a      	ldr	r2, [pc, #40]	; (800830c <prvHeapInit+0xb8>)
 80082e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	4a09      	ldr	r2, [pc, #36]	; (8008310 <prvHeapInit+0xbc>)
 80082ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082ec:	4b09      	ldr	r3, [pc, #36]	; (8008314 <prvHeapInit+0xc0>)
 80082ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80082f2:	601a      	str	r2, [r3, #0]
}
 80082f4:	bf00      	nop
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr
 8008300:	200003bc 	.word	0x200003bc
 8008304:	20000f74 	.word	0x20000f74
 8008308:	20000f7c 	.word	0x20000f7c
 800830c:	20000f84 	.word	0x20000f84
 8008310:	20000f80 	.word	0x20000f80
 8008314:	20000f88 	.word	0x20000f88

08008318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008320:	4b28      	ldr	r3, [pc, #160]	; (80083c4 <prvInsertBlockIntoFreeList+0xac>)
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	e002      	b.n	800832c <prvInsertBlockIntoFreeList+0x14>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	60fb      	str	r3, [r7, #12]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	429a      	cmp	r2, r3
 8008334:	d8f7      	bhi.n	8008326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	4413      	add	r3, r2
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	429a      	cmp	r2, r3
 8008346:	d108      	bne.n	800835a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	685a      	ldr	r2, [r3, #4]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	441a      	add	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	441a      	add	r2, r3
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	429a      	cmp	r2, r3
 800836c:	d118      	bne.n	80083a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	4b15      	ldr	r3, [pc, #84]	; (80083c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	429a      	cmp	r2, r3
 8008378:	d00d      	beq.n	8008396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	685a      	ldr	r2, [r3, #4]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	441a      	add	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	601a      	str	r2, [r3, #0]
 8008394:	e008      	b.n	80083a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008396:	4b0c      	ldr	r3, [pc, #48]	; (80083c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	601a      	str	r2, [r3, #0]
 800839e:	e003      	b.n	80083a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d002      	beq.n	80083b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083b6:	bf00      	nop
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	20000f74 	.word	0x20000f74
 80083c8:	20000f7c 	.word	0x20000f7c

080083cc <__libc_init_array>:
 80083cc:	b570      	push	{r4, r5, r6, lr}
 80083ce:	4e0d      	ldr	r6, [pc, #52]	; (8008404 <__libc_init_array+0x38>)
 80083d0:	4c0d      	ldr	r4, [pc, #52]	; (8008408 <__libc_init_array+0x3c>)
 80083d2:	1ba4      	subs	r4, r4, r6
 80083d4:	10a4      	asrs	r4, r4, #2
 80083d6:	2500      	movs	r5, #0
 80083d8:	42a5      	cmp	r5, r4
 80083da:	d109      	bne.n	80083f0 <__libc_init_array+0x24>
 80083dc:	4e0b      	ldr	r6, [pc, #44]	; (800840c <__libc_init_array+0x40>)
 80083de:	4c0c      	ldr	r4, [pc, #48]	; (8008410 <__libc_init_array+0x44>)
 80083e0:	f000 f82c 	bl	800843c <_init>
 80083e4:	1ba4      	subs	r4, r4, r6
 80083e6:	10a4      	asrs	r4, r4, #2
 80083e8:	2500      	movs	r5, #0
 80083ea:	42a5      	cmp	r5, r4
 80083ec:	d105      	bne.n	80083fa <__libc_init_array+0x2e>
 80083ee:	bd70      	pop	{r4, r5, r6, pc}
 80083f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083f4:	4798      	blx	r3
 80083f6:	3501      	adds	r5, #1
 80083f8:	e7ee      	b.n	80083d8 <__libc_init_array+0xc>
 80083fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083fe:	4798      	blx	r3
 8008400:	3501      	adds	r5, #1
 8008402:	e7f2      	b.n	80083ea <__libc_init_array+0x1e>
 8008404:	08008540 	.word	0x08008540
 8008408:	08008540 	.word	0x08008540
 800840c:	08008540 	.word	0x08008540
 8008410:	08008544 	.word	0x08008544

08008414 <memcpy>:
 8008414:	b510      	push	{r4, lr}
 8008416:	1e43      	subs	r3, r0, #1
 8008418:	440a      	add	r2, r1
 800841a:	4291      	cmp	r1, r2
 800841c:	d100      	bne.n	8008420 <memcpy+0xc>
 800841e:	bd10      	pop	{r4, pc}
 8008420:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008424:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008428:	e7f7      	b.n	800841a <memcpy+0x6>

0800842a <memset>:
 800842a:	4402      	add	r2, r0
 800842c:	4603      	mov	r3, r0
 800842e:	4293      	cmp	r3, r2
 8008430:	d100      	bne.n	8008434 <memset+0xa>
 8008432:	4770      	bx	lr
 8008434:	f803 1b01 	strb.w	r1, [r3], #1
 8008438:	e7f9      	b.n	800842e <memset+0x4>
	...

0800843c <_init>:
 800843c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843e:	bf00      	nop
 8008440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008442:	bc08      	pop	{r3}
 8008444:	469e      	mov	lr, r3
 8008446:	4770      	bx	lr

08008448 <_fini>:
 8008448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844a:	bf00      	nop
 800844c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800844e:	bc08      	pop	{r3}
 8008450:	469e      	mov	lr, r3
 8008452:	4770      	bx	lr
